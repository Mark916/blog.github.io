<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RESTful API 设计规范</title>
      <link href="/posts/13695.html"/>
      <url>/posts/13695.html</url>
      
        <content type="html"><![CDATA[<h1 id="RESTful-API-设计规范"><a href="#RESTful-API-设计规范" class="headerlink" title="RESTful API 设计规范"></a>RESTful API 设计规范</h1><blockquote><p>原文链接：<a href="https://github.com/godruoyi/restful-api-specification">https://github.com/godruoyi/restful-api-specification</a></p></blockquote><h2 id="关于「能愿动词」的使用"><a href="#关于「能愿动词」的使用" class="headerlink" title="关于「能愿动词」的使用"></a>关于「能愿动词」的使用</h2><p>为了避免歧义，文档大量使用了「能愿动词」，对应的解释如下：</p><ul><li><code>必须 (MUST)</code>：绝对，严格遵循，请照做，无条件遵守；</li><li><code>一定不可 (MUST NOT)</code>：禁令，严令禁止；</li><li><code>应该 (SHOULD)</code> ：强烈建议这样做，但是不强求；</li><li><code>不该 (SHOULD NOT)</code>：强烈不建议这样做，但是不强求；</li><li><code>可以 (MAY)</code> 和 <code>可选 (OPTIONAL)</code> ：选择性高一点，在这个文档内，此词语使用较少；</li></ul><blockquote><p>参见：<a href="http://www.ietf.org/rfc/rfc2119.txt">RFC 2119</a></p></blockquote><h2 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h2><p>客户端在通过 <code>API</code> 与后端服务通信的过程中，<code>应该</code> 使用 <code>HTTPS</code> 协议。</p><h2 id="API-Root-URL"><a href="#API-Root-URL" class="headerlink" title="API Root URL"></a>API Root URL</h2><p><code>API</code> 的根入口点应尽可能保持足够简单，这里有两个常见的 <code>URL</code> 根例子：</p><ul><li>api.example.com/*</li><li>example.com/api/*</li></ul><blockquote><p>如果你的应用很庞大或者你预计它将会变的很庞大，那 <code>应该</code> 将 <code>API</code> 放到子域下（<code>api.example.com</code>）。这种做法可以保持某些规模化上的灵活性。</p></blockquote><h2 id="Versioning"><a href="#Versioning" class="headerlink" title="Versioning"></a>Versioning</h2><p>所有的 <code>API</code> 必须保持向后兼容，你 <code>必须</code> 在引入新版本 <code>API</code> 的同时确保旧版本 <code>API</code> 仍然可用。所以 <code>应该</code> 为其提供版本支持。</p><p>目前比较常见的两种版本号形式：</p><h3 id="在-URL-中嵌入版本编号"><a href="#在-URL-中嵌入版本编号" class="headerlink" title="在 URL 中嵌入版本编号"></a>在 URL 中嵌入版本编号</h3><pre class="line-numbers language-http"><code class="language-http">api.example.com/v1/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种做法是版本号直观、易于调试；另一种做法是，将版本号放在 <code>HTTP Header</code> 头中：</p><h3 id="通过媒体类型来指定版本信息"><a href="#通过媒体类型来指定版本信息" class="headerlink" title="通过媒体类型来指定版本信息"></a>通过媒体类型来指定版本信息</h3><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">Accept:</span> application/vnd.example.com.v1+json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>vnd</code> 表示 <code>Standards Tree</code> 标准树类型，有三个不同的树: <code>x</code>，<code>prs</code> 和 <code>vnd</code>。你使用的标准树需要取决于你开发的项目</p><ul><li>未注册的树（<code>x</code>）主要表示本地和私有环境</li><li>私有树（<code>prs</code>）主要表示没有商业发布的项目</li><li>供应商树（<code>vnd</code>）主要表示公开发布的项目</li></ul><blockquote><p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p></blockquote><p>至于具体把版本号放在什么地方，这个问题一直存在很大的争议，但由于我们大多数时间都在使用 <code>Laravel</code> 开发，<code>应该</code> 使用 <a href="https://github.com/dingo/api">dingo/api</a> 来快速构建应用，它采用第二种方式来管理 <code>API</code> 版本，并且已集成了标准的 <code>HTTP Response</code>。</p><h2 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a>Endpoints</h2><p>端点就是指向特定资源或资源集合的 <code>URL</code>。在端点的设计中，你 <code>必须</code> 遵守下列约定：</p><ul><li>URL 的命名 <code>必须</code> 全部小写</li><li>URL 中资源（<code>resource</code>）的命名 <code>必须</code> 是名词，并且 <code>必须</code> 是复数形式</li><li><code>必须</code> 优先使用 <code>Restful</code> 类型的 URL</li><li>URL <code>必须</code> 是易读的</li><li>URL <code>一定不可</code> 暴露服务器架构</li></ul><blockquote><p>至于 URL 是否必须使用连字符（<code>-</code>） 或下划线（<code>_</code>），不做硬性规定，但 <code>必须</code> 根据团队情况统一一种风格。</p></blockquote><p>来看一个反例</p><ul><li><a href="https://api.example.com/getUserInfo?userid=1">https://api.example.com/getUserInfo?userid=1</a></li><li><a href="https://api.example.com/getusers">https://api.example.com/getusers</a></li><li><a href="https://api.example.com/sv/u">https://api.example.com/sv/u</a></li><li><a href="https://api.example.com/cgi-bin/users/get_user.php?userid=1">https://api.example.com/cgi-bin/users/get_user.php?userid=1</a></li></ul><p>再来看一个正列</p><ul><li><a href="https://api.example.com/zoos">https://api.example.com/zoos</a></li><li><a href="https://api.example.com/animals">https://api.example.com/animals</a></li><li><a href="https://api.example.com/zoos/{zoo}/animals">https://api.example.com/zoos/{zoo}/animals</a></li><li><a href="https://api.example.com/animal_types">https://api.example.com/animal_types</a></li><li><a href="https://api.example.com/employees">https://api.example.com/employees</a></li></ul><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>对于资源的具体操作类型，由 <code>HTTP</code> 动词表示。常用的 <code>HTTP</code> 动词有下面五个（括号里是对应的 <code>SQL</code> 命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>其中</p><p>1 删除资源 <code>必须</code> 用 <code>DELETE</code> 方法<br>2 创建新的资源 <code>必须</code> 使用 <code>POST</code> 方法<br>3 更新资源 <code>应该</code> 使用 <code>PUT</code> 方法<br>4 获取资源信息 <code>必须</code> 使用 <code>GET</code> 方法</p><p>针对每一个端点来说，下面列出所有可行的 <code>HTTP</code> 动词和端点的组合</p><table><thead><tr><th>请求方法</th><th>URL</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>/zoos</td><td>列出所有的动物园(ID和名称，不要太详细)</td></tr><tr><td>POST</td><td>/zoos</td><td>新增一个新的动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}</td><td>获取指定动物园详情</td></tr><tr><td>PUT</td><td>/zoos/{zoo}</td><td>更新指定动物园(整个对象)</td></tr><tr><td>PATCH</td><td>/zoos/{zoo}</td><td>更新动物园(部分对象)</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}</td><td>删除指定动物园</td></tr><tr><td>GET</td><td>/zoos/{zoo}/animals</td><td>检索指定动物园下的动物列表(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animals</td><td>列出所有动物(ID和名称)。</td></tr><tr><td>POST</td><td>/animals</td><td>新增新的动物</td></tr><tr><td>GET</td><td>/animals/{animal}</td><td>获取指定的动物详情</td></tr><tr><td>PUT</td><td>/animals/{animal}</td><td>更新指定的动物(整个对象)</td></tr><tr><td>PATCH</td><td>/animals/{animal}</td><td>更新指定的动物(部分对象)</td></tr><tr><td>GET</td><td>/animal_types</td><td>获取所有动物类型(ID和名称，不要太详细)</td></tr><tr><td>GET</td><td>/animal_types/{type}</td><td>获取指定的动物类型详情</td></tr><tr><td>GET</td><td>/employees</td><td>检索整个雇员列表</td></tr><tr><td>GET</td><td>/employees/{employee}</td><td>检索指定特定的员工</td></tr><tr><td>GET</td><td>/zoos/{zoo}/employees</td><td>检索在这个动物园工作的雇员的名单(身份证和姓名)</td></tr><tr><td>POST</td><td>/employees</td><td>新增指定新员工</td></tr><tr><td>POST</td><td>/zoos/{zoo}/employees</td><td>在特定的动物园雇佣一名员工</td></tr><tr><td>DELETE</td><td>/zoos/{zoo}/employees/{employee}</td><td>从某个动物园解雇一名员工</td></tr></tbody></table><blockquote><p>超出 <code>Restful</code> 端点的，<code>应该</code> 模仿上表的方式来定义端点。</p></blockquote><h2 id="Filtering"><a href="#Filtering" class="headerlink" title="Filtering"></a>Filtering</h2><blockquote><p>如果记录数量很多，服务器不可能都将它们返回给用户。API <code>应该</code> 提供参数，过滤返回结果。下面是一些常见的参数。</p></blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>所有 <code>URL</code> 参数 <code>必须</code> 是全小写，<code>必须</code> 使用下划线类型的参数形式。</p><blockquote><p>分页参数 <code>必须</code> 固定为 <code>page</code>、<code>per_page</code></p></blockquote><p>经常使用的、复杂的查询 <code>应该</code> 标签化，降低维护成本。如</p><pre class="line-numbers language-http"><code class="language-http">GET /trades?status=closed&amp;sort=sortby=name&amp;order=asc# 可为其定制快捷方式GET /trades/recently_closed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p><code>应该</code> 使用 <code>OAuth2.0</code> 的方式为 API 调用者提供登录认证。<code>必须</code> 先通过登录接口获取 <code>Access Token</code> 后再通过该 <code>token</code> 调用需要身份认证的 <code>API</code>。</p><p>Oauth 的端点设计示列</p><ul><li>RFC 6749   /token</li><li>Twitter    /oauth2/token</li><li>Fackbook   /oauth/access_token</li><li>Google     /o/oauth2/token</li><li>Github     /login/oauth/access_token</li><li>Instagram  /oauth/authorize</li></ul><p>客户端在获得 <code>access token</code> 的同时 <code>必须</code> 在响应中包含一个名为 <code>expires_in</code> 的数据，它表示当前获得的 <code>token</code> 会在多少 <code>秒</code> 后失效。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"access_token"</span><span class="token operator">:</span> <span class="token string">"token...."</span><span class="token punctuation">,</span>    <span class="token property">"token_type"</span><span class="token operator">:</span> <span class="token string">"Bearer"</span><span class="token punctuation">,</span>    <span class="token property">"expires_in"</span><span class="token operator">:</span> <span class="token number">3600</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端在请求需要认证的 <code>API</code> 时，<code>必须</code> 在请求头 <code>Authorization</code> 中带上 <code>access_token</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">Authorization: Bearer token<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当超过指定的秒数后，<code>access token</code> 就会过期，再次用过期/或无效的 <code>token</code> 访问时，服务端 <code>应该</code> 返回 <code>invalid_token</code> 的错误或 <code>401</code> 错误码。</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">401 Unauthorized</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Cache-Control:</span> no-store<span class="token header-name keyword">Pragma:</span> no-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"invalid_token"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Laravel 开发中，<code>应该</code> 使用 <a href="https://github.com/tymondesigns/jwt-auth">JWT</a> 来为管理你的 Token，并且 <code>一定不可</code> 在 <code>api</code> 中间件中开启请求 <code>session</code>。</p></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p>所有的 <code>API</code> 响应，<code>必须</code> 遵守 <code>HTTP</code> 设计规范，<code>必须</code> 选择合适的 <code>HTTP</code> 状态码。<code>一定不可</code> 所有接口都返回状态码为 <code>200</code> 的 <code>HTTP</code> 响应，如：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 ok</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Server:</span> example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"username"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 ok</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Server:</span> example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> -<span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"该活动不存在"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下表列举了常见的 <code>HTTP</code> 状态码</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>代表请求已被接受，需要继续处理</td></tr><tr><td>2xx</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端原因引起的错误</td></tr><tr><td>5xx</td><td>服务端原因引起的错误</td></tr></tbody></table><blockquote><p>只有来自客户端的请求被正确的处理后才能返回 <code>2xx</code> 的响应，所以当 API 返回 <code>2xx</code> 类型的状态码时，前端 <code>必须</code> 认定该请求已处理成功。</p></blockquote><p>必须强调的是，所有 <code>API</code> <code>一定不可</code> 返回 <code>1xx</code> 类型的状态码。当 <code>API</code> 发生错误时，<code>必须</code> 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p><p>1、将错误详细放入 <code>HTTP</code> 响应首部；</p><pre class="line-numbers language-http"><code class="language-http"><span class="token header-name keyword">X-MYNAME-ERROR-CODE:</span> 4001<span class="token header-name keyword">X-MYNAME-ERROR-MESSAGE:</span> Bad authentication token<span class="token header-name keyword">X-MYNAME-ERROR-INFO:</span> http://docs.example.com/api/v1/authentication<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、直接放入响应实体中；</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">401 Unauthorized</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:02:59 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">40100</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"Unauthorized"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考虑到易读性和客户端的易处理性，我们 <code>必须</code> 把错误信息直接放到响应实体中，并且错误格式 <code>应该</code> 满足如下格式：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"您查找的资源不存在"</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span> <span class="token number">404001</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中错误码（<code>error_code</code>）<code>必须</code> 和 <code>HTTP</code> 状态码对应，也方便错误码归类，如：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">429 Too Many Requests</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:15:52 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">429001</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"你操作太频繁了"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">403 Forbidden</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:19:27 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">403002</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"用户已禁用"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>应该</code> 在返回的错误信息中，同时包含面向开发者和面向用户的提示信息，前者可方便开发人员调试，后者可直接展示给终端用户查看如：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"直接展示给终端用户的错误信息"</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span> <span class="token string">"业务错误码"</span><span class="token punctuation">,</span>    <span class="token property">"error"</span><span class="token operator">:</span> <span class="token string">"供开发者查看的错误信息"</span><span class="token punctuation">,</span>    <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"错误堆栈，必须开启 debug 才存在"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面详细列举了各种情况 API 的返回说明。</p><h3 id="200-ok"><a href="#200-ok" class="headerlink" title="200 ok"></a>200 ok</h3><p><code>200</code> 状态码是最常见的 <code>HTTP</code> 状态码，在所有 <strong>成功</strong> 的 <code>GET</code> 请求中，<code>必须</code> 返回此状态码。<code>HTTP</code> 响应实体部分 <code>必须</code> 直接就是数据，不要做多余的包装。</p><p>错误示例：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">200 ok</span></span><span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Server:</span> example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"nickname"</span><span class="token operator">:</span><span class="token string">"fwest"</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"example"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确示例：</p><p>1、获取单个资源详情</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"Sitoi"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">88</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、获取资源集合</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"Sitoi"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">88</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"username"</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">88</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、额外的媒体信息</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://lorempixel.com/640/480/?32556"</span><span class="token punctuation">,</span>            <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"fwest"</span><span class="token punctuation">,</span>            <span class="token property">"last_logined_time"</span><span class="token operator">:</span> <span class="token string">"2018-05-29 04:56:43"</span><span class="token punctuation">,</span>            <span class="token property">"has_registed"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://lorempixel.com/640/480/?86144"</span><span class="token punctuation">,</span>            <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"zschowalter"</span><span class="token punctuation">,</span>            <span class="token property">"last_logined_time"</span><span class="token operator">:</span> <span class="token string">"2018-06-16 15:18:34"</span><span class="token punctuation">,</span>            <span class="token property">"has_registed"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"pagination"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>            <span class="token property">"count"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"per_page"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token property">"current_page"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"total_pages"</span><span class="token operator">:</span> <span class="token number">51</span><span class="token punctuation">,</span>            <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"next"</span><span class="token operator">:</span> <span class="token string">"http://api.example.com?page=2"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其中，分页和其他额外的媒体信息，必须放到 <code>meta</code> 字段中。</p></blockquote><h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 Created"></a>201 Created</h3><p>当服务器创建数据成功时，<code>应该</code> 返回此状态码。常见的应用场景是使用 <code>POST</code> 提交用户信息，如：</p><ul><li>添加了新用户</li><li>上传了图片</li><li>创建了新活动</li></ul><p>等，都可以返回 <code>201</code> 状态码。需要注意的是，你可以选择在用户创建成功后返回新用户的数据</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">201 Created</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:13:40 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https:\/\/lorempixel.com\/640\/480\/?32556"</span><span class="token punctuation">,</span>    <span class="token property">"nickname"</span><span class="token operator">:</span> <span class="token string">"fwest"</span><span class="token punctuation">,</span>    <span class="token property">"last_logined_time"</span><span class="token operator">:</span> <span class="token string">"2018-05-29 04:56:43"</span><span class="token punctuation">,</span>    <span class="token property">"created_at"</span><span class="token operator">:</span> <span class="token string">"2018-06-16 17:55:55"</span><span class="token punctuation">,</span>    <span class="token property">"updated_at"</span><span class="token operator">:</span> <span class="token string">"2018-06-16 17:55:55"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以返回一个响应实体为空的 <code>HTTP Response</code> 如：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">201 Created</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> text/html; charset=UTF-8<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:12:20 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里我们 <code>应该</code> 采用第二种方式，因为大多数情况下，客户端只需要知道该请求操作成功与否，并不需要返回新资源的信息。</p></blockquote><h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 Accepted"></a>202 Accepted</h3><p>该状态码表示服务器已经接受到了来自客户端的请求，但还未开始处理。常用短信发送、邮件通知、模板消息推送等这类很耗时需要队列支持的场景中；</p><blockquote><p>返回该状态码时，响应实体 <code>必须</code> 为空。</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">202 Accepted</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> text/html; charset=UTF-8<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:25:15 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h3><p>该状态码表示响应实体不包含任何数据，其中：</p><ul><li>在使用 <code>DELETE</code> 方法删除资源 <strong>成功</strong> 时，<code>必须</code> 返回该状态码</li><li>使用 <code>PUT</code>、<code>PATCH</code> 方法更新数据 <strong>成功</strong> 时，也 <code>应该</code> 返回此状态码</li></ul><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">204 No Content</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:29:12 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h3><p>所有 <code>API</code> <code>不该</code> 返回 <code>3xx</code> 类型的状态码。因为 <code>3xx</code> 类型的响应格式一般为下列格式：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">302 Found</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> text/html; charset=UTF-8<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:41:50 GMT<span class="token header-name keyword">Location:</span> https://example.com<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>refresh<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0;url<span class="token punctuation">=</span>https://example.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Redirecting to https://example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        Redirecting to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>https://example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有 <code>API</code> <code>一定不可</code> 返回纯 <code>HTML</code> 结构的响应；若一定要使用重定向功能，<code>可以</code> 返回一个响应实体为空的 <code>3xx</code> 响应，并在响应头中加上 <code>Location</code> 字段:</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">302 Found</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> text/html; charset=UTF-8<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 09:52:50 GMT<span class="token header-name keyword">Location:</span> https://sitoi.cn<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h3><p>由于明显的客户端错误（例如，请求语法格式错误、无效的请求、无效的签名等），服务器 <code>应该</code> 放弃该请求。</p><blockquote><p>当服务器无法从其他 4xx 类型的状态码中找出合适的来表示错误类型时，都 <code>必须</code> 返回该状态码。</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">400 Bad Request</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 13:22:36 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">40000</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"无效的签名"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>该状态码表示当前请求需要身份认证，以下情况都 <code>必须</code> 返回该状态码。</p><ul><li>未认证用户访问需要认证的 API</li><li>access_token 无效/过期</li></ul><blockquote><p>客户端在收到 <code>401</code> 响应后，都 <code>应该</code> 提示用户进行下一步的登录操作。</p></blockquote><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">401 Unauthorized</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">WWW-Authenticate:</span> JWTAuth<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 13:17:02 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"Token Signature could not be verified."</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token string">"40100"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h3><p>该状态码可以简单的理解为没有权限访问该请求，服务器收到请求但拒绝提供服务。</p><p>如当普通用户请求操作管理员用户时，<code>必须</code> 返回该状态码。</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">403 Forbidden</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 13:05:34 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">40301</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"权限不足"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h3><p>该状态码表示用户请求的资源不存在，如</p><ul><li>获取不存在的用户信息 （get /users/9999999）</li><li>访问不存在的端点</li></ul><p>都 <code>必须</code> 返回该状态码，若该资源已永久不存在，则 <code>应该</code> 返回 <code>410</code> 响应。</p><h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h3><p>当客户端使用的 <code>HTTP</code> 请求方法不被服务器允许时，<code>必须</code> 返回该状态码。</p><blockquote><p>如客户端调用了 <code>POST</code> 方法来访问只支持 GET 方法的 API</p></blockquote><p>该响应 <code>必须</code> 返回一个 <code>Allow</code> 头信息用以表示出当前资源能够接受的请求方法的列表。</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">405 Method Not Allowed</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Allow:</span> GET, HEAD<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 12:30:57 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"405 Method Not Allowed"</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">40500</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 Not Acceptable"></a>406 Not Acceptable</h3><p><code>API</code> 在不支持客户端指定的数据格式时，应该返回此状态码。如支持 <code>JSON</code> 和 <code>XML</code> 输出的 <code>API</code> 被指定返回 <code>YAML</code> 格式的数据时。</p><blockquote><p>Http 协议一般通过请求首部的 Accept 来指定数据格式</p></blockquote><h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 Request Timeout"></a>408 Request Timeout</h3><p>客户端请求超时时 <code>必须</code> 返回该状态码，需要注意的时，该状态码表示 <strong>客户端请求超时</strong>，在涉及第三方 <code>API</code> 调用超时时，<code>一定不可</code> 返回该状态码。</p><h3 id="409-Confilct"><a href="#409-Confilct" class="headerlink" title="409 Confilct"></a>409 Confilct</h3><p>该状态码表示因为请求存在冲突无法处理。如通过手机号码提供注册功能的 <code>API</code>，当用户提交的手机号已存在时，<code>必须</code> 返回此状态码。</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">409 Conflict</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 12:19:04 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">40900</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"手机号已存在"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 Gone"></a>410 Gone</h3><p>和 <code>404</code> 类似，该状态码也表示请求的资源不存在，只是 <code>410</code> 状态码进一步表示所请求的资源已不存在，并且未来也不会存在。在收到 <code>410</code> 状态码后，客户端 <code>应该</code> 停止再次请求该资源。</p><h3 id="413-Request-Entity-Too-Large"><a href="#413-Request-Entity-Too-Large" class="headerlink" title="413 Request Entity Too Large"></a>413 Request Entity Too Large</h3><p>该状态码表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。</p><blockquote><p>此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p></blockquote><p>如果这个状况是临时的，服务器 <code>应该</code> 返回一个 <code>Retry-After</code> 的响应头，以告知客户端可以在多少时间以后重新尝试。</p><h3 id="414-Request-URI-Too-Long"><a href="#414-Request-URI-Too-Long" class="headerlink" title="414 Request-URI Too Long"></a>414 Request-URI Too Long</h3><p>该状态码表示请求的 <code>URI</code> 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。</p><h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 Unsupported Media Type"></a>415 Unsupported Media Type</h3><p>通常表示服务器不支持客户端请求首部 <code>Content-Type</code> 指定的数据格式。如在只接受 <code>JSON</code> 格式的 <code>API</code> 中放入 <code>XML</code> 类型的数据并向服务器发送，都 <code>应该</code> 返回该状态码。</p><p>该状态码也可用于如：只允许上传图片格式的文件，但是客户端提交媒体文件非法或不是图片类型，这时 <code>应该</code> 返回该状态码：</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">415 Unsupported Media Type</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 12:09:40 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">41500</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"不允许上传的图片格式"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 Too Many Requests"></a>429 Too Many Requests</h3><p>该状态码表示用户请求次数超过允许范围。如 <code>API</code> 设定为 <code>60次/分钟</code>，当用户在一分钟内请求次数超过 60 次后，都 <code>应该</code> 返回该状态码。并且也 <code>应该</code> 在响应首部中加上下列头部：</p><pre class="line-numbers language-bash"><code class="language-bash">X-RateLimit-Limit: 10 请求速率（由应用设定，其单位一般为小时/分钟等，这里是 10次/5分钟）X-RateLimit-Remaining: 0 当前剩余的请求数量X-RateLimit-Reset: 1529839462 重置时间Retry-After: 120 下一次访问应该等待的时间（秒）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>列子</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">429 Too Many Requests</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">X-RateLimit-Limit:</span> 10<span class="token header-name keyword">X-RateLimit-Remaining:</span> 0<span class="token header-name keyword">X-RateLimit-Reset:</span> 1529839462<span class="token header-name keyword">Retry-After:</span> 290<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 11:19:32 GMT<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"You have exceeded your rate limit."</span><span class="token punctuation">,</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">42900</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>必须</code> 为所有的 API 设置 Rate Limit 支持。</p><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h3><p>该状态码 <code>必须</code> 在服务器出错时抛出，对于所有的 <code>500</code> 错误，都 <code>应该</code> 提供完整的错误信息支持，也方便跟踪调试。</p><h3 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h3><p>该状态码表示服务器暂时处理不可用状态，当服务器需要维护或第三方 <code>API</code> 请求超时/不可达时，都 <code>应该</code> 返回该状态码，其中若是主动关闭 API 服务，<code>应该</code>在返回的响应首部加上 <code>Retry-After</code> 头部，表示多少秒后可以再次访问。</p><pre class="line-numbers language-http"><code class="language-http"><span class="token response-status">HTTP/1.1 <span class="token property">503 Service Unavailable</span></span><span class="token header-name keyword">Server:</span> nginx/1.11.9<span class="token header-name keyword">Content-Type:</span> application/json<span class="token header-name keyword">Transfer-Encoding:</span> chunked<span class="token header-name keyword">Cache-Control:</span> no-cache, private<span class="token header-name keyword">Date:</span> Sun, 24 Jun 2018 10:56:20 GMT<span class="token header-name keyword">Retry-After:</span> 60<span class="token header-name keyword">Connection:</span> keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"error_code"</span><span class="token operator">:</span><span class="token number">50300</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span><span class="token string">"服务维护中"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其他 <code>HTTP</code> 状态码请参考 <a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 状态码- 维基百科</a>。</p><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><blockquote><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="https://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">创意共享3.0许可证</a>）</p></blockquote><h2 id="建议参考"><a href="#建议参考" class="headerlink" title="建议参考"></a>建议参考</h2><p><a href="https://github.com/aisuhua/restful-api-design-references">restful-api-design-references</a></p><p><a href="http://www.cnblogs.com/moonz-wu/p/4211626.html">Principles of good RESTful API Design（译）</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html">理解 RESTful 架构</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南</a></p><p><a href="https://zh.wikipedia.org/zh-hans/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">HTTP 状态码- 维基百科</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
            <tag> RESTful </tag>
            
            <tag> API </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo GitHub 从零开始搭建个人博客（四）：让你的博客完美支持 PWA</title>
      <link href="/posts/49115.html"/>
      <url>/posts/49115.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Q：为什么让你的博客支持 PWA？</p></blockquote><ul><li>可以支持离线观看</li><li>可被识别成一个应用程序</li><li>响应式 适合任何形式的设备</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>全站支持 <code>HTTPS</code></li></ul><h2 id="安装-hexo-pwa"><a href="#安装-hexo-pwa" class="headerlink" title="安装 hexo-pwa"></a>安装 hexo-pwa</h2><p>运行如下命令，安装 <code>hexo-pwa</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-pwa --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>hexo@4.2.0</code> 目前赞不兼容 <code>hexo-pwa</code>,使用 <code>hexo@4.2.0</code> 版本的用户推荐降级到 <code>hexo@4.1.1</code></p></blockquote><p>查询版本 </p><pre class="line-numbers language-bash"><code class="language-bash">hexo --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 Hexo 指定版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo@4.1.1 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改配置文件-config-yml"><a href="#修改配置文件-config-yml" class="headerlink" title="修改配置文件 _config.yml"></a>修改配置文件 _config.yml</h2><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">pwa</span><span class="token punctuation">:</span>  <span class="token key atrule">manifest</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /manifest.json    <span class="token key atrule">body</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> Sitoi      <span class="token key atrule">short_name</span><span class="token punctuation">:</span> Sitoi      <span class="token key atrule">theme_color</span><span class="token punctuation">:</span> white      <span class="token key atrule">background_color</span><span class="token punctuation">:</span> white      <span class="token key atrule">display</span><span class="token punctuation">:</span> standalone      <span class="token key atrule">orientation</span><span class="token punctuation">:</span> portrait      <span class="token key atrule">scope</span><span class="token punctuation">:</span> /      <span class="token key atrule">start_url</span><span class="token punctuation">:</span> /      <span class="token key atrule">icons</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_48.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 48x48        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_96.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 96x96        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_128.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 128x128        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_144.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 144x144        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_180.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 180x180        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_192.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 192x192        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_512.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 512x512        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 180x180  <span class="token key atrule">serviceWorker</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /sw.js    <span class="token key atrule">preload</span><span class="token punctuation">:</span>      <span class="token key atrule">urls</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /      <span class="token key atrule">posts</span><span class="token punctuation">:</span> <span class="token number">12</span>    <span class="token key atrule">opts</span><span class="token punctuation">:</span>      <span class="token key atrule">networkTimeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /hm.baidu.com/        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> networkOnly      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /www.google<span class="token punctuation">-</span>analytics.com/        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> networkOnly      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /.*\.(js<span class="token punctuation">|</span>css<span class="token punctuation">|</span>jpg<span class="token punctuation">|</span>jpeg<span class="token punctuation">|</span>png<span class="token punctuation">|</span>gif)$/        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> cacheFirst      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /\//        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> networkFirst  <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：_config.yml 中的 <code>manifest</code> 下的 <code>body</code> 与 <code>manifest.json</code> 文件内容保持一致</p></blockquote><ul><li>manifest - manifest 配置<ul><li>path - <code>manifest.json</code> 的路径，例：<code>/manifest.json</code></li><li>body - <code>manifest.json</code> 的内容，<a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">manifest.json 例子</a>. <code>body</code> 可以为空。如果为空，<code>hexo-pwa</code> 会生存一个 <code>manifest.json</code> 和 <code>JSON.stringify(body)</code></li></ul></li><li>serviceWorker - service worker 配置<ul><li>path: <code>sw.js</code>路径，例: <code>/sw.js</code>, 请务必将 <code>sw.js</code> 放在主目录下</li><li>preload - 您要预加载的网址或帖子<ul><li>urls: 预载网址的数组</li><li>posts: 预载帖子数</li></ul></li><li>opts: <a href="https://googlechromelabs.github.io/sw-toolbox/api.html#options">sw-toolbox</a> 的选项</li><li>routes - 根据 <a href="https://googlechromelabs.github.io/sw-toolbox/#main">sw-toolbox</a> 请求路由和策略。<strong>路线顺序很重要</strong>。<ul><li>pattern: <code>URL</code> 模式，此配置可以是<code>快速样式</code>或 <code>RegExp</code></li><li>strategy: 您要选择的策略。 <a href="https://googlechromelabs.github.io/sw-toolbox/api.html#options">所有策略</a>: <code>cacheFirst</code>, <code>networkFirst</code>, <code>cacheOnly</code>, <code>networkOnly</code>, <code>fastest</code>。警告：日志请求应使用 <code>networkOnly</code> 策略。</li></ul></li></ul></li><li>priority - <a href="https://hexo.io/api/filter.html">插件优先级</a> (default value is 10)</li></ul><h2 id="添加-manifest-json-和-sw-js"><a href="#添加-manifest-json-和-sw-js" class="headerlink" title="添加 manifest.json 和 sw.js"></a>添加 manifest.json 和 sw.js</h2><h3 id="manifest-json"><a href="#manifest-json" class="headerlink" title="manifest.json"></a>manifest.json</h3><p>manifest 生成地址： <a href="https://app-manifest.firebaseapp.com/">https://app-manifest.firebaseapp.com/</a></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Sitoi"</span><span class="token punctuation">,</span>  <span class="token property">"short_name"</span><span class="token operator">:</span> <span class="token string">"Sitoi"</span><span class="token punctuation">,</span>  <span class="token property">"theme_color"</span><span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>  <span class="token property">"background_color"</span><span class="token operator">:</span> <span class="token string">"white"</span><span class="token punctuation">,</span>  <span class="token property">"display"</span><span class="token operator">:</span> <span class="token string">"standalone"</span><span class="token punctuation">,</span>  <span class="token property">"scope"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token property">"start_url"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token property">"icons"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_48.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"48x48"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_96.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"96x96"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_128.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"128x128"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_144.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"144x144"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_180.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"180x180"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_192.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/medias/logo_512.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/apple-touch-icon.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"180x180"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p> 参数解释：</p></blockquote><ul><li><p>name: {string} 应用名称，用于安装横幅、启动画面显示</p></li><li><p>short_name: {string} 应用短名称，用于主屏幕显示</p></li><li><p>theme_color: {Color} css色值theme_color 属性可以指定 PWA 的主题颜色。可以通过该属性来控制浏览器 UI 的颜色。比如 PWA 启动画面上状态栏、内容页中状态栏、地址栏的颜色，会被 theme_color 所影响。</p></li><li><p>background_color: {Color} css色值 可以指定启动画面的背景颜色。</p></li><li><p>display: {string} 显示类型</p><ul><li>fullscreen    应用的显示界面将占满整个屏幕</li><li>standalone    浏览器相关UI（如导航栏、工具栏等）将会被隐藏</li><li>minimal-ui    显示形式与standalone类似，浏览器相关UI会最小化为一个按钮，不同浏览器在实现上略有不同</li><li>browser    浏览器模式，与普通网页在浏览器中打开的显示一致</li></ul></li><li><p>scope: {string} 作用域</p><ul><li>scope 应遵循如下规则：</li><li>如果没有在 manifest 中设置 scope，则默认的作用域为 manifest.json 所在文件夹；</li><li>scope 可以设置为 ../ 或者更高层级的路径来扩大PWA的作用域；</li><li>start_url 必须在作用域范围内；</li><li>如果 start_url 为相对地址，其根路径受 scope 所影响；</li><li>如果 start_url 为绝对地址（以 / 开头），则该地址将永远以 / 作为根地址；</li></ul></li><li><p>start_url: {string} 应用启动地址</p></li><li><p>icons: {Array.<imageobject>} 应用图标列表</imageobject></p><ul><li>src: {string} 图标 url</li><li>sizes {string} 图标尺寸，格式为widthxheight，宽高数值以 css 的 px 为单位。如果需要填写多个尺寸，则使用空格进行间隔，如”48x48 96x96 128x128”</li><li>type {string} 图标的 mime 类型，非必填项，该字段可让浏览器快速忽略掉不支持的图标类型</li></ul></li></ul><h3 id="sw-js"><a href="#sw-js" class="headerlink" title="sw.js"></a>sw.js</h3><pre class="line-numbers language-js"><code class="language-js"><span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">'https://g.alicdn.com/kg/workbox/3.3.0/workbox-sw.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>workbox<span class="token punctuation">)</span> <span class="token punctuation">{</span>    workbox<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> modulePathPrefix<span class="token punctuation">:</span> <span class="token string">'https://g.alicdn.com/kg/workbox/3.3.0/'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbox<span class="token punctuation">.</span>precaching<span class="token punctuation">.</span><span class="token function">precache</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'/index.html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbox<span class="token punctuation">.</span>routing<span class="token punctuation">.</span><span class="token function">registerRoute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'^https?://sitoi.cn/?$'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> workbox<span class="token punctuation">.</span>strategies<span class="token punctuation">.</span><span class="token function">networkFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbox<span class="token punctuation">.</span>routing<span class="token punctuation">.</span><span class="token function">registerRoute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'.*.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> workbox<span class="token punctuation">.</span>strategies<span class="token punctuation">.</span><span class="token function">networkFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workbox<span class="token punctuation">.</span>routing<span class="token punctuation">.</span><span class="token function">registerRoute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'.*.(?:js|css|jpg|png|gif)'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> workbox<span class="token punctuation">.</span>strategies<span class="token punctuation">.</span><span class="token function">staleWhileRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改主页域名 <code>^https?://sitoi.cn/?$</code> 的正则表达式路径，将这个的值修改成你的网站的 <code>host</code></p></blockquote><h2 id="准备-Logo-图片"><a href="#准备-Logo-图片" class="headerlink" title="准备 Logo 图片"></a>准备 Logo 图片</h2><blockquote><p>为了确保你的 PWA 图标支持所有设备，请务必使用 <code>48x48</code>、<code>96x96</code>、<code>128x128</code>、<code>144x144</code>、<code>180x180</code>、<code>192x192</code>、<code>512x512</code> 分辨率的 Logo 图片各一张</p></blockquote><p>将上述图片放到对应的目录下，并修改 <code>_config.yml</code> 和 <code>manifest.json</code> 与之对应</p><p>推荐图片大小转换网站：<a href="https://www.iloveimg.com/zh-cn/resize-image">https://www.iloveimg.com</a></p><h2 id="检查-PWA-服务"><a href="#检查-PWA-服务" class="headerlink" title="检查 PWA 服务"></a>检查 PWA 服务</h2><p>启动你的 hexo 博客</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clhexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这里你的启动可能会启动失败，很有可能的原因是因为 hexo 版本的问题，推荐使用 <a href="mailto:hexo@4.1.1">hexo@4.1.1</a> 及以下版本，请运行以下命令，重新安装 <code>hexo</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo@4.1.1 --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开你的博客：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>按 <code>F12</code> 或 <code>右击选择检查</code> 进入调试页面 后选择 Application：</p><h3 id="检查-Manifest"><a href="#检查-Manifest" class="headerlink" title="检查 Manifest"></a>检查 Manifest</h3><p>看到配置正确即可</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_sw.png" alt="Manifest"></p><h3 id="检查-Swrvice-Workers"><a href="#检查-Swrvice-Workers" class="headerlink" title="检查 Swrvice Workers"></a>检查 Swrvice Workers</h3><p>看到 <code>Status activated and is running</code> 即可</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_sw.png" alt="Swrvice Workers"></p><h2 id="使用-Chrome-安装-PWA-应用"><a href="#使用-Chrome-安装-PWA-应用" class="headerlink" title="使用 Chrome 安装 PWA 应用"></a>使用 Chrome 安装 PWA 应用</h2><p>如果一切配置正确，你会看到 你的 Chrome 浏览器 URL 栏的最右侧 有个 ➕ 号，点击即可安装 PWA 应用了</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_install_pwa.png" alt="INSTALL PWA"></p><p>没有也没关系，很有可能是你的 chrome 浏览器没有开对应的服务</p><blockquote><p>打开方式如下：</p></blockquote><ol><li><p>地址栏输入：<code>Chrome://flags</code></p></li><li><p>搜索并启用以下项目：<code>Desktop PWAs local updating</code> ,<code>Intent picker</code> 设置为 enable 即可。</p></li><li><p>重启浏览器即可添加支持。</p></li></ol><blockquote><p>安装成功后，你的电脑桌面就会有你的博客的 PWA 应用了。</p></blockquote><blockquote><p>你以为就结束了吗，一切 ok 了吗，NO 这是一篇完美的安装 PWA，你会发现，使用 ios 的 Safari 添加到主屏幕，图标并不是你设置的。</p></blockquote><h2 id="添加-IOS-Safari-PWA-图标支持"><a href="#添加-IOS-Safari-PWA-图标支持" class="headerlink" title="添加 IOS Safari PWA 图标支持"></a>添加 IOS Safari PWA 图标支持</h2><p>具体原因是因为缺少 apple-touch-icon 的图标，细心的网友应该在上文的 <code>manifest.json</code> 中的 <code>icon</code> 配置中发现了</p><h3 id="manifest-json-添加-apple-touch-icon-图标"><a href="#manifest-json-添加-apple-touch-icon-图标" class="headerlink" title="manifest.json 添加 apple-touch-icon 图标"></a>manifest.json 添加 apple-touch-icon 图标</h3><pre class="line-numbers language-json"><code class="language-json">    <span class="token punctuation">{</span>      <span class="token property">"src"</span><span class="token operator">:</span> <span class="token string">"/apple-touch-icon.png"</span><span class="token punctuation">,</span>      <span class="token property">"sizes"</span><span class="token operator">:</span> <span class="token string">"180x180"</span><span class="token punctuation">,</span>      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图标的大小设置为 180x180 直接复制一份，重命名一下即可</p><blockquote><p><strong>注</strong>：_config.yml 中的 <code>manifest</code> 下的 <code>body</code> 与 <code>manifest.json</code> 文件内容保持一致</p></blockquote><h3 id="修改-head-ejs-文件"><a href="#修改-head-ejs-文件" class="headerlink" title="修改 head.ejs 文件"></a>修改 head.ejs 文件</h3><p>文件路径：<code>themes/matery/layout/_partial/head.ejs</code></p><p>在 head 标签里 添加三个元素</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apple-touch-icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.appletouchicon %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>theme-color<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>theme-color：中的 content 对应的是你 <code>manifest.json</code> 中的 <code>theme_color</code> 的值</p></li><li><p>viewport: 用于针对移动屏幕优化 PWA 应用 详细链接<a href="https://web.dev/viewport/?utm_source=lighthouse&amp;utm_medium=unknown">viewport</a></p></li><li><p>apple-touch-icon：配置 <code>apple-touch-icon</code> 图标链接</p><p>  请在 <code>_config.yml</code> 中添加：<code>appletouchicon</code></p><pre class="line-numbers language-yaml"><code class="language-yaml">  <span class="token key atrule">appletouchicon</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><blockquote><p>到此你的 Hexo 博客应该完美的添加了 PWA 了 ~~ 赶紧去体验一下离线访问博客的快速吧。<br>如有问题，请在下方留言!</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo GitHub 从零开始搭建个人博客（三）：Matery 主题（DIY 版）详细配置教程，附博客源码</title>
      <link href="/posts/63466.html"/>
      <url>/posts/63466.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>阅读本篇前，请确保你已经能够自己在 <code>GitHub Pages</code> 上搭建一个属于自己的初始化博客了。</p><ul><li><a href="https://sitoi.cn/posts/6666.html">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></li><li><a href="https://sitoi.cn/posts/27801.html">基于 Hexo GitHub 从零开始搭建个人博客（二）：搭建基础篇</a></li></ul><p>本篇是关于 <a href="https://sitoi.cn">https://sitoi.cn</a> 本博客所用到的主题的一个介绍和配置教程！</p><p>阅读完本篇，你的博客基本上已经完全可以使用了。如果有不清楚的地方，也可以阅读本系列后面的文章，或者留言提问，也可以加我微信或 QQ。</p><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_index.png" alt="首页"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_tuijian.png" alt="首页推荐文章"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_list.png" alt="首页文章列表"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_about.png" alt="关于页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_post.png" alt="文章详细页"></p><h2 id="博客特性"><a href="#博客特性" class="headerlink" title="博客特性"></a>博客特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>绚丽彩虹播放器</li><li>全站支持 PWA</li><li>看板娘</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://sitoi.cn/posts/15814.html">Markdown</a> 来写博客和文章。</p><ul><li>第一步，点击<a href="https://github.com/Sitoi/Sitoi-blog">这里</a> 下载博客源码到本地</li><li>下载到本地安装 npm 依赖包</li><li>第二步，修改下面的配置，DIY 你的个人博客</li></ul><h2 id="安装-npm-依赖包"><a href="#安装-npm-依赖包" class="headerlink" title="安装 npm 依赖包"></a>安装 npm 依赖包</h2><p>下载博客源码后，进入项目根目录安装 npm 依赖包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测-hexo-版本"><a href="#检测-hexo-版本" class="headerlink" title="检测 hexo 版本"></a>检测 hexo 版本</h3><pre class="line-numbers language-bash"><code class="language-bash">hexo --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出内容：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo: 4.1.1hexo-cli: 3.1.0os: Windows_NT 10.0.18363 win32 x64node: 13.5.0v8: 7.9.317.25-node.23uv: 1.34.0zlib: 1.2.11brotli: 1.0.7ares: 1.15.0modules: 79nghttp2: 1.40.0napi: 5llhttp: 2.0.1openssl: 1.1.1dcldr: 36.0icu: 65.1tz: 2019cunicode: 12.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看 hexo 版本，如果不是  <code>hexo: 4.1.1</code> 请运行如下命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo@4.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>因为 hexo 版本问题会导致博客运行报错</p></blockquote><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li><p>博客基本信息</p><ul><li>标题</li><li>副标题</li><li>简介</li><li>关键词</li><li>作者</li><li><code>url</code></li><li><code>favicon</code> </li><li><code>Logo</code></li></ul></li><li><p>菜单栏</p><ul><li>基本菜单信息</li><li>二级菜单配置</li><li>手机二级菜单</li></ul></li><li><p>博客首页的配置</p><ul><li>菜单栏右侧 Fork Me 配置</li><li>轮播图配置</li><li>轮播图中的第二个按钮配置</li><li>个人信息</li><li>首页语句</li><li>首页音乐播放器</li><li>首页视频播放器</li><li>首页推荐文章名称和按钮配置</li><li>博客分页</li><li>网站显示的日期格式</li><li>博客页脚信息</li></ul></li><li><p>博客文章页配置</p><ul><li>文章基本信息</li><li>文章字数统计</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>配置 emoji 表情</li><li>转载限制配置</li><li>文章阅读密码</li><li>文章分享模块</li></ul></li><li><p>博客关于页配置</p><ul><li>个人信息</li><li>项目信息</li><li>技能信息</li></ul></li><li><p>博客留言板配置</p><ul><li>Gitalk</li><li>Gitment</li><li>Disqus</li><li>Livere</li><li>Valine</li></ul></li><li><p>博客友链的配置</p></li><li><p>博客搜索的配置</p></li><li><p>博客特效的配置</p><ul><li>单机页面爱心效果</li><li>背景 Canvas-nest</li></ul></li><li><p>博客统计的配置</p><ul><li>不蒜子</li><li>Google Analytics</li><li>Baidu Analytics</li><li>站长之家</li></ul></li><li><p>博客其他功能配置</p><ul><li>是否每日切换背景</li><li>图片懒加载</li><li>网页预加载</li><li>在线聊天功能</li><li>绚丽彩虹播放器</li><li>博客导流公众号</li><li>豆瓣书单影单</li><li>博客看板娘</li></ul></li><li><p>博客添加 PWA 功能</p></li><li><p>博客其他样式配置</p><ul><li>修改主题颜色</li><li>修改 banner 图和文章特色图<br>  默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul></li></ul><h3 id="修改博客基本信息"><a href="#修改博客基本信息" class="headerlink" title="修改博客基本信息"></a>修改博客基本信息</h3><ul><li><code>title</code>：网站的标题</li><li><code>subtitle</code>：网站副标题，默认打字效果</li><li><code>description</code>: 网站简介</li><li><code>keywords</code>：便于搜索引擎收录，分类</li><li><code>author</code>：网站作者</li><li><code>url</code>：你的网站主 <code>URL</code>（如：<code>https://xxx.github.io</code>）,如果你后期绑定了自己的域名，切记修改成你的域名。</li><li><code>favicon</code>：<code>favicon</code> 就是站点标签栏的小图标，选择新的图标文件覆盖即可，文件位置：<code>themes/matery/source/favicon.ico</code></li><li><code>logo</code>：网站的 Logo 选择新的图标文件覆盖即可，文件位置：<code>themes/matery/source/apple-touch-icon.png</code></li></ul><h4 id="配置网站文章链接格式"><a href="#配置网站文章链接格式" class="headerlink" title="配置网站文章链接格式"></a>配置网站文章链接格式</h4><p><a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink 插件</a> 可以生成非中文的链接。</p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的 URI 地址。每篇文章的 Front-matter 中会自动增加一个配置项：abbrlink: xxxxx，该项的值就是当前文章的 URI 地址。</p><p>执行安装命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改以下配置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> posts/<span class="token punctuation">:</span>abbrlink.html   <span class="token comment" spellcheck="true"># 此处可以自己设置，也可以直接使用 :abbrlink.html</span><span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16                      <span class="token comment" spellcheck="true"># 算法选项： crc16(default) and crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec                        <span class="token comment" spellcheck="true"># 输出进制： dec(default) and hex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样站点结构就变成了：域名/posts/xxx.html</p></blockquote><h3 id="修改博客菜单栏配置"><a href="#修改博客菜单栏配置" class="headerlink" title="修改博客菜单栏配置"></a>修改博客菜单栏配置</h3><h4 id="配置基本菜单导航信息"><a href="#配置基本菜单导航信息" class="headerlink" title="配置基本菜单导航信息"></a>配置基本菜单导航信息</h4><ol><li>菜单导航名称可以是中文也可以是英文(如：<code>Index</code> 或<code>主页</code>) </li><li>图标 icon 可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Contact</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /contact    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>envelope  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加 <code>children</code> 关键字(如：<code>Media</code> 菜单下添加 <code>children</code>)     </li><li>在 <code>children</code> 下创建二级菜单的 名称 <code>name</code>,路径 <code>url</code> 和图标 <code>icon</code>.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Contact</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /contact    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>envelope  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Media</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#    url: /</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 影单        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 书单        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="手机二级菜单配置"><a href="#手机二级菜单配置" class="headerlink" title="手机二级菜单配置"></a>手机二级菜单配置</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">navMenu</span><span class="token punctuation">:</span>  <span class="token key atrule">mleft</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true">#  二级侧栏子菜单是否对齐左边</span>  <span class="token key atrule">bgColor</span><span class="token punctuation">:</span> <span class="token string">" "</span>   <span class="token comment" spellcheck="true">#  二级侧栏子菜单背景颜色,留空即为全局背景色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改博客首页的配置"><a href="#修改博客首页的配置" class="headerlink" title="修改博客首页的配置"></a>修改博客首页的配置</h3><h4 id="菜单栏最右侧是否显示-fork-me-on-github-的图标"><a href="#菜单栏最右侧是否显示-fork-me-on-github-的图标" class="headerlink" title="菜单栏最右侧是否显示 fork me on github 的图标"></a>菜单栏最右侧是否显示 fork me on github 的图标</h4><p>默认为 true，你可以修改为你的仓库地址. </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubLink</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                                   </span><span class="token comment" spellcheck="true"># 是否开启</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/sitoi/sitoi.github.io  <span class="token comment" spellcheck="true"># GitHub 仓库地址</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> Fork Me                                 <span class="token comment" spellcheck="true"># 显示文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="首页轮播图相关配置"><a href="#首页轮播图相关配置" class="headerlink" title="首页轮播图相关配置"></a>首页轮播图相关配置</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">cover</span><span class="token punctuation">:</span>  <span class="token key atrule">showPrevNext</span><span class="token punctuation">:</span> <span class="token boolean important">false     </span><span class="token comment" spellcheck="true"># 是否显示左右切换按钮</span>  <span class="token key atrule">showIndicators</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否显示指示器</span>  <span class="token key atrule">autoLoop</span><span class="token punctuation">:</span> <span class="token boolean important">false         </span><span class="token comment" spellcheck="true"># 是否自动轮播</span>  <span class="token key atrule">duration</span><span class="token punctuation">:</span> <span class="token number">120           </span><span class="token comment" spellcheck="true"># 切换延迟时间，默认单位 秒</span>  <span class="token key atrule">intervalTime</span><span class="token punctuation">:</span> <span class="token number">5000      </span><span class="token comment" spellcheck="true"># 自动切换下一张的间隔时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="首页轮播图中第二个按钮配置"><a href="#首页轮播图中第二个按钮配置" class="headerlink" title="首页轮播图中第二个按钮配置"></a>首页轮播图中第二个按钮配置</h4><p>首页 <code>banner</code> 中的第二个按钮的配置，包括按钮的<code>显示名称</code>、<code>font awesome图标</code>和<code>按钮的超链接</code>.</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">indexbtn</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                     </span><span class="token comment" spellcheck="true"># 是否启动第二个按钮</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> Github                     <span class="token comment" spellcheck="true"># 按钮名称</span>  <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>github<span class="token punctuation">-</span>alt              <span class="token comment" spellcheck="true"># 按钮图标</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Sitoi/   <span class="token comment" spellcheck="true"># 按钮超链接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="首页轮播图中的个人信息"><a href="#首页轮播图中的个人信息" class="headerlink" title="首页轮播图中的个人信息"></a>首页轮播图中的个人信息</h4><p><code>首页轮播图</code>中、<code>页脚</code>、以及<code>关于</code>页面都会出现的个人信息，留空即不启用</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">socialLink</span><span class="token punctuation">:</span>  <span class="token key atrule">qq</span><span class="token punctuation">:</span> <span class="token number">1333397418               </span><span class="token comment" spellcheck="true"># QQ</span>  <span class="token key atrule">github</span><span class="token punctuation">:</span> Sitoi                <span class="token comment" spellcheck="true"># GitHub</span>  <span class="token key atrule">facebook</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># Facebook</span>  <span class="token key atrule">twitter</span><span class="token punctuation">:</span>                     <span class="token comment" spellcheck="true"># Twitter</span>  <span class="token key atrule">weibo</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true"># Weibo</span>  <span class="token key atrule">email</span><span class="token punctuation">:</span> 133397418@qq.com      <span class="token comment" spellcheck="true"># 邮箱</span>  <span class="token key atrule">zhihu</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true"># 知乎</span>  <span class="token key atrule">jianshu</span><span class="token punctuation">:</span> 0289c6c3a717        <span class="token comment" spellcheck="true"># 简书</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> <span class="token boolean important">true                    </span><span class="token comment" spellcheck="true"># RSS 订阅       true 表示启动、false 表示关闭</span>  <span class="token key atrule">wechat</span><span class="token punctuation">:</span> <span class="token boolean important">true                 </span><span class="token comment" spellcheck="true"># 微信好友二维码  true 表示启动、false 表示关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>除 rss 和 wechat 外，其他的都需填写对应的信息即可</p></blockquote><h5 id="RSS-订阅"><a href="#RSS-订阅" class="headerlink" title="RSS 订阅"></a>RSS 订阅</h5><p>基于 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="微信好友二维码"><a href="#微信好友二维码" class="headerlink" title="微信好友二维码"></a>微信好友二维码</h5><p>需要修改微信二维码的图片，图片位置：<code>themes/matery/source/wechat.jpg</code></p><h4 id="配置首页语句"><a href="#配置首页语句" class="headerlink" title="配置首页语句"></a>配置首页语句</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">dream</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                                 </span><span class="token comment" spellcheck="true"># 是否开启</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false                             </span><span class="token comment" spellcheck="true"># 是都显示标题</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 我的梦想                               <span class="token comment" spellcheck="true"># 标题内容</span>  <span class="token key atrule">text</span><span class="token punctuation">:</span> 放弃不难，但坚持一定很酷。——《解忧杂货铺》 <span class="token comment" spellcheck="true"># 梦想语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置首页音乐"><a href="#配置首页音乐" class="headerlink" title="配置首页音乐"></a>配置首页音乐</h4><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false                 </span><span class="token comment" spellcheck="true"># 是否开启</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false              </span><span class="token comment" spellcheck="true"># 是否显示标题</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐                <span class="token comment" spellcheck="true"># 标题内容</span>  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false                  </span><span class="token comment" spellcheck="true"># 开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">true                </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#542674'              # 颜色</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span>                   <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span>                 <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>               <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7                   </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false             </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token string">"197px"</span>        <span class="token comment" spellcheck="true"># 列表最大高度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置首页视频"><a href="#配置首页视频" class="headerlink" title="配置首页视频"></a>配置首页视频</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">video</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false                                           </span><span class="token comment" spellcheck="true"># 是否开启视频</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false                                        </span><span class="token comment" spellcheck="true"># 是否显示标题</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 治愈视频                                          <span class="token comment" spellcheck="true"># 标题内容</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//clips.vorwaerts<span class="token punctuation">-</span>gmbh.de/big_buck_bunny.mp4 <span class="token comment" spellcheck="true"># 视频超链接</span>  <span class="token key atrule">pic</span><span class="token punctuation">:</span>                                                    <span class="token comment" spellcheck="true"># 图片超链接 </span>  <span class="token key atrule">thumbnails</span><span class="token punctuation">:</span>                                               <span class="token key atrule">height</span><span class="token punctuation">:</span>                                                 <span class="token comment" spellcheck="true"># 高度</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false                                         </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'                                        # 颜色</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true                                              </span><span class="token comment" spellcheck="true"># 是否循环播放</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span>                                         <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7                                             </span><span class="token comment" spellcheck="true"># 音量大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置推荐文章"><a href="#配置推荐文章" class="headerlink" title="配置推荐文章"></a>配置推荐文章</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">recommend</span><span class="token punctuation">:</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 是否显示推荐文章的标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置博客分页"><a href="#配置博客分页" class="headerlink" title="配置博客分页"></a>配置博客分页</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">index_generator</span><span class="token punctuation">:</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date       <span class="token comment" spellcheck="true"># 排序设置 （默认按日期降序排列）</span><span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12           </span><span class="token comment" spellcheck="true"># 分页，每页文章数目</span><span class="token key atrule">pagination_dir</span><span class="token punctuation">:</span> page   <span class="token comment" spellcheck="true"># 分页目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>per_page</code>：推荐使用 3 的倍数，3，6，9，12… 设置为 0 表示不分页，以瀑布流的形式展示</li></ul><h4 id="配置网站显示日期的格式"><a href="#配置网站显示日期的格式" class="headerlink" title="配置网站显示日期的格式"></a>配置网站显示日期的格式</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">date_format</span><span class="token punctuation">:</span> YYYY<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>DD     <span class="token comment" spellcheck="true"># 日期格式</span><span class="token key atrule">time_format</span><span class="token punctuation">:</span> HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss       <span class="token comment" spellcheck="true"># 时间格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置页脚信息"><a href="#配置页脚信息" class="headerlink" title="配置页脚信息"></a>配置页脚信息</h4><p>页脚总字数统计，激活前请确认你已经安装了 <code>hexo-wordcount</code> 插件，安装命令: <code>npm i --save hexo-wordcount</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">totalCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>站点运行开始时间配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">time</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true"># 是否启动</span>  <span class="token key atrule">year</span><span class="token punctuation">:</span> <span class="token number">2018    </span><span class="token comment" spellcheck="true"># 年份</span>  <span class="token key atrule">month</span><span class="token punctuation">:</span> <span class="token number">09     </span><span class="token comment" spellcheck="true"># 月份</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token number">24      </span><span class="token comment" spellcheck="true"># 日期</span>  <span class="token key atrule">hour</span><span class="token punctuation">:</span> <span class="token number">00      </span><span class="token comment" spellcheck="true"># 小时</span>  <span class="token key atrule">minute</span><span class="token punctuation">:</span> <span class="token number">00    </span><span class="token comment" spellcheck="true"># 分钟</span>  <span class="token key atrule">second</span><span class="token punctuation">:</span> <span class="token number">00    </span><span class="token comment" spellcheck="true"># 秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ICP 备案信息页脚显示</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">icp</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                    </span><span class="token comment" spellcheck="true"># 是否启动备案信息</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//beian.miit.gov.cn/  <span class="token comment" spellcheck="true"># 备案链接</span>  <span class="token key atrule">text</span><span class="token punctuation">:</span> 沪ICP备18037784号<span class="token punctuation">-</span><span class="token number">1          </span><span class="token comment" spellcheck="true"># 备案信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改博客文章页配置"><a href="#修改博客文章页配置" class="headerlink" title="修改博客文章页配置"></a>修改博客文章页配置</h3><h4 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md   <span class="token comment" spellcheck="true"># 新文章的文件名称</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post       <span class="token comment" spellcheck="true"># 预设布局</span><span class="token key atrule">auto_spacing</span><span class="token punctuation">:</span> <span class="token boolean important">false        </span><span class="token comment" spellcheck="true"># 在中文和英文之间加入空格</span><span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false           </span><span class="token comment" spellcheck="true"># 把标题转换为 title case</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 在新标签中打开链接</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true             </span><span class="token comment" spellcheck="true"># 在新标签中打开链接</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true"># 对整个网站（site）生效或仅对文章（post）生效</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 需要排除的域名。主域名和子域名如 www 需分别配置    []</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0           </span><span class="token comment" spellcheck="true"># 把文件名称转换为 (1) 小写或 (2) 大写</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false       </span><span class="token comment" spellcheck="true"># 显示草稿，默认为：false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true"># 启动 Asset 文件夹</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false       </span><span class="token comment" spellcheck="true"># 把链接改为与根目录的相对位址</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true               </span><span class="token comment" spellcheck="true"># 显示未来的文章</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false            </span><span class="token comment" spellcheck="true"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false       </span><span class="token comment" spellcheck="true"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false       </span><span class="token comment" spellcheck="true"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h4><p>由于 <code>Hexo</code> 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  custom_css<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置代码的样式</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 代码块是否显示名称</span>  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true"># 代码块是否可复制</span>  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 代码块是否可以收缩</span>  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 代码是否折行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改文章字数统计"><a href="#修改文章字数统计" class="headerlink" title="修改文章字数统计"></a>修改文章字数统计</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a> 插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true        </span><span class="token comment" spellcheck="true"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">true      </span><span class="token comment" spellcheck="true"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true"># 文章字数统计</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 文章阅读次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文章-TOC-功能"><a href="#配置文章-TOC-功能" class="headerlink" title="配置文章 TOC 功能"></a>配置文章 TOC 功能</h4><p>是否激活文章 TOC 功能，并配置 TOC 支持选中哪些标题类型，这是全局配置。<br>可以在某篇文章的 Front-matter 中再加上 <code>toc: false</code>，使该篇文章关闭 TOC 目录功能</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">toc</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">heading</span><span class="token punctuation">:</span> h2<span class="token punctuation">,</span> h3<span class="token punctuation">,</span> h4<span class="token punctuation">,</span> h5  <span class="token key atrule">showToggleBtn</span><span class="token punctuation">:</span> <span class="token boolean important">true       </span><span class="token comment" spellcheck="true"># 是否显示切换TOC目录展开收缩的按钮</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文章末尾打赏功能"><a href="#配置文章末尾打赏功能" class="headerlink" title="配置文章末尾打赏功能"></a>配置文章末尾打赏功能</h4><p>默认激活（请替换为的你自己的微信、支付宝二维码图片、或者使用网络图片也可以）</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">reward</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true                        </span><span class="token comment" spellcheck="true"># 是否开启打赏</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 你的赏识是我前进的动力!        <span class="token comment" spellcheck="true"># 打赏标题</span>  <span class="token key atrule">wechat</span><span class="token punctuation">:</span> /medias/reward/wechat.jpg   <span class="token comment" spellcheck="true"># 微信打赏二维码路径</span>  <span class="token key atrule">alipay</span><span class="token punctuation">:</span> /medias/reward/alipay.jpg   <span class="token comment" spellcheck="true"># 支付宝打赏二维码路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置复制追加版权信息"><a href="#配置复制追加版权信息" class="headerlink" title="配置复制追加版权信息"></a>配置复制追加版权信息</h4><p>是否激活复制文章时追加博客和作者的版权信息。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">copyright</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">minCharNumber</span><span class="token punctuation">:</span> <span class="token number">120         </span><span class="token comment" spellcheck="true"># 至少复制多少个字符就追加版权信息.</span>  <span class="token key atrule">description</span><span class="token punctuation">:</span> 本文章著作权归作者所有，任何形式的转载都请注明出处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置-mathjax-数学公式"><a href="#配置-mathjax-数学公式" class="headerlink" title="配置 mathjax 数学公式"></a>配置 mathjax 数学公式</h4><p>是否激活 <code>mathjax</code> 数学公式，这是全局配置，但文章仍然不会都开启 <code>mathjax</code> 渲染，考虑到 <code>mathjax</code> 加载比较耗时，你还需要在需要渲染的文章的 <code>Front-matter</code> 中再加上 <code>mathjax: true</code> 才行。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//cdn.bootcss.com/mathjax/2.7.5/MathJax.js<span class="token punctuation">?</span>config=TeX<span class="token punctuation">-</span>AMS<span class="token punctuation">-</span>MML_HTMLorMML<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="emoji-表情支持"><a href="#emoji-表情支持" class="headerlink" title="emoji 表情支持"></a>emoji 表情支持</h4><p>本主题新增了对 <code>emoji</code> 表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">reprint</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true">#是否启用“转载规则限定模块”</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span> cc_by<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文章转载规则，可以是 <code>cc_by</code>, <code>cc_by_nd</code>, <code>cc_by_sa</code>, <code>cc_by_nc</code>, <code>cc_by_nc_nd</code>, <code>cc_by_nc_sa</code>, <code>cc0</code>, <code>noreprint</code> 或 <code>pay</code> 中的一个</p><h4 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h4><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的 <code>Front-matter</code> 中写上 <code>password</code> 的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过 <code>SHA256</code> 加密的，这样就不会被破解。</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">promptMessage</span><span class="token punctuation">:</span> 请输入访问本文章的密码  <span class="token key atrule">errorMessage</span><span class="token punctuation">:</span>  密码错误，将返回主页！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文章分享模块"><a href="#配置文章分享模块" class="headerlink" title="配置文章分享模块"></a>配置文章分享模块</h4><p><code>sharejs</code> 文章分享模块。</p><blockquote><p>支持顺序，可选项目为 twitter, facebook, google, qq, qzone, wechat, weibo, douban, linkedin。</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">sharejs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">sites</span><span class="token punctuation">:</span> wechat<span class="token punctuation">,</span>qq<span class="token punctuation">,</span>weibo<span class="token punctuation">,</span>twitter<span class="token punctuation">,</span>facebook<span class="token punctuation">,</span>linkedin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>addthis</code> 文章分享模块。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">addthis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">pubid</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#前往https://www.addthis.com/获取</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改博客关于页配置"><a href="#修改博客关于页配置" class="headerlink" title="修改博客关于页配置"></a>修改博客关于页配置</h3><h4 id="配置关于页个人信息"><a href="#配置关于页个人信息" class="headerlink" title="配置关于页个人信息"></a>配置关于页个人信息</h4><p>在<code>关于</code>页面中配置个人信息，包括头像、职业和个人介绍.</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">profile</span><span class="token punctuation">:</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> /medias/avatars/avatar.jpg    <span class="token comment" spellcheck="true"># 头像</span>  <span class="token key atrule">career</span><span class="token punctuation">:</span> IIoT <span class="token punctuation">|</span> Python 研发工程师       <span class="token comment" spellcheck="true"># 职业</span>  <span class="token key atrule">introduction</span><span class="token punctuation">:</span> 爬虫工程师的进阶之旅      <span class="token comment" spellcheck="true"># 个人介绍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置关于页项目信息"><a href="#配置关于页项目信息" class="headerlink" title="配置关于页项目信息"></a>配置关于页项目信息</h4><p>在<code>关于</code>页面配置<code>我的项目</code>信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">myProjects</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">private-network-ipfs</span><span class="token punctuation">:</span>      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>cubes      <span class="token key atrule">iconBackground</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to bottom right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#29B6F6 0%, #1E88E5 100%)'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Sitoi/private<span class="token punctuation">-</span>network<span class="token punctuation">-</span>ipfs      <span class="token key atrule">desc</span><span class="token punctuation">:</span> 利用 Docker 搭建 IPFS 私有网络    <span class="token key atrule">scrapy-redis-sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>github      <span class="token key atrule">iconBackground</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to bottom right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#66BB6A 0%, #81C784 100%)'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Sitoi/scrapy<span class="token punctuation">-</span>redis<span class="token punctuation">-</span>sentinel      <span class="token key atrule">desc</span><span class="token punctuation">:</span> scrapy<span class="token punctuation">-</span>redis<span class="token punctuation">-</span>sentinel 基于 scrapy<span class="token punctuation">-</span>redis 的基础上 新增 哨兵（sentinel）连接模式 以及 集群（cluster）连接模式。    <span class="token key atrule">SystemdClash</span><span class="token punctuation">:</span>      <span class="token key atrule">icon</span><span class="token punctuation">:</span> fa<span class="token punctuation">-</span>plane      <span class="token key atrule">iconBackground</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to bottom right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#29B6F6 0%, #1E88E5 100%)'</span>      <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Sitoi/SystemdClash      <span class="token key atrule">desc</span><span class="token punctuation">:</span> Clash 以 systemd 服务的方式开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置关于页技能信息"><a href="#配置关于页技能信息" class="headerlink" title="配置关于页技能信息"></a>配置关于页技能信息</h4><p>在<code>关于</code>页面配置<code>我的技能</code>信息，如果你不需要这些信息则可以将其设置为不激活或者将其删除.</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">mySkills</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">Python</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#FF0066 0%, #FF00CC 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 80%    <span class="token key atrule">Docker</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 80%    <span class="token key atrule">OpneShift</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 70%    <span class="token key atrule">Ambari</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 60%    <span class="token key atrule">HDFS</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 65%    <span class="token key atrule">Spark</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 60%    <span class="token key atrule">Flask</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 80%    <span class="token key atrule">MongoDB</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 70%    <span class="token key atrule">MySQL</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#4CAF50 0%, #81C784 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 65%    <span class="token key atrule">Vue</span><span class="token punctuation">:</span>      <span class="token key atrule">background</span><span class="token punctuation">:</span> 'linear<span class="token punctuation">-</span>gradient(to right<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#FFEB3B 0%, #FFF176 100%)'</span>      <span class="token key atrule">percent</span><span class="token punctuation">:</span> 35%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改博客留言板配置"><a href="#修改博客留言板配置" class="headerlink" title="修改博客留言板配置"></a>修改博客留言板配置</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/source/contact/index.md</code> 中的 markdown 内容，回展示在留言板的页面上，例子如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-14 13:14:00</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span class="token comment" spellcheck="true">## 畅所欲言</span><span class="token punctuation">---</span>在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/contact_md.png" alt="效果"></p><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。<br>可同时开启多个留言板~</p></blockquote><h4 id="配置-Gitalk-评论模块"><a href="#配置-Gitalk-评论模块" class="headerlink" title="配置 Gitalk 评论模块"></a>配置 Gitalk 评论模块</h4><p>默认为不激活</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> sitoi  <span class="token key atrule">repo</span><span class="token punctuation">:</span> Sitoi.github.io  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>  <span class="token key atrule">admin</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> sitoi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取-clientId-和-clientSecret"><a href="#获取-clientId-和-clientSecret" class="headerlink" title="获取 clientId 和 clientSecret"></a>获取 clientId 和 clientSecret</h5><p>首先，你得有一个Github账号（这个就不多说了吧），下面，打开 <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a>，具体填法如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/new_github_app.png" alt="GitHub APP"></p><ul><li><code>Application name</code>：应用名称，随便填</li><li><code>Homepage URL</code>：没有过多要求，可以填自己的博客地址</li><li><code>Application description</code>：应用描述，描述一下，无要求</li><li><code>Authorization callback URL</code>：这个就有要求了，填自己要使用 Gitalk 的博客地址，不可乱填</li></ul><p>接着，你就可以得到 Client ID 和 Client Secret</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/get_app_ids.png" alt="Client ID &amp; Client Secret"></p><p>进行配置，修改配置文件：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span> sitoi  <span class="token key atrule">repo</span><span class="token punctuation">:</span> Sitoi.github.io  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>    <span class="token key atrule">clientSecret</span><span class="token punctuation">:</span>  <span class="token key atrule">admin</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> sitoi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>enable</code>：true           # 指的是是否开启 Gitalk</li><li><code>owner</code>：sitoi           # 这个项目名的拥有者（GitHub账号或组织）</li><li><code>repo</code>：Sitoi.github.io  # 你要存放的项目名，下文会详细再说</li><li><code>clientId</code>：xxxxxx       # 之前的 Client ID</li><li><code>ClientSecret</code>：xxxxxx   # 之前的 Client Secret</li><li><code>admin</code>：sitoi     # 管理员用户，下文也会详细讲</li></ul><p><code>repo</code>：Gitalk 是基于 GitHub 的 issues 功能的，所以，你要为他建一个库或用现成的库，我个人建议新建一个，而 repo 就是你要用的库的名称。 比如，我就为 Gitalk 专门建了一个叫 gitalk 的库，所以在 repo: 处填 gitalk。</p><p><code>admin</code>：即管理员帐号。如果你是个人账号，那么这里就填你的账户名和协作者的账户名。<strong>以数组形式</strong>。</p><h4 id="配置-Gitment-评论模块"><a href="#配置-Gitment-评论模块" class="headerlink" title="配置 Gitment 评论模块"></a>配置 Gitment 评论模块</h4><p>默认为不激活</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">gitment</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">owner</span><span class="token punctuation">:</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span>  <span class="token key atrule">oauth</span><span class="token punctuation">:</span>    <span class="token key atrule">clientId</span><span class="token punctuation">:</span>    clientSecret<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>获取 clientId 和 clientSecret 教程和上文一样</p></blockquote><h4 id="配置-Disqus-评论模块"><a href="#配置-Disqus-评论模块" class="headerlink" title="配置 Disqus 评论模块"></a>配置 Disqus 评论模块</h4><h5 id="注册-Disqus-帐号"><a href="#注册-Disqus-帐号" class="headerlink" title="注册 Disqus 帐号"></a>注册 Disqus 帐号</h5><p>至 <a href="https://disqus.com/">Disqus</a> 首页注册账号并登录，接着点击首页的「GET STARTED」：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/disqus_index.png" alt="Disqus"></p><p>选择「I want to install Disqus on my site」选项：</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/disqus_create.png" alt="I want to install Disqus on my site"></p><p>需要输入的栏目：</p><ul><li>Websit Name：自定义 short name，且是唯一，像我是设置为 sitoi。<code>short name</code> 会在设置 <code>Hexo</code> 時需要</li><li>Category：类别，自行选择</li><li>Language：语言，自行选择</li><li>填写后点击「Create Site」</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/disqus_create_new_site.png" alt="Create Site"></p><h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">disqus</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">shortname</span><span class="token punctuation">:</span> sitoi      <span class="token comment" spellcheck="true"># 全部小写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置-Livere-来必力评论模块"><a href="#配置-Livere-来必力评论模块" class="headerlink" title="配置 Livere 来必力评论模块"></a>配置 Livere 来必力评论模块</h4><h5 id="注册-LiveRe-获取-uid"><a href="#注册-LiveRe-获取-uid" class="headerlink" title="注册 LiveRe 获取 uid"></a>注册 LiveRe 获取 uid</h5><p>进入 <a href="https://livere.com/apply">LiveRe</a>，注册账号。</p><p>LiveRe 有两个版本：</p><ul><li>City 版：是一款适合所有人使用的免费版本；</li><li>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。</li></ul><p>我们 City 版就够了。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/livere.png" alt="LiveRe"></p><p>填写完成后，进入到 管理页面 -&gt; 代码管理 -&gt; 一般网站 代码中，data-uid 即为所需 uid。</p><h5 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>将获取到的 uid 填入对应的配置文件</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">livere</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">uid</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置-Valine-评论模块的配置"><a href="#配置-Valine-评论模块的配置" class="headerlink" title="配置 Valine 评论模块的配置"></a>配置 Valine 评论模块的配置</h4><p>获取 <code>appId</code> 和 <code>appKey</code> 请参考<a href="https://valine.js.org/quickstart.html#%E8%8E%B7%E5%8F%96APP-ID-%E5%92%8C-APP-Key">官方文档</a></p><p>默认为不激活，如要使用，就请激活该配置项，并设置 <code>appId</code> 和 <code>appKey</code>。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span> APP_ID  <span class="token key atrule">appKey</span><span class="token punctuation">:</span> APP_KEY  <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span>               <span class="token comment" spellcheck="true"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'just go go'</span>  <span class="token comment" spellcheck="true"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改博客友链的配置"><a href="#修改博客友链的配置" class="headerlink" title="修改博客友链的配置"></a>修改博客友链的配置</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Sitoi"</span><span class="token punctuation">,</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://sitoi.cn/medias/avatars/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://sitoi.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"爬虫工程师的进阶之旅"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"访问主页"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"访问主页"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Licardo"</span><span class="token punctuation">,</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://licardo.cn/medias/avatar.png"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://licardo.cn/"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"一个医学生的成才之路"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"访问主页"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改博客搜索的配置"><a href="#修改博客搜索的配置" class="headerlink" title="修改博客搜索的配置"></a>修改博客搜索的配置</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置网站各种特效"><a href="#配置网站各种特效" class="headerlink" title="配置网站各种特效"></a>配置网站各种特效</h3><h4 id="单击页面爱心效果"><a href="#单击页面爱心效果" class="headerlink" title="单击页面爱心效果"></a>单击页面爱心效果</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">clicklove</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="背景-canvas-nest"><a href="#背景-canvas-nest" class="headerlink" title="背景 canvas-nest"></a>背景 canvas-nest</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">canvas_nest</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">color</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255       </span><span class="token comment" spellcheck="true">#线条颜色, 默认: '0,0,0' ；三个数字分别为(R,G,B)，注意用,分割</span>  <span class="token key atrule">pointColor</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255  </span><span class="token comment" spellcheck="true">#交点颜色, 默认: '0,0,0' ；三个数字分别为(R,G,B)，注意用,分割</span>  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.8         </span><span class="token comment" spellcheck="true"># 线条透明度（0~1）, 默认: 0.5</span>  <span class="token key atrule">zIndex</span><span class="token punctuation">:</span> <span class="token number">-1           </span><span class="token comment" spellcheck="true"># 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">150           </span><span class="token comment" spellcheck="true"># 线条的总数量, 默认: 99</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置网站统计功能"><a href="#配置网站统计功能" class="headerlink" title="配置网站统计功能"></a>配置网站统计功能</h3><h4 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h4><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">busuanziStatistics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">totalTraffic</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 总访问量</span>  <span class="token key atrule">totalNumberOfvisitors</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 总人次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Google-Analytics"><a href="#Google-Analytics" class="headerlink" title="Google Analytics"></a>Google Analytics</h4><p>至 <a href="https://analytics.google.com/">Google Analytics</a> 注册账号，获取 ID</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">googleAnalytics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> GOOGLE_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Baidu-Analytics"><a href="#Baidu-Analytics" class="headerlink" title="Baidu Analytics"></a>Baidu Analytics</h4><p>至 <a href="https://tongji.baidu.com/">百度统计</a> 注册账号，获取 ID</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">baiduAnalytics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> BAIDU_ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="站长之家统计"><a href="#站长之家统计" class="headerlink" title="站长之家统计"></a>站长之家统计</h4><h5 id="登录并注册帐号"><a href="#登录并注册帐号" class="headerlink" title="登录并注册帐号"></a>登录并注册帐号</h5><p>至 <a href="https://www.umeng.com/">站长之家</a> 注册账号，进入工作台</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng_index.png" alt="友盟"></p><h5 id="点击创建新应用，选择创建-Web-应用"><a href="#点击创建新应用，选择创建-Web-应用" class="headerlink" title="点击创建新应用，选择创建 Web 应用"></a>点击创建新应用，选择创建 Web 应用</h5><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng_create.png" alt="创建应用"></p><h5 id="创建-WEB-应用，需要输入的栏目"><a href="#创建-WEB-应用，需要输入的栏目" class="headerlink" title="创建 WEB 应用，需要输入的栏目"></a>创建 WEB 应用，需要输入的栏目</h5><ul><li>网站名称：输入你的网站名称</li><li>网站域名：填入你汪涵的域名 例如：<code>sitoi.cn</code></li><li>网站首页：填写你网站的首页，注意 HTTP 还是 HTTPS</li><li>网站类型：选择网站的类型</li><li>网站地区：选择网站的地区</li><li>网站简介：填写网站的简介</li><li>点击<code>确认添加站点</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng-create_site.png" alt="创建 WEB 应用"></p><h5 id="获取站长之家代码"><a href="#获取站长之家代码" class="headerlink" title="获取站长之家代码"></a>获取站长之家代码</h5><ul><li>点击获取代码</li><li>选择你喜欢的代码样式</li><li>点击复制到剪贴板</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/umeng_code.png" alt="统计代码"></p><h5 id="修改-footer-ejs-代码"><a href="#修改-footer-ejs-代码" class="headerlink" title="修改 footer.ejs 代码"></a>修改 footer.ejs 代码</h5><p>代码文件：<code>themes/matery/layout/_partial/footer.ejs</code><br>代码行数：大约 28 ~ 34 行<br>代码内容如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.cnzz)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token keyword">var</span> cnzz_protocol <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"https:"</span> <span class="token operator">==</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"https://"</span> <span class="token punctuation">:</span> <span class="token string">"http://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">unescape</span><span class="token punctuation">(</span><span class="token string">"%3Cspan id='cnzz_stat_icon_1278109894'%3E%3C/span%3E%3Cscript src='"</span> <span class="token operator">+</span> cnzz_protocol <span class="token operator">+</span> <span class="token string">"v1.cnzz.com/z_stat.php%3Fid%3D1278109894%26online%3D1%26show%3Dline' type='text/javascript'%3E%3C/script%3E"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>替换里面的 <code>&lt;script&gt;...&lt;/script&gt;</code> 为你复制的统计代码。</p><h5 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><p>将 配置文件中的 <code>cnzz</code> 设置为 <code>true</code> 表示启动，<code>false</code> 表示关闭</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">cnzz</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置网站其他功能"><a href="#配置网站其他功能" class="headerlink" title="配置网站其他功能"></a>配置网站其他功能</h3><h4 id="配置是否每日切换背景"><a href="#配置是否每日切换背景" class="headerlink" title="配置是否每日切换背景"></a>配置是否每日切换背景</h4><p>banner 是否每日切换。若为 false, 则 banner 默认为 <code>/medias/banner/0.jpg</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">banner</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><p>修改对应的地址即可</p><pre class="line-numbers language-ejs"><code class="language-ejs"><% if (theme.banner.enable) { %>    <script>        // 每天切换 banner 图.  Switch banner image every day.        $('.bg-cover').css('background-image', 'url(https://cdn.jsdelivr.net/gh/Sitoi/cdn/medias/banner/' + new Date().getDay() + '.jpg)');    </script><% } else { %>    <script>        $('.bg-cover').css('background-image', 'url(https://cdn.jsdelivr.net/gh/Sitoi/cdn/medias/banner/0.jpg)');    </script><% } %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用 jsdelivr 作为 cdn 加速，请修改 <code>https://cdn.jsdelivr.net/gh/Sitoi/cdn/medias/banner/</code> 为你的 cdn 文件地址</p><p>如果使用本地的图片，创建 <code>/source/medias/featureimages</code> 文件夹，添加图片，每个图片必须是<code>jpg</code> 结尾，使用数字进行编号，并需要在 <code>_config.yml</code> 做同步修改。</p><p>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">featureImages</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/0.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/1.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/2.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/3.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/4.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/5.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/6.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/7.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/8.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/9.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/10.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/11.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/12.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/13.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/14.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/15.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/16.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/17.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/18.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/19.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/20.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/21.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/22.jpg  <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//cdn.jsdelivr.net/gh/Sitoi/cdn/medias/featureimages/23.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置网页预加载"><a href="#配置网页预加载" class="headerlink" title="配置网页预加载"></a>配置网页预加载</h4><p>本主题整体采用预加载模式，预加载就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验,这样可以在我们访问其他页面的时候会稍微快点。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">instantpage</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置图片懒加载"><a href="#配置图片懒加载" class="headerlink" title="配置图片懒加载"></a>配置图片懒加载</h4><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><p>本主题图片进行懒加载，这样做效果就是 <code>html</code>、<code>css</code>、<code>js</code> 加载之后，图片再加载。既保证了网页的打开速度，也不会因图片的庞大体积而拖累了整个页面的加载。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading/orange.square<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>preloader.svg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置在线聊天功能"><a href="#配置在线聊天功能" class="headerlink" title="配置在线聊天功能"></a>配置在线聊天功能</h4><h5 id="DaoVoice-在线聊天功能"><a href="#DaoVoice-在线聊天功能" class="headerlink" title="DaoVoice 在线聊天功能"></a>DaoVoice 在线聊天功能</h5><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">daovoice</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  app_id<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="Tidio-在线聊天功能"><a href="#Tidio-在线聊天功能" class="headerlink" title="Tidio 在线聊天功能"></a>Tidio 在线聊天功能</h5><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">tidio</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  public_key<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置绚丽彩虹播放器"><a href="#配置绚丽彩虹播放器" class="headerlink" title="配置绚丽彩虹播放器"></a>配置绚丽彩虹播放器</h4><p>致 <a href="https://www.badapple.top/">绚丽彩虹播放器</a> 注册并登录，播放器 Key</p><p>官方教程视频：<a href="https://www.bilibili.com/video/av8153459">https://www.bilibili.com/video/av8153459</a></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">badApplePlayer</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false   </span><span class="token comment" spellcheck="true"># 是否启动</span>  <span class="token key atrule">XlchKey</span><span class="token punctuation">:</span> Sitoi  <span class="token comment" spellcheck="true"># 播放器 Key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="配置博客看板娘"><a href="#配置博客看板娘" class="headerlink" title="配置博客看板娘"></a>配置博客看板娘</h4><p>默认关闭</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 看板娘配置</span><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">scriptFrom</span><span class="token punctuation">:</span> local  <span class="token key atrule">pluginRootPath</span><span class="token punctuation">:</span> live2dw/  <span class="token key atrule">pluginJsPath</span><span class="token punctuation">:</span> lib/  <span class="token key atrule">pluginModelPath</span><span class="token punctuation">:</span> assets/  <span class="token key atrule">tagMode</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">log</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">model</span><span class="token punctuation">:</span>    <span class="token key atrule">use</span><span class="token punctuation">:</span> live2d<span class="token punctuation">-</span>widget<span class="token punctuation">-</span>model<span class="token punctuation">-</span>shizuku  <span class="token key atrule">display</span><span class="token punctuation">:</span>    <span class="token key atrule">position</span><span class="token punctuation">:</span> left    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">200</span>  <span class="token key atrule">mobile</span><span class="token punctuation">:</span>    <span class="token key atrule">show</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">react</span><span class="token punctuation">:</span>    <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">0.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="博客添加-PWA-功能"><a href="#博客添加-PWA-功能" class="headerlink" title="博客添加 PWA 功能"></a>博客添加 PWA 功能</h3><p>详细教程请阅读<a href="https://sitoi.cn/posts/49115.html">基于 Hexo GitHub 从零开始搭建个人博客（四）：让你的博客完美支持 PWA</a></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">pwa</span><span class="token punctuation">:</span>  <span class="token key atrule">manifest</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /manifest.json    <span class="token key atrule">body</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> Sitoi      <span class="token key atrule">short_name</span><span class="token punctuation">:</span> Sitoi      <span class="token key atrule">theme_color</span><span class="token punctuation">:</span> white      <span class="token key atrule">background_color</span><span class="token punctuation">:</span> white      <span class="token key atrule">display</span><span class="token punctuation">:</span> standalone      <span class="token key atrule">orientation</span><span class="token punctuation">:</span> portrait      <span class="token key atrule">scope</span><span class="token punctuation">:</span> /      <span class="token key atrule">start_url</span><span class="token punctuation">:</span> /      <span class="token key atrule">icons</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_48.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 48x48        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_96.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 96x96        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_128.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 128x128        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_144.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 144x144        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_180.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 180x180        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_192.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 192x192        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /medias/logo_512.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 512x512        <span class="token punctuation">-</span> <span class="token key atrule">src</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png          <span class="token key atrule">type</span><span class="token punctuation">:</span> image/png          <span class="token key atrule">sizes</span><span class="token punctuation">:</span> 180x180  <span class="token key atrule">serviceWorker</span><span class="token punctuation">:</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /sw.js    <span class="token key atrule">preload</span><span class="token punctuation">:</span>      <span class="token key atrule">urls</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> /      <span class="token key atrule">posts</span><span class="token punctuation">:</span> <span class="token number">12</span>    <span class="token key atrule">opts</span><span class="token punctuation">:</span>      <span class="token key atrule">networkTimeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>    <span class="token key atrule">routes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /hm.baidu.com/        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> networkOnly      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /www.google<span class="token punctuation">-</span>analytics.com/        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> networkOnly      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /.*\.(js<span class="token punctuation">|</span>css<span class="token punctuation">|</span>jpg<span class="token punctuation">|</span>jpeg<span class="token punctuation">|</span>png<span class="token punctuation">|</span>gif)$/        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> cacheFirst      <span class="token punctuation">-</span> <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token tag">!!js/regexp</span> /\//        <span class="token key atrule">strategy</span><span class="token punctuation">:</span> networkFirst  <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PWA 适配苹果图标</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">appletouchicon</span><span class="token punctuation">:</span> /apple<span class="token punctuation">-</span>touch<span class="token punctuation">-</span>icon.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改博客样式"><a href="#修改博客样式" class="headerlink" title="修改博客样式"></a>修改博客样式</h3><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="center">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="left"><code>Markdown</code> 文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="center">author</td><td align="left">跟 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="center">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="center">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="left"><code>false</code></td><td align="left">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="left">无</td><td align="left">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="center">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="center">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="center">keywords</td><td align="left">文章标题</td><td align="left">文章关键字，SEO 时需要</td></tr><tr><td align="center">reprintPolicy</td><td align="left">cc_by</td><td align="left">文章转载规则，可以是 <code>cc_by</code>,<code>cc_by_nd</code>,<code>cc_by_sa</code>,<code>cc_by_nc</code>,<code>cc_by_nc_nd</code>,<code>cc_by_nc_sa</code>,<code>cc0</code>,<code>noreprint</code> 或 <code>pay</code> 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于 Hexo GitHub 从零开始搭建个人博客<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于 Hexo GitHub 从零开始搭建个人博客<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> Sitoi<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Hexo  <span class="token punctuation">-</span> Blog  <span class="token punctuation">-</span> GitHub<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="本地运行预览"><a href="#本地运行预览" class="headerlink" title="本地运行预览"></a>本地运行预览</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动-hexo-博客"><a href="#启动-hexo-博客" class="headerlink" title="启动 hexo 博客"></a>启动 hexo 博客</h3><p>运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash">INFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token keyword">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h3><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> 看到下面的效果，说明的你博客已经构建成功了</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_index.png" alt="BLOG"></p><h2 id="部署到-GitHub-Pages"><a href="#部署到-GitHub-Pages" class="headerlink" title="部署到 GitHub Pages"></a>部署到 GitHub Pages</h2><p>登录 GitHub 打开你的项目，获取 GitHub ssh repo 地址，替换配置中的 <code>repo github</code> 的</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 自动部署配置</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span>      <span class="token key atrule">github</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>Sitoi/Sitoi.github.io.git   <span class="token comment" spellcheck="true"># 修改这里为你项目的地址</span>    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 如下命令进行部署：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo cleanhexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>部署成功 你就可以上你的网站查看效果啦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></li><li><p><a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</a></p></li><li><p><a href="https://yafine-blog.cn/posts/4ab2.html">https://yafine-blog.cn/posts/4ab2.html</a></p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo GitHub 从零开始搭建个人博客（二）：搭建基础篇</title>
      <link href="/posts/27801.html"/>
      <url>/posts/27801.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>阅读本篇前，请确保你的电脑配置好相应的环境，参考教程请看<a href="https://sitoi.cn/posts/6666.html">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></p></blockquote><p>在本篇教程你，你将获得一个初始的个人博客，使用 hexo 命令，创建一个属于你自己的初始化博客。并将其在本地运行起来，最后部署到 GitHub Pages 上，让你的博客在有网的地方就可以被访问。</p><h2 id="初始化-Hexo-项目"><a href="#初始化-Hexo-项目" class="headerlink" title="初始化 Hexo 项目"></a>初始化 Hexo 项目</h2><p>选择一个目录，鼠标右击，选择 <code>Git Bash here</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/create_hexo_blog.png" alt="Open Git Bash"></p><p>在 Git Bash 输入如下命令初始化一个 Hexo 项目</p><p><code>crawlmkt.github.io</code> 表示项目的名称，即文件夹的名字，建议使用 GitHub 项目对应的名称如：crawlmkt.github.io</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init crawlmkt.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/gen_hexo_blog.png" alt="HEXO INIT"></p><p>这样 crawlmkt.github.io 文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹，这些内容暂且先不用管是做什么的，我们先知道有什么，然后一步步走下去看看都发生了什么变化。</p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>切换到 博客 项目目录</p><p>运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span>  crawlmkt.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 npm 包</p><p>运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_npm_install_cmd.png" alt="npm i"></p><h2 id="启动-hexo-博客"><a href="#启动-hexo-博客" class="headerlink" title="启动 hexo 博客"></a>启动 hexo 博客</h2><p>运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash">INFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token keyword">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h2><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> 看到下面的效果，说明的你博客已经构建成功了</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/blog_init.png" alt="BLOG"></p><h2 id="本地博客发布到-GitHub-Pages"><a href="#本地博客发布到-GitHub-Pages" class="headerlink" title="本地博客发布到 GitHub Pages"></a>本地博客发布到 GitHub Pages</h2><p>之前的步骤中，我们已经完成了对 GitHub 账户的注册以及 Github Pages 的创建，并且为 GitHub 配置了 SSH key,接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>详细请参考：<a href="http://sitoi.cn/posts/6666.html">基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</a></p><h3 id="安装-hexo-deployer-git-插件"><a href="#安装-hexo-deployer-git-插件" class="headerlink" title="安装 hexo-deployer-git 插件"></a>安装 hexo-deployer-git 插件</h3><p>在博客项目目录下运行：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改-config-yml-文件"><a href="#修改-config-yml-文件" class="headerlink" title="修改 _config.yml 文件"></a>修改 _config.yml 文件</h3><blockquote><p>配置站点信息</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_config.png" alt="HEXO CONFIG"></p><blockquote><p>添加部署信息</p></blockquote><p>修改内容，在 _config.yml 文件最下面</p><p><strong>修改前：</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>修改后：</strong></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>crawlmkt/crawlmkt.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>git@github.com:crawlmkt/crawlmkt.github.io.git</code> 其中 crawlmkt 改成你的用户名即可</li></ul><h3 id="部署项目到-GitHub"><a href="#部署项目到-GitHub" class="headerlink" title="部署项目到 GitHub"></a>部署项目到 GitHub</h3><p>修改好配置后，运行如下命令，将代码部署到 GitHub</p><pre class="line-numbers language-bash"><code class="language-bash">hexo generatehexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看部署情况"><a href="#查看部署情况" class="headerlink" title="查看部署情况"></a>查看部署情况</h3><p>打开浏览器访问：<a href="https://crawlmkt.github.io">https://crawlmkt.github.io</a>，这时候我们就可以看到跟本地一模一样的博客内容了。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/hexo_deploy_success.png" alt="HEXO BLOG"></p><blockquote><p>你已经可以独自搭建一个属于自己的博客了，剩下的就是选择一个主题，当然你也可以自己开发一个主题。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Hexo GitHub 从零开始搭建个人博客（一）：环境准备篇</title>
      <link href="/posts/6666.html"/>
      <url>/posts/6666.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_index.png" alt="首页"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_tuijian.png" alt="首页推荐文章"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_list.png" alt="首页文章列表"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_about.png" alt="关于页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/matery_post.png" alt="文章详细页"></p><blockquote><p>Q: 为什么要搭建一个属于自己的个人博客呢？</p></blockquote><ul><li><p>高度自由化</p><p>  用自己喜欢的域名，选择自己喜欢的主题，布局，特效等都可以自己编写代码完成</p></li><li><p>成就感 </p><p>  当网站被搜索引擎收录，输入相应关键字即可，可以小小的炫耀一番</p></li><li><p>拓展交流圈</p><p>  如果你对某类感兴趣的话，你可以通过个人博客找到一些志同道合的朋友。   </p></li><li><p><del>学会坚持</del></p><p>  刚开始搭建好属于自己的博客，那真的是三分钟热度，但是真的坚持下来的人很少</p></li><li><p>最好的个人简历</p><p>  当我们苦于该如何写一份个人简历时，当你拿出一个你坚持 3 年、5 年的个人博客时，或许你的机会就比别人大一点。</p></li><li><p>自己的空间</p><p>  在这个地方，你可以写一些自己的东西（没有朋友看）</p></li><li><p>写作水平的提高</p><p>  坚持写作，你的写作水平会得到很到的提高，对你今后的人生会有很大的帮助   </p></li><li><p><del>赚取一点钱</del></p><p>  当你的博客足够好，你可以开始尝试赚钱，当然啦，和<code>坚持</code>是离不开的。</p></li></ul><blockquote><p><code>折腾</code>中学会<code>知识</code>，<code>互访</code>中找到<code>友情</code>，<code>写作</code>中读懂<code>人生</code>，<code>坚持</code>中找到<code>方向</code>。</p></blockquote><p>本教程主要教你如何安装 <code>Node.js</code>、<code>Hexo</code>、<code>Git</code>、配置 <code>GitHub SSH key</code>，以及创建第一个 <code>GitHub Pages</code> 页面。</p><p>很多同学听到自己动手搭建一个博客就望而却步了，不得有<code>服务器</code>？不得有<code>域名</code>？不得自己写一堆<code>代码</code>？可我也不太会写代码怎么办呢？</p><p>没有服务器，没关系，GitHub 提供了 GitHub Pages 可以帮助我们搭建一个静态的网站，解决了你们担心的服务器问题。<br>其次，GitHub Pages 会根据你们注册的用户名，提供一个 <username>.github.io 的二级域名给你（当然也可以绑定你自己的域名）。<br>至于代码问题，我已将源码发布到我的 GitHub 项目上了，你只需仔仔细细阅读完本系列，可以毫无压力的搭建一个属于你自己的个人博客了。</username></p><p>所以说，基本上，先注册一个 GitHub 帐号就能搞定了，下面我们先开始配置环境，并获得第一个自己的 GitHub Pages 页面吧。</p><p>看完这个系列的教程，你会得到一个还不错的个人博客，具体效果请浏览 <a href="https://sitoi.cn">https://sitoi.cn</a></p><h2 id="博客环境准备"><a href="#博客环境准备" class="headerlink" title="博客环境准备"></a>博客环境准备</h2><blockquote><p>本片主要面向 Windows 用户</p></blockquote><ul><li>操作系统：Windows 10</li><li>Node.js</li><li>Git</li><li>Hexo</li><li>idea（推荐使用 Webstorm）</li><li>一个 GitHub 帐号</li><li>一个云服务器（可选）</li><li>一个域名（可选）</li><li>一个 coding 帐号（可选）</li></ul><h2 id="安装-Chocolatey"><a href="#安装-Chocolatey" class="headerlink" title="安装 Chocolatey"></a>安装 Chocolatey</h2><blockquote><p>下文安装 <code>Node.js</code> 和 <code>Git</code> 都使用 <code>Chocolatey</code> 一句命令安装，请务必安装好 <code>Chocolatey</code> </p></blockquote><p>详细教程可以参考我之前写的一篇文章：<a href="https://sitoi.cn/posts/46278.html">Windows 程序包管理器 Chocolatey：一条命令装软件</a></p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>以<code>管理员</code>权限打开 <code>PowerShell</code>（<a href="https://sitoi.cn/posts/46278.html">Windows 程序包管理器 Chocolatey：一条命令装软件</a> 教程里有写如何以管理员权限打开 PoweShell）</p><h3 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h3><p>输入以下命令，其他的一律 输入 <code>y</code> 回车即可（下载太慢可以试下 <code>科</code> <code>学</code> <code>上</code> <code>网</code>）</p><pre class="line-numbers language-bash"><code class="language-bash">choco <span class="token function">install</span> nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/install_nodejs.png" alt="Install Node.js"></p><h3 id="检测-nodejs-是否安装成功"><a href="#检测-nodejs-是否安装成功" class="headerlink" title="检测 nodejs 是否安装成功"></a>检测 nodejs 是否安装成功</h3><blockquote><p>打开一个新的管理员权限的 PowerShell 窗口</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/check_nodejs.png" alt="Check Node.js"></p><h3 id="修改-npm-源"><a href="#修改-npm-源" class="headerlink" title="修改 npm 源"></a>修改 npm 源</h3><p>由于官方 NPM 源下载 包的速度太慢，所以我们将 NPM 的源 替换成 <code>淘宝源</code>，运行如下命令即可：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>以<code>管理员</code>权限打开 <code>PowerShell</code></p><p>输入以下命令，推荐安装 4.1.1 版本：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo@4.1.1 -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/install_hexo.png" alt="Install Hexo"></p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><h3 id="安装-Git-1"><a href="#安装-Git-1" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>以<code>管理员</code>权限打开 <code>PowerShell</code></p><p>输入以下命令，其他的一律 输入 <code>y</code> 回车即可（下载太慢可以试下 <code>科</code> <code>学</code> <code>上</code> <code>网</code>）</p><pre class="line-numbers language-bash"><code class="language-bash">choco <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/install_git.png" alt="Install Git"></p><h3 id="检测-Git-是否安装成功"><a href="#检测-Git-是否安装成功" class="headerlink" title="检测 Git 是否安装成功"></a>检测 Git 是否安装成功</h3><blockquote><p>打开一个新的管理员权限的 PowerShell 窗口</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/check_git.png" alt="Check Git"></p><h2 id="注册-GitHub-帐号"><a href="#注册-GitHub-帐号" class="headerlink" title="注册 GitHub 帐号"></a>注册 GitHub 帐号</h2><p>注册地址：<a href="https://github.com/join?source=header">https://github.com/join?source=header</a></p><p>实在不会网上教程一堆，以后看心情补吧。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>找不到创建入口的，访问：<a href="https://github.com/new">https://github.com/new</a></p><p>创建一个仓库，用于托管博客代码，</p><ul><li>仓库的格式必须为：<code>&lt;用户名&gt;.github.io</code></li><li><code>Description</code>：为描述仓库（选填）</li><li>勾选 <code>Initialize this repository with a README</code> 初始化一个 README.md 文件</li><li>点击<code>Creat repository</code> 进行创建</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/create_repo.png" alt="Create Repo"></p><h2 id="访问你的个人网站"><a href="#访问你的个人网站" class="headerlink" title="访问你的个人网站"></a>访问你的个人网站</h2><p>打开浏览器，输入网站：<code>&lt;用户名&gt;.github.io</code> ,例如：<code>crawlmkt.github.io</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/github_pages.png" alt="GitHub Pages"></p><h2 id="为-GitHub-配置-SSH-Key"><a href="#为-GitHub-配置-SSH-Key" class="headerlink" title="为 GitHub 配置 SSH Key"></a>为 GitHub 配置 SSH Key</h2><p>详细教程可以参考我之前写的一篇文章：<a href="https://sitoi.cn/posts/43508.html">Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</a></p><h1 id="恭喜，到这里你的-Windows-环境已经搭建好啦"><a href="#恭喜，到这里你的-Windows-环境已经搭建好啦" class="headerlink" title="恭喜，到这里你的 Windows 环境已经搭建好啦~~"></a>恭喜，到这里你的 Windows 环境已经搭建好啦~~</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 下利用 Git 生成 SSH KEY 并配置到 GitHub</title>
      <link href="/posts/43508.html"/>
      <url>/posts/43508.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><ul><li>Windows 操作系统</li><li>本地安装了 Git</li><li>一个 GitHub 帐号</li></ul><h2 id="生成-SSH-KEY"><a href="#生成-SSH-KEY" class="headerlink" title="生成 SSH KEY"></a>生成 SSH KEY</h2><h3 id="打开-Git-Bash"><a href="#打开-Git-Bash" class="headerlink" title="打开 Git Bash"></a>打开 Git Bash</h3><p>在 Windows 桌面上，鼠标右击，选择 Git Bash here，打开 Git Bash</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/git_bash.png" alt="Open Git Bash"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/git_bash2.png" alt="Git Bash"></p><h3 id="输入命令"><a href="#输入命令" class="headerlink" title="输入命令"></a>输入命令</h3><p><code>email@email.com</code> 填入一个你自己的邮箱，可以是注册 GitHub 的邮箱</p><p>输入以下命令，一直按回车：</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"email@email.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/gen_ssh.png" alt="Gen SSH KEY"></p><h2 id="查看-SSH-KEY"><a href="#查看-SSH-KEY" class="headerlink" title="查看 SSH KEY"></a>查看 SSH KEY</h2><p>输入以下命令查看 SSH KEY：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/ssh_key.png" alt="SSH KEY"></p><h2 id="将-SSH-KEY-添加到-GitHub"><a href="#将-SSH-KEY-添加到-GitHub" class="headerlink" title="将 SSH KEY 添加到 GitHub"></a>将 SSH KEY 添加到 GitHub</h2><ol><li>点击头像，选择 Settings</li><li>选择 SHH and GPG keys</li><li>点击 New SSH key</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/add_ssh_key.png" alt="ADD SSH KEY"></p><ol start="4"><li>填入 SSH KEY </li><li>点击 Add SSH key</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/add_ssh_key2.png" alt="ADD SSH KEY"></p><h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><p>打开 Git Bash，输入以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/test_ssh.png" alt="TEST SSH KEY"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> SHH KEY </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床</title>
      <link href="/posts/39161.html"/>
      <url>/posts/39161.html</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床"><a href="#GitHub-jsDelivr-PicGo-Imagine-打造稳定快速、高效免费图床" class="headerlink" title="GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床"></a>GitHub + jsDelivr + PicGo + Imagine 打造稳定快速、高效免费图床</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>为什么要使用图床呢？</p></blockquote><p>因为在不同平台发布同一篇文章的时候，最一个痛苦的点就是，图片存储问题，各个平台的文件存储方式各不相同，无法直接 <code>Ctrl + C</code> 的方式一键搞定，为了解决这个问题，使用 <code>MarkDown + 图床</code> 的方式进行文章的写作，将图片放到一个统一的地方，在文章中引入图片外链。<br>所谓图床，就是将图片储存到第三方静态资源库中，其返回给你一个 URL 进行获取图片。<code>MarkDown</code> 支持使用 URL 的方式显示图片，我想这也是程序员为什么对其偏爱的原因之一。<br>作为程序员，你会发现，现在很多论坛和社区都开始支持使用 <code>MarkDown</code>，如果你没使用图床的情况下，你分享同一篇文章，你要在不同的平台，各自重新编辑排版一遍和上传图片一次。<br>有了图床，情况就不一样了，<code>Ctrl+C</code> 的方式就搞定了，根本不用再 Check 文章内容一遍。</p><blockquote><p>图床的选择？</p></blockquote><ol><li><code>微博图床</code>：以前用的人比较多，从 2019 年 4 月开始开启了防盗链，凉凉</li><li><code>SM.MS</code>：运营四年多了，也变得越来越慢了，到了晚上直接打不开图片，速度堪忧</li><li><code>其他小众图床</code>：随时有挂掉的风险</li><li><code>Imgur 等国外图床</code>：国内访问速度太慢，随时有被墙的风险</li><li><code>大厂储存服务</code>：例如七牛云、又拍云、腾讯云COS、阿里云OSS等，操作繁琐，又是实名认证又是域名备案的，麻烦，而且还要花钱（有钱又不怕麻烦的当我没说）</li><li><code>GitHub 图床</code>：免费，但是国内访问速度慢（不过没关系，利用 <code>jsDelivr</code> 提供的免费的 CDN 加速 速度足够了）</li></ol><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li>新建 GitHub 仓库</li><li>生成一个 Token</li><li>配置 PicGo 并使用 jsdelivr 作为 CDN 加速</li><li>使用 Imagine 进行图片压缩</li><li>上传图片到 PicGo 并使用图床</li></ol><h2 id="新建-GitHub-仓库"><a href="#新建-GitHub-仓库" class="headerlink" title="新建 GitHub 仓库"></a>新建 GitHub 仓库</h2><ul><li>登录/注册 GitHub</li><li>新建一个仓库，填写好仓库名</li><li>仓库描述</li><li>将权限设置成 <code>public</code></li><li>根据需求选择是否为仓库初始化一个 <code>README.md</code> 描述文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang001.png" alt="新建 GitHub 仓库"></p><h2 id="生成一个-Token"><a href="#生成一个-Token" class="headerlink" title="生成一个 Token"></a>生成一个 Token</h2><ol><li>点击用户头像 -&gt; 选择 <code>Settings</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang002.png" alt="Settings"></p><ol start="2"><li>点击 <code>Developer settings</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang003.png" alt="Developer settings"></p><ol start="3"><li>点击 <code>Personal access tokens</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang004.png" alt="Personal access tokens"></p><ol start="4"><li>点击 <code>Generate new token</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang005.png" alt="Generate new token"></p><ol start="5"><li>填写 <code>Token</code> 描述，勾选 <code>repo</code>，然后点击 <code>Generate token</code> 生成一个 <code>Token</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang006.png" alt="填写 Token 描述"></p><ol start="6"><li>获取 <code>Token</code> 密钥</li></ol><blockquote><p>注意这个 Token 只会显示一次，自己先保存下来，或者等后面配置好 PicGo 后再关闭此网页</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang007.png" alt="获取 Token 密钥"></p><h2 id="配置-PicGo-并使用-jsdelivr-作为-CDN-加速"><a href="#配置-PicGo-并使用-jsdelivr-作为-CDN-加速" class="headerlink" title="配置 PicGo 并使用 jsdelivr 作为 CDN 加速"></a>配置 PicGo 并使用 jsdelivr 作为 CDN 加速</h2><p>前往下载 <a href="https://github.com/Molunerfinn/picgo/releases">PicGo</a>（<a href="https://github.com/Molunerfinn/picgo/releases">点击下载</a>），安装好后开始配置图床</p><ul><li><p>设定仓库名：按照 <code>用户名/图床仓库名</code> 的格式填写</p></li><li><p>设定分支名：<code>master</code></p></li><li><p>设定 Token：粘贴之前生成的 <code>Token</code></p></li><li><p>指定存储路径：填写想要储存的路径，如 <code>img/</code>，这样就会在仓库下创建一个名为 <code>img</code> 的文件夹，图片将会储存在此文件夹中</p></li><li><p>设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照<code>自定义域名+上传的图片名</code>的方式生成访问链接，放到粘贴板上，因为我们要使用 <code>jsDelivr</code> 加速访问，所以可以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang008.png" alt="配置 PicGo"></p><pre class="line-numbers language-text"><code class="language-text">Q：什么是 jsdelivr ?A：jsDelivr 为开发者提供免费公共 CDN 加速服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="使用-Imagine-进行图片压缩"><a href="#使用-Imagine-进行图片压缩" class="headerlink" title="使用 Imagine 进行图片压缩"></a>使用 Imagine 进行图片压缩</h2><p>通常情况下，图片大小都是超过 200KB 的，所以网页加载的时候会特别慢，一般我们会对图片进行压缩，这里我推荐 <a href="https://github.com/meowtec/Imagine/releases">Imagine</a>（<a href="https://github.com/meowtec/Imagine/releases">点击下载</a>） 支持全平台。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang009.png" alt="使用 Imagine 进行图片压缩"></p><blockquote><p>Imagine 采用的是有损压缩，介意的可以忽略这一步</p></blockquote><p>顺便推荐一个无损压缩的网站：<a href="https://tinypng.com/">https://tinypng.com/</a></p><h2 id="上传图片到-PicGo-并使用图床"><a href="#上传图片到-PicGo-并使用图床" class="headerlink" title="上传图片到 PicGo 并使用图床"></a>上传图片到 PicGo 并使用图床</h2><p>配置好 <code>PicGo</code> 后，我们就可以进行高效创作了，将<code>压缩后的图片</code>拖拽到<code>上传区</code>，将会自动上传并复制<code>访问链接</code>，将链接粘贴到博文中就行了，访问速度杠杠的</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/tuchuang010.png" alt="上传图片到 PicGo 并使用图床"></p><p>此外 <code>PicGo</code> 还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，<code>PicGo</code> 还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> jsDelivr </tag>
            
            <tag> PicGo </tag>
            
            <tag> Imagine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 程序包管理器 Chocolatey：一条命令装软件</title>
      <link href="/posts/46278.html"/>
      <url>/posts/46278.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-程序包管理器-Chocolatey：一条命令装软件"><a href="#Windows-程序包管理器-Chocolatey：一条命令装软件" class="headerlink" title="Windows 程序包管理器 Chocolatey：一条命令装软件"></a>Windows 程序包管理器 Chocolatey：一条命令装软件</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Chocolatey 是一种<strong>软件管理</strong>解决方案，与您在 Windows 上经历过的任何其他事情都不一样。它着重于简单性，安全性和可伸缩性。您可以在 PowerShell 中为任何软件（不仅仅是安装程序）编写一次软件部署，然后可以使用任何可以管理系统（配置管理，端点管理等）并跟踪和管理该软件更新的解决方案，将其部署到 Windows 所在的任何位置。随着时间的推移。使用 Chocolatey 在本地，“云”中或 Docker 容器中管理软件。</p><blockquote><p>简而言之呢：就是类似 Liunx 下的 apt、yum、dnf 等程序包管理器。</p></blockquote><p>另外需要说明的是，Chocolatey 只是把官方下载路径封装到了 Chocolatey 中，所以下载源都是其官方路径，所以下载的一定是合法的，但是如果原软件是需要 Licence 注册的话，那么 Chocolatey 下载安装好的软件还是需要你去购买注册。不过 Chocolatey 一般还是会选用免费 Licence 可用的软件。</p><h2 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h2><ul><li>Windows 7+ / Windows Server 2003+</li><li>PowerShell v2+</li><li>.NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed)</li></ul><h2 id="安装-Chocolatey"><a href="#安装-Chocolatey" class="headerlink" title="安装 Chocolatey"></a>安装 Chocolatey</h2><h3 id="以管理员的方式打开-PowerShell"><a href="#以管理员的方式打开-PowerShell" class="headerlink" title="以管理员的方式打开 PowerShell"></a>以管理员的方式打开 PowerShell</h3><ul><li><code>右击</code> 左下角 <code>Windows 图标</code>，选择 <code>Windows PowerShell(管理员)(A)</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-1.png" alt="Windows PowerShell(管理员)"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-2.png" alt="PowerShell(管理员) 界面"></p><h3 id="输入安装命令安装-Chocolatey"><a href="#输入安装命令安装-Chocolatey" class="headerlink" title="输入安装命令安装 Chocolatey"></a>输入安装命令安装 Chocolatey</h3><ul><li>在 PowerShell 终端输入以下安装代码，后输入回车即可：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-3.png" alt="PowerShell(管理员) 界面"></p><ul><li>等待安装完成（如果长时间没有反映，请尝试开启 <strong>科 学 上 网</strong>）</li></ul><h3 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h3><ul><li>在 PowerShell 终端输入 <code>choco</code> 或 <code>choco -?</code> 检测是否安装成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-4.png" alt="Choco 安装成功"></p><p>安装成功了就开始使用吧！</p><h2 id="Choco-安装软件"><a href="#Choco-安装软件" class="headerlink" title="Choco 安装软件"></a>Choco 安装软件</h2><blockquote><p>以安装 nodejs 为例</p></blockquote><h3 id="查找软件包"><a href="#查找软件包" class="headerlink" title="查找软件包"></a>查找软件包</h3><p>一、利用 choco 命令查找软件包</p><p>在终端输入 choco 搜索命令：</p><pre class="line-numbers language-shell"><code class="language-shell">choco search nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-5.png" alt="Choco 命令搜索结果"></p><p>二、利用网页端查找软件包</p><ul><li><p>登录 choco 软件包网站：<a href="https://chocolatey.org/packages">https://chocolatey.org/packages</a></p></li><li><p>在搜索框搜索要安装的软件</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-6.png" alt="Choco 网页搜索结果"></p><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><p>在 PowerShell 终端输入安装命令</p><pre class="line-numbers language-shell"><code class="language-shell">choco install nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装命令会先下载软件包，然后再执行安装脚本，下载完成后，会询问你<code>是否希望运行安装脚本？</code>，输入 <code>Y</code> 即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-7.png" alt="Choco 安装 nodejs"></p><p>检测 nodejs 是否安装成功，在终端输入 <code>node -v</code></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/choco-8.png" alt="nodejs 安装成功"></p><p>当你想要安装 python，只需要：</p><pre class="line-numbers language-shell"><code class="language-shell">choco install python<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>想安装 git，只需要：</p><pre class="line-numbers language-shell"><code class="language-shell">choco install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>想安装 java，只需要：</p><pre class="line-numbers language-shell"><code class="language-shell">choco install java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Choco-常用命令使用"><a href="#Choco-常用命令使用" class="headerlink" title="Choco 常用命令使用"></a>Choco 常用命令使用</h2><p>Chocolatey 的使用也很简单，使用指令如下：</p><pre class="line-numbers language-shell"><code class="language-shell">choco search <keyword>  # 搜索软件choco list <keyword>    # 跟 search 命令功能类似choco install <package1 package2 ...>   # 安装软件choco install <package>  -version ***   # 安装指定版本choco  uninstall name   # 卸载软件choco version <package> # 查看安装包的版本情况choco  upgrade <package>    # 更新某个软件 choco list -localonly   # 查看一下所有安装在本地的包的列表choco list -lo  # 功能同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包的类型"><a href="#包的类型" class="headerlink" title="包的类型"></a>包的类型</h3><p>Chocolatey 的包有不同的类型，有些包的名字里面会包含特殊的后缀，比如 .install ，.commandline，.portable ，有些包的名字不带这些后缀。</p><ul><li><p>无后缀（例：nodejs，git）</p></li><li><p>.install    （例：nodejs.install，git.install）</p><p>  .install 后缀的包，这个包会出现在系统控制面板里的 卸载或更改程序 里面，你可以把 .install 的包想成是通过安装程序（msi）安装的包。</p></li><li><p>.commandline（例：nodejs.commandline，未来会被抛弃）</p><p>  .commandline（未来会被抛弃） 与 .portable 后缀的包是压缩包（zip），安装这种后缀的包，你不能在 卸载或更改程序 里找到它们。</p></li><li><p>.portable   （例：putty.portable）</p></li></ul><p>你也可以选择不带后缀的包，这样如果系统中已经安装了这个包，就会跳过去，如果没安装，Chocolatey 就会为你安装一个，默认安装的这个包的类型应该就是 .install 后缀的包。</p><blockquote><p>软件包的推荐顺序： 无后缀 &gt; .install &gt; .portable &gt; .commandline</p></blockquote><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><a href="https://chocolatey.org/">Chocolatey 官网</a></li><li><a href="https://chocolatey.org/install">Chocolatey 官方安装教程</a></li><li><a href="https://chocolatey.org/packages">Chocolatey 官方包搜索</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
            <tag> chocolatey </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内加速访问 GitHub</title>
      <link href="/posts/23395.html"/>
      <url>/posts/23395.html</url>
      
        <content type="html"><![CDATA[<h1 id="国内加速访问-GitHub"><a href="#国内加速访问-GitHub" class="headerlink" title="国内加速访问 GitHub"></a>国内加速访问 GitHub</h1><p>中国访问 GitHub 的速度不忍直视，那就叫一个慢！</p><pre class="line-numbers language-text"><code class="language-text">Q: 为什么访问速度会很慢？A: GitHub 在国内访问速度慢的问题原因有很多，但最直接和最主要的原因是 GitHub 的分发加速网络的域名遭到 dns 污染。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">Q: 如何解决 DNS 污染？A: 通过修改 hosts 解决污染问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>不需要科（）学（）上网，也不需要开代理加速器。</p></blockquote><h3 id="一、查询网址对应的-IP-地址"><a href="#一、查询网址对应的-IP-地址" class="headerlink" title="一、查询网址对应的 IP 地址"></a>一、查询网址对应的 IP 地址</h3><p>查询地址：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></p><p>点击下面 <code>域名</code>（domain）自动跳转到 <code>ipaddress.com</code> 查询结果页面：</p><ol><li><p><a href="https://github.com.ipaddress.com/">github.com</a></p></li><li><p><a href="https://github.com.ipaddress.com/assets-cdn.github.com">assets-cdn.github.com</a></p></li><li><p><a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns0.png" alt="github.com 对应 IP 结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns1.png" alt="assets-cdn.github.com 对应 IP 结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns2.png" alt="github.global.ssl.fastly.net 对应 IP 结果"></p><h3 id="二、修改本地系统-hosts-文件"><a href="#二、修改本地系统-hosts-文件" class="headerlink" title="二、修改本地系统 hosts 文件"></a>二、修改本地系统 hosts 文件</h3><blockquote><p>hosts 文件路径：<code>C:\Windows\System32\drivers\etc\hosts</code></p></blockquote><ol><li>以<strong>管理员</strong>身份打开 <code>CMD</code> 终端，并输入 <code>notepad</code> ，会打开一个记事本。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns3.png" alt="记事本"></p><ol start="2"><li>打开文件，输入 <code>hosts</code> 文件路径，选择所有文件，最后点击 <code>hosts</code> 自动打开该文件。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns4.png" alt="打开 hosts 文件"></p><ol start="3"><li>修改 <code>hosts</code> 文件，将查询到的 IP 和 域名写在 <code>hosts</code> 文件的最后即可</li></ol><pre class="line-numbers language-text"><code class="language-text">192.30.253.112    github.com185.199.108.153   assets-cdn.github.com185.199.109.153   assets-cdn.github.com185.199.110.153   assets-cdn.github.com185.199.111.153   assets-cdn.github.com199.232.5.194     github.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns5.png" alt="修改 hosts 文件"></p><h3 id="三、刷新本地系统-dns-缓存"><a href="#三、刷新本地系统-dns-缓存" class="headerlink" title="三、刷新本地系统 dns 缓存"></a>三、刷新本地系统 dns 缓存</h3><p>用 <code>WIN + R</code> 快捷键打开运行窗口，输入命令：<code>cmd</code> 并回车进入命令行窗口。</p><p>接着输入命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd">ipconfig /flushdns <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>回车后执行刷新本地 dns 缓存数据即可。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/GitHub-dns6.png" alt="刷新系统 dns 缓存"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你如何利用 HeroKu 免费获取一个 Scrapyd 集群!</title>
      <link href="/posts/48724.html"/>
      <url>/posts/48724.html</url>
      
        <content type="html"><![CDATA[<h1 id="手把手教你如何利用-HeroKu-免费获取一个-Scrapyd-集群"><a href="#手把手教你如何利用-HeroKu-免费获取一个-Scrapyd-集群" class="headerlink" title="手把手教你如何利用 HeroKu 免费获取一个 Scrapyd 集群"></a>手把手教你如何利用 HeroKu 免费获取一个 Scrapyd 集群</h1><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ul><li>一个 GitHub 的账号</li><li>一个 HeroKu 帐号</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ul><li><p>利用 GitHub 帐号创建一个代码仓库</p></li><li><p>登录 HeroKu 创建 App 并进行配置</p></li></ul><h3 id="创建一个代码仓库"><a href="#创建一个代码仓库" class="headerlink" title="创建一个代码仓库"></a>创建一个代码仓库</h3><blockquote><p>PS：想偷懒，直接 fork 我的项目就好了</p></blockquote><p>项目地址：<a href="https://github.com/Sitoi/scrapyd-heroku">https://github.com/Sitoi/scrapyd-heroku</a></p><p>Fork 完 你已经完成本项目的一半工作了，开心吗，激动吗，只剩下半步了。</p><p><del>不 Fork 的自己想办法吧，现成的不要，你非要自己造。</del></p><h3 id="登录-HeroKu-创建-App-并进行配置"><a href="#登录-HeroKu-创建-App-并进行配置" class="headerlink" title="登录 HeroKu 创建 App 并进行配置"></a>登录 HeroKu 创建 App 并进行配置</h3><ol><li>登录 <a href="https://signup.heroku.com/">https://signup.heroku.com/</a> 创建一个帐号</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/home.png" alt="首页"></p><ol start="2"><li>刚创建完进入的<strong>首页</strong>是长这个样子的，点击页面中间的 <code>Create new app</code> 创建我们的第一个项目，点击之后，你会进入到如下界面：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/create_new_app.png" alt="Create new app"></p><ol start="3"><li>在界面上输入你要的取得<strong>项目名称</strong>，项目名称决定了之后的 <code>URL</code> 地址。选择区域，默认就好了，最后点击创建 <code>Create app</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/app.png" alt="APP 界面"></p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/Connect_to_GitHub.png" alt="Connect to GitHub"></p><ol start="4"><li>此时你也已经进入到 APP 页面了，点击 <code>GitHub</code> 按钮，再点击 <code>Connect to GitHub</code> 让我们和 <code>GitHub</code> 相关联。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/search.png" alt="关联成功后搜索项目"></p><ol start="5"><li>这样就表示关联成功了，我们接下来进行项目的搜索，找到之前 Fork 的项目。点击项目右侧的 <code>Connect</code> 按钮，将 HeroKu 和我们的 GitHub 项目进行关联。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/deploy.png" alt="创建自动部署和执行本次部署"></p><ol start="6"><li>关联成功后，选择要<code>自动部署</code>的<code>分支</code>，选择<code>本次部署</code>的<code>分支</code>，点击<code>部署</code>即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/deploying.png" alt="正在进行部署"></p><ol start="7"><li>页面显示该内容，表示你<code>已经自动部署</code>已经<code>开起</code>了，<code>当前部署</code>也<code>正在执行</code>，剩下的只需<code>静静等待</code>就好</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/deployed.png" alt="部署完成"></p><ol start="8"><li>看到页面上恭喜你，已经完成了本教程，喜提一个 <code>Scrapyd</code>，点击 <code>View</code> 跳转到 <code>Scrapyd Web</code> 界面</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/scrapyd_web.png" alt="Scrapyd Web"></p><blockquote><p>每个 HeroKu 可以创建 5 个 APP，接下来，只需要重复上面的创建流程就好啦。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapyd </tag>
            
            <tag> HeroKu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请不要污名化爬虫！</title>
      <link href="/posts/153.html"/>
      <url>/posts/153.html</url>
      
        <content type="html"><![CDATA[<h1 id="请不要污名化爬虫！"><a href="#请不要污名化爬虫！" class="headerlink" title="请不要污名化爬虫！"></a>请不要污名化爬虫！</h1><p>本文转自 NightTeam 原创：Loco NightTeam 文章作者：「夜幕团队 NightTeam」 - Loco</p><h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a><center>导语</center></h2><p>最近有一篇名为《只因写了一段爬虫，公司200多人被抓！》的文章非常火，相信大家应该都看到了。</p><p>这篇文章火起来之后，本来经过了一个多月的时间已经冷静下来了的爬虫圈子又开始人心惶惶了，各种说法层出不穷，大家都害怕自己一不小心就违法、进监狱过年，但是，事情真的是那样吗？</p><h2 id="辟谣"><a href="#辟谣" class="headerlink" title="辟谣"></a><center>辟谣</center></h2><p>我们先来看几个明显有误，且传播很广的说法吧。</p><blockquote><p>“最近很多做爬虫的被抓了”</p></blockquote><p>那篇文章的故事中提到的，是一家名为「巧达数据」的公司，如果之前有关注过相关新闻的朋友应该不难发现，这个公司实际上在3月份的时候就已经被查封了！</p><p>而文章后面提到的天翼征信、新颜科技、魔蝎科技、公信宝、同盾科技相关事件，实际上也都是9月初的事情了，到目前为止已经一个多月了，并不是最近才发生的。</p><blockquote><p>“最近一直有做爬虫的公司被抓”</p></blockquote><p>很多人跟我说他看到一直有公司因为做爬虫被抓，但其实都是错觉，说白了，这只是因为你关注的信息来源（微信公众号）或者是你朋友圈内的人关注的信息来源都很集中、搞来搞去都是同一个圈子里的人导致的。</p><p>同一个圈子里的公众号关注得多了之后，会出现一个很神奇的现象：</p><p><font color="#FF5F2E">你会发现你时不时地就看到某一篇文章在换了个标题之后，又出现在了你的消息列表/朋友圈/看一看中，而这篇文章很可能你已经看到过很多遍了。</font></p><p>这种现象你见得多了之后，很可能就会不再点开文章查看，也自然就不会知道它里面到底写了什么，你只是感觉好像一直有新的被抓的公司，但是实际上那些文章都只是换了个名字的旧文章。</p><blockquote><p>“只要不遵守robots协议就会被抓”、“伪造UA（User-Agent）就会被抓”、“只要绕过、破解反爬虫措施就会被抓”</p></blockquote><p>这几个说法的起源，是「某离职的头条员工做了一个头条的竞品，还爬了头条的数据，结果被告了」的那个案件的相关新闻。</p><p>但将这几个说法再次搬出来并且还传播开了的，是源于某个法律领域的公众号在魔蝎科技等公司被抓后，写的一篇对相关案件和法律的解读（当时是爆文，朋友圈都在刷屏）。</p><p>我们先来说说传播最广的这个法律领域的公众号所说的吧。律师毕竟不是做技术的，对很多技术方面的东西了解的并不多，所以有些内容在做技术的人看来其实是挺搞笑的。</p><p>但由于那位律师的文章当时太火了，很多人直接复制粘贴了他对相关法律的解读，所以这几种说法就被迅速流传了开来。</p><p>那么这几个说法的问题在哪里呢？</p><h4 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h4><p>robots协议实际上是君子协议，并不是法律明文规定的限制，最早只是针对<font color="#FF5F2E">搜索引擎爬虫</font>而定的东西，<br>但现在做<font color="#FF5F2E">搜索引擎爬虫</font>的并不多，通常我们说的爬虫都是<font color="#FF5F2E">垂直爬虫</font>（意思是针对某一个或多个网站/APP采集数据的爬虫）。</p><p>而这个“不遵守robots协议就会被抓”的说法最搞笑的地方就在于，现在几乎所有的网站robots.txt文件里都会像这样写：</p><pre class="line-numbers language-text"><code class="language-text">User-agent: BaiduspiderDisallow: /balabalaUser-agent: 各种搜索引擎爬虫的UADisallow: /balabalaUser-Agent: *Disallow: /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里的最后一个 <code>User-Agent</code>，这个星号的意思是<font color="#FF5F2E">其他所有的爬虫</font>，而 <code>Disallow</code> 后面跟着的斜杠，意思是<font color="#FF5F2E">禁止访问所有页面</font>。</p><p>好了，如果遵守这个协议的话，除了搜索引擎的爬虫以外，谁都别玩了，要知道现在国内的大环境就是大家都不愿意把数据给开放出来，生怕别人拿了之后直接做一个竞品出来跟自己抢生意，所以根本没有国外网站上很常见的<font color="#FF5F2E">开放平台</font>。</p><pre class="line-numbers language-text"><code class="language-text">注：开放平台就是一个官方的、提供数据的地方。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以如果真的都遵守这个协议的话，各种大数据分析都要凉凉，连数据都拿不到，分析啥呢？</p><pre class="line-numbers language-text"><code class="language-text">注：别扯自家生产数据，没人只分析自家、不分析别人的。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="伪造UA（User-Agent）"><a href="#伪造UA（User-Agent）" class="headerlink" title="伪造UA（User-Agent）"></a>伪造UA（User-Agent）</h4><p>这个比说robots协议还搞笑，因为…现在根本没人直接根据UA来判断是否是同一个用户，改不改UA对人家反爬虫机制的判断一点影响都没有。</p><p>那位律师的这个说法，<font color="#FF5F2E">多半因为看了一些比较水的爬虫文章里说“修改UA可以绕过反爬”而理解出来的</font>。</p><p>然后肯定有人要说了：“不管怎么样你都把UA改了啊”（有人跟我这么说过类似的话），你知道UA是干啥的么？</p><p>UA就只是一个特征字符串而已，它和robots一样，同样算是一个君子协议（不懂的朋友请阅读RFC中HTTP协议的部分），说白了这玩意就跟软件的名字一样，叫啥都行！</p><p>你看哪个明星很有名，你把自己的名字改得跟他一样，也没人会说你，因为这本来就没有任何问题！</p><h4 id="绕过、破解反爬虫措施"><a href="#绕过、破解反爬虫措施" class="headerlink" title="绕过、破解反爬虫措施"></a>绕过、破解反爬虫措施</h4><p>说个最常见、最初级的解决反爬虫措施的办法：自动化测试工具控制浏览器进行请求。</p><p>请问浏览器请求时，如果没有触发反爬虫措施，算绕过、破解了吗？</p><p>如果你觉得机器操作的算，那请问我找一群人手动打开浏览器进行同样的操作算吗？</p><p>然后肯定还会有人说：“这根本不算破解反爬虫措施，破解是把验证码自动输入了才算”（同样有人这么跟我说过）。</p><p>那么请问，人工输入验证码算破解吗？找一群人人工输入验证码呢？</p><p>然后我们再来回顾一下那个头条的案件吧，那个案件一开始是各种新闻、文章都说是” 使用伪造device_id绕过服务器的身份校验，使用伪造UA及IP绕过服务器的访问频率限制 ”。</p><p>但从后来被爆出来的消息来看，说白了只是因为那人从头条离职了之后，不仅做了个竞品还爬老东家的数据直接放到自己那用而已，他的“tt_spider”所用到的那些操作并不是导致他被告的关键因素。</p><h2 id="怎么避免违法"><a href="#怎么避免违法" class="headerlink" title="怎么避免违法"></a><center>怎么避免违法</center></h2><p>以下内容写于2019年10月17日，是根据本人对目前见到的知名案例的理解而写的，仅供参考，如有疑问建议联系律师协助你对具体情况进行分析。</p><blockquote><p>个人隐私信息不要碰</p></blockquote><p>很明显，今年的净网行动中，被一窝端的那些公司大部分都是做征信、风控、简历检索相关的，它们有个共同的特点，就是都采集了个人隐私信息并对外售卖。</p><p>做征信和风控的基本都是对社保、公积金、账单等信息进行了采集，它们的做法也都很类似：让用户在自己的APP中登录各种账号，从而获取到登录Cookie，接着就能使用Cookie随心所欲地监控用户的情况。</p><p>做简历检索的则是在各种招聘平台上注册了大量虚假企业账号，并通过招聘平台提供的功能获取了大量简历，有些做这方面的甚至还会有用虚假招聘的方式骗简历的操作，极其恶劣。</p><p>再次提醒，个人隐私信息千万不要碰！大部分公司根本没有那个权力去碰这些数据，一碰既死！</p><blockquote><p>别人的东西不要拿了之后放到自己家里</p></blockquote><p>在早些时候， 百度与大众点评不正当竞争纠纷案（上海市第一中级人民法院（2016）沪73民终242号）也挺火的，从案件内容中可以看到，百度采集了大众点评等APP上的店铺和评论信息，并直接在百度地图上进行展示。</p><p>这个案件大家应该都能理解得了吧？很简单的一个事情，我没有允许你拿走这个东西，但你直接拿走了，还放在了自己家里炫耀，这当然不行！</p><p>同理，所有不通过官方渠道（开放平台等）爬了其他网站的数据之后直接放到自己网站上的，都有风险，包括但不限于：</p><ul><li>爬了视频、音乐网站后把视频、音乐直接搬到自己网站上，为用户提供播放服务的。</li><li>爬了小说网站后把小说文本直接搬到自己网站上，为用户提供盗版阅读服务的。</li><li>爬了论坛网站后把所有贴子直接搬到自己网站上，改个名字假装自己是另一个论坛的。</li></ul><p>不过，这方面除了盗版问题以外，大部分情况其实没人管，只要你不过分、不出名，搞个小破站出来其实人家也懒得搞你，容易出问题的是有些专门做此类事情的公司。</p><p>再次提醒，如果你正在某个公司做这种事情，建议尽早弃坑！</p><blockquote><p>请求速度不要太过分</p></blockquote><p>很多小白写爬虫的时候，并发毫无限制（可参考携程反爬虫部门某位老哥写的文章），这种做法实际上是会对对方服务器造成一定影响的，在数据量较大的情况下，如果对方的带宽很小，很有可能就会被你的高并发请求直接弄挂，这就相当于CC攻击了。</p><pre class="line-numbers language-text"><code class="language-text">CC攻击是Dos攻击的一种，主要表现是对目标网站发起大量的HTTP请求，使其服务器性能被消耗殆尽，从而达到让对方服务器拒绝服务的效果。Dos攻击就是让对方服务器拒绝服务的攻击的总称，而我们常听说的DDoS攻击其实是分布式拒绝服务攻击的意思，只是在Dos的基础上加了个分布式而已。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以，千万注意控制自己的请求速度，控制在一个合理的范围内，如果你司老板或产品经理给你提了一个像“<font color="#FF5F2E">一天采集一遍淘宝全站</font>”一样的这种需求，建议你直接怼回去。</p><p>这个请求速度，一方面你们这边的成本会非常高，另一方面，你们的法律风险极大，被爬的那一方完全可以以你们的爬虫对他们服务器的资源消耗过高为由（可参考某数据管理办法意见稿），直接将你们告上法庭，至于最后怎么判，完全看你们爬了数据做什么用。</p><blockquote><p>不要碰黑色产业</p></blockquote><p>这方面被抓的个人很多，基本都是接了个外包，然后对方是做黑产的，接外包的这位也不知道或者根本没去了解对方要他做的这个工具是用来干啥的，稀里糊涂地就被抓了。</p><p>举两个例子吧：</p><ol><li><p>有人找你说做一个直播平台的登录、进直播间、刷弹幕、刷免费礼物一条龙服务的程序，但他们实际上是用来造假数据的，这个情况下，如果他们出事被抓了（刷量属于黑色产业，大概率出事），你就是从犯。</p></li><li><p>之前知乎上有个很火的“接外包接进监狱的”回答，那个回答现在已经被删除了，但从内容上来看，与之前被抓的知名打码平台站长——微凉的情况很像，都是做了个验证码识别服务，都是给别人使用了，最后莫名其妙就被抓了。按回答中所说的，被抓的那个公司多半是做了上面那个例子中的事情，而且量非常大，而他提供了打码服务，所以就被连带上了。</p></li></ol><p>所以，如果感觉自己在做的事情不对劲，千万要搞清楚，如果有问题，赶紧弃坑！</p><p>接外包的时候，建议在可以保留聊天记录的IM上与对方详细了解一下对方会用这个程序做什么，有问题的千万别接！</p><blockquote><p>不要碰黄赌毒</p></blockquote><p>这个其实就不怎么跟爬虫有关了，因为目前我看到的案例都是说接外包做了个菠菜网站，最后被连带一起抓了的，但与上一条一样，建议搞清楚自己做的东西会被用来干什么，并保留好聊天记录，涉及黄赌毒的千万别接！</p><blockquote><p>不要对别人的软件进行逆向工程后还到处得瑟</p></blockquote><p>很多人以为写对某个网站/APP的逆向文章是没有风险、可以随便写的，但实际情况只是人家懒得弄你而已，因为几乎所有的网站、APP的用户协议中，都会有类似这样的条款：</p><pre class="line-numbers language-text"><code class="language-text">“在使用过程中，您将承担因下述行为而产生的全部法律责任：未经本公司授权，修改、破解、反编译、反汇编、逆向工程本产品，发布本产品的修改版、破解版等。”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有些游戏类的APP甚至还会有这样的条款：</p><pre class="line-numbers language-text"><code class="language-text">“严禁修改、破译或进行任何影响游戏程序和游戏网络数据传输封包的行为。”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简单地说就是，只要你对他们的网站、APP进行了逆向，甚至是抓包，他们就有理由告你。</p><p>当然，这就跟遵守robots协议一样扯淡，现在做垂直爬虫的基本没有不逆向、不抓包的，而目前见到的案例也就只是对方要求删文而已，还没到抓人的程度。</p><p>但是，如果某篇文章的传播面过广，对对方造成的一定的损失，而且对方想要搞你的话，那你就凉凉了。</p><p>说到这里，我还是再次说明一下我们夜幕团队的做法吧，我们的文章中不会出现直接逆向、破解某个第三方网站、APP的内容。</p><p>我们只会自己造一个案例，再对这个案例进行逆向，这样做既安全又不会因为对方更新而失效，真正做到授人以渔的作用。</p><blockquote><p>不要影响别人的正常业务</p></blockquote><p>这个应该很好理解吧？抢票、刷单、薅羊毛之类的其实都是属于这一类的，只要你的操作量大了，就会影响到别人的正常业务，而且还很有可能会涉及到其他的利益关系，你说这情况不抓你抓谁？</p><blockquote><p>非公开数据不要乱搞</p></blockquote><p>这个也很简单，别人用来商业化的数据（如天眼查、企查查、启信宝等工商信息查询网站），你通过公开手段爬了之后拿去用，人家当然要告你。</p><pre class="line-numbers language-text"><code class="language-text">并非指上面说的三家，指的是其它领域的东西，工商数据这一块目前还没看到相关案例。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><center>总结</center></h2><p>好了，差不多应该就是这些，这篇文章是想到啥就说啥了，对于一些细节方面的问题建议自行判断，判断不了的建议联系律师帮你分析，不要不知道什么情况还往里冲，这样子进监狱是迟早的事情。</p><p>再引用一下之前转载张凯强的《又一家数据公司被查，爬虫到底做错了什么？》这篇文章时，我提到的一个判断方法：</p><pre class="line-numbers language-text"><code class="language-text">有个很简单的方法能判断出一件事情是否有违法风险，如果你不知道做某件事情会不会违法，但你觉得做这件事情似乎不太好，那么这件事情做完以后多半会出事！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后说一下，技术无罪，但人的做法有罪，最核心的点是你做的事情合不合理、合不合法，希望各位读者能洁身自好，敬畏法律、敬畏人性。</p><p>夜幕团队成立于 2019 年，团队包括崔庆才、周子淇、陈祥安、唐轶飞、冯威、蔡晋、戴煌金、张冶青和韦世东。</p><p>涉猎的编程语言包括但不限于 Python、Rust、C++、Go，领域涵盖爬虫、深度学习、服务研发、对象存储等。团队非正亦非邪，只做认为对的事情，请大家小心。</p><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/nightteam.png" alt="识别上图二维码关注公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 风险 </tag>
            
            <tag> robots 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xpath re bs4 等爬虫解析器的性能比较</title>
      <link href="/posts/23470.html"/>
      <url>/posts/23470.html</url>
      
        <content type="html"><![CDATA[<h1 id="xpath-re-bs4-等爬虫解析器的性能比较"><a href="#xpath-re-bs4-等爬虫解析器的性能比较" class="headerlink" title="xpath re bs4 等爬虫解析器的性能比较"></a>xpath re bs4 等爬虫解析器的性能比较</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>测试网站地址：<a href="http://baijiahao.baidu.com/s?id=1644707202199076031">http://baijiahao.baidu.com/s?id=1644707202199076031</a></p><p>根据同一个网站，获取同样的数据，重复 500 次<strong>取和</strong>后进行对比。</p><h2 id="测试例子"><a href="#测试例子" class="headerlink" title="测试例子"></a>测试例子</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> re<span class="token keyword">import</span> time<span class="token keyword">import</span> scrapy<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">class</span> <span class="token class-name">NewsSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'news'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'baidu.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://baijiahao.baidu.com/s?id=1644707202199076031'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        re_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        xpath_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        lxml_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        bs4_lxml_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        html5lib_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        bs4_html5lib_time_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># re</span>            re_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            news_title <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">"&lt;title>(.*?)&lt;/title>"</span><span class="token punctuation">,</span> string<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            news_content <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token operator">=</span><span class="token string">'&lt;span class="bjh-p">(.*?)&lt;/span>'</span><span class="token punctuation">,</span> string<span class="token operator">=</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>            re_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> re_start_time<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># xpath</span>            xpath_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            news_title <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">"//div[@class='article-title']/h2/text()"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            news_content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'string(//*[@id="article"])'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            xpath_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> xpath_start_time<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># bs4 html5lib without BeautifulSoup</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html5lib"</span><span class="token punctuation">)</span>            html5lib_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            news_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"div.article-title > h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            news_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            html5lib_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> html5lib_start_time<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># bs4 html5lib with BeautifulSoup</span>            bs4_html5lib_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html5lib"</span><span class="token punctuation">)</span>            news_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"div.article-title > h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            news_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            bs4_html5lib_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> bs4_html5lib_start_time<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># bs4 lxml without BeautifulSoup</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            lxml_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            news_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"div.article-title > h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            news_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            lxml_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lxml_start_time<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># bs4 lxml without BeautifulSoup</span>            bs4_lxml_start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>            news_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"div.article-title > h2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            news_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>select_one<span class="token punctuation">(</span><span class="token string">"#article"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            bs4_lxml_time_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> bs4_lxml_start_time<span class="token punctuation">)</span>        re_result <span class="token operator">=</span> sum<span class="token punctuation">(</span>re_time_list<span class="token punctuation">)</span>        xpath_result <span class="token operator">=</span> sum<span class="token punctuation">(</span>xpath_time_list<span class="token punctuation">)</span>        lxml_result <span class="token operator">=</span> sum<span class="token punctuation">(</span>lxml_time_list<span class="token punctuation">)</span>        html5lib_result <span class="token operator">=</span> sum<span class="token punctuation">(</span>html5lib_time_list<span class="token punctuation">)</span>        bs4_lxml_result <span class="token operator">=</span> sum<span class="token punctuation">(</span>bs4_lxml_time_list<span class="token punctuation">)</span>        bs4_html5lib_result <span class="token operator">=</span> sum<span class="token punctuation">(</span>bs4_html5lib_time_list<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"re 使用时间：{re_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"xpath 使用时间：{xpath_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"lxml 纯解析使用时间：{lxml_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"html5lib 纯解析使用时间：{html5lib_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bs4_lxml 转换解析使用时间：{bs4_lxml_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bs4_html5lib 转换解析使用时间：{bs4_html5lib_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"xpath/re ：{xpath_result / re_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"lxml/re ：{lxml_result / re_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"html5lib/re ：{html5lib_result / re_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bs4_lxml/re ：{bs4_lxml_result / re_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bs4_html5lib/re ：{bs4_html5lib_result / re_result}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试结果：</p></blockquote><p>第一次</p><pre class="line-numbers language-text"><code class="language-text">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>re 使用时间：0.018010616302490234xpath 使用时间：0.19927382469177246lxml 纯解析使用时间：0.3410227298736572html5lib 纯解析使用时间：0.3842911720275879bs4_lxml 转换解析使用时间：1.6482152938842773bs4_html5lib 转换解析使用时间：6.744122505187988>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>xpath/re ：11.064242408196765lxml/re ：18.934539726245003html5lib/re ：21.336925154218847bs4_lxml/re ：91.51354213550078bs4_html5lib/re ：374.4526223822509lxml/xpath ：1.7113272673976896html5lib/xpath ：1.9284578525152096>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二次</p><pre class="line-numbers language-text"><code class="language-text">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>re 使用时间：0.023047208786010742xpath 使用时间：0.18992280960083008lxml 纯解析使用时间：0.3522317409515381html5lib 纯解析使用时间：0.418229341506958bs4_lxml 转换解析使用时间：1.710503101348877bs4_html5lib 转换解析使用时间：7.1153998374938965>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>xpath/re ：8.24059917034769lxml/re ：15.28305419636484html5lib/re ：18.14663742538819bs4_lxml/re ：74.21736476770769bs4_html5lib/re ：308.7315216154427lxml/xpath ：1.8546047296364272html5lib/xpath ：2.2021016979791463>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三次</p><pre class="line-numbers language-text"><code class="language-text">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>re 使用时间：0.014002561569213867xpath 使用时间：0.18992352485656738lxml 纯解析使用时间：0.3783881664276123html5lib 纯解析使用时间：0.39995455741882324bs4_lxml 转换解析使用时间：1.751767873764038bs4_html5lib 转换解析使用时间：7.1871068477630615>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>xpath/re ：13.563484360899695lxml/re ：27.022781835827757html5lib/re ：28.56295653062267bs4_lxml/re ：125.10338662716453bs4_html5lib/re ：513.2708620660298lxml/xpath ：1.9923185751389976html5lib/xpath ：2.1058716013241323>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果分析：</p></blockquote><p>三次取平均值结果分析</p><table><thead><tr><th align="center"></th><th align="center">re</th><th align="center">xpath</th><th align="center">lxml</th><th align="center">html5lib</th><th align="center">lxml(bs4)</th><th align="center">html5lib(bs4)</th></tr></thead><tbody><tr><td align="center">re</td><td align="center">1</td><td align="center">10.52</td><td align="center">19.46</td><td align="center">21.84</td><td align="center">92.82</td><td align="center">382.25</td></tr><tr><td align="center">xpath</td><td align="center"></td><td align="center">1</td><td align="center">1.85</td><td align="center">2.08</td><td align="center">8.82</td><td align="center">36.34</td></tr><tr><td align="center">lxml</td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">1.12</td><td align="center">4.77</td><td align="center">19.64</td></tr><tr><td align="center">html5lib</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">4.25</td><td align="center">17.50</td></tr><tr><td align="center">lxml(bs4)</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td><td align="center">4.12</td></tr><tr><td align="center">html5lib(bs4)</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">1</td></tr></tbody></table><ul><li>xpath/re ：10.52</li><li>lxml/re ：19.46</li><li>html5lib/re ：21.84</li><li>bs4_lxml/re ：92.82</li><li>bs4_html5lib/re ：382.25</li><li>lxml/xpath ：1.85</li><li>html5lib/xpath ：2.08</li><li>bs4_lxml/xpath ：8.82</li><li>bs4_html5lib/xpath ：36.34</li><li>html5lib/lxml ：1.12</li><li>bs4_lxml/lxml ：4.77</li><li>bs4_html5lib/lxml ：19.64</li><li>bs4_lxml/html5lib ：4.25</li><li>bs4_html5lib/html5lib ：17.50</li><li>bs4_html5lib/bs4_lxml ：4.12</li></ul><h2 id="三种爬取方式的对比"><a href="#三种爬取方式的对比" class="headerlink" title="三种爬取方式的对比"></a>三种爬取方式的对比</h2><table><thead><tr><th align="center"></th><th align="center">re</th><th align="center">xpath</th><th align="center">bs4</th></tr></thead><tbody><tr><td align="center">安装</td><td align="center">内置</td><td align="center">第三方</td><td align="center">第三方</td></tr><tr><td align="center">语法</td><td align="center">正则</td><td align="center">路径匹配</td><td align="center">面向对象</td></tr><tr><td align="center">使用</td><td align="center">困难</td><td align="center">较困难</td><td align="center">简单</td></tr><tr><td align="center">性能</td><td align="center">最高</td><td align="center">适中</td><td align="center">最低</td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>re &gt; xpath &gt; bs4</p></blockquote><ul><li><p>re 是 xpath 的 10 倍左右</p><p>  虽然 re 在性能上远比 xpath bs4 高很多，但是在使用上，比 xpath 和 bs4 难度上要大很多，且后期维护的困难度上也高很多。</p></li><li><p>xpath 是 bs4 的 1.8 倍左右</p><p>  仅仅比较提取的效率来说，xpath 是 bs4 的 1.8 倍左右，但是实际情况还包含 bs4 的 转换过程，在层数多且量大的情况下，实际效率 xpath 要比 bs4 高很多。</p></li></ul><p>总的来说，xpath 加上 scrapy-redis 的分布式已经非常满足性能要求了，建议入 xpath 的坑。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
            <tag> xpath </tag>
            
            <tag> re </tag>
            
            <tag> bs4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDP 3.1.0 集成 Sqoop2 踩坑问题记录</title>
      <link href="/posts/65261.html"/>
      <url>/posts/65261.html</url>
      
        <content type="html"><![CDATA[<h1 id="HDP-3-1-0-集成-Sqoop2-踩坑问题记录"><a href="#HDP-3-1-0-集成-Sqoop2-踩坑问题记录" class="headerlink" title="HDP 3.1.0 集成 Sqoop2 踩坑问题记录"></a>HDP 3.1.0 集成 Sqoop2 踩坑问题记录</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><pre class="line-numbers language-bash"><code class="language-bash">$ sqoop:000<span class="token operator">></span> start job -n mysql2hdfs2019-04-18 03:29:10 UTC: FAILURE_ON_SUBMIT Exception: java.lang.IllegalArgumentException: Unable to parse <span class="token string">'/hdp/apps/<span class="token variable">${hdp.version}</span>/mapreduce/mapreduce.tar.gz#mr-framework'</span> as a URI, check the setting <span class="token keyword">for</span> mapreduce.application.framework.pathStack trace: java.lang.IllegalArgumentException: Unable to parse <span class="token string">'/hdp/apps/<span class="token variable">${hdp.version}</span>/mapreduce/mapreduce.tar.gz#mr-framework'</span> as a URI, check the setting <span class="token keyword">for</span> mapreduce.application.framework.path    <span class="token punctuation">..</span>.Caused by: java.net.URISyntaxException: Illegal character <span class="token keyword">in</span> path at index 11: /hdp/apps/<span class="token variable">${hdp.version}</span>/mapreduce/mapreduce.tar.gz<span class="token comment" spellcheck="true">#mr-framework</span>    <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因：</strong></p><p><code>sqoop2</code> 未设置该环境 ${hdp.version}</p><p><strong>解决：</strong></p><p>修改 Ambari 组件 MapRduce2 配置</p><blockquote><p>将 <code>${hdp.version}</code> 替换成实际 <code>hdp</code> 的版本: <code>3.1.0.0-78</code></p></blockquote><table><thead><tr><th align="center">配置项</th><th align="center">参数名</th><th align="center">初始值</th><th align="center">修改值</th></tr></thead><tbody><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.application.framework.path</td><td align="center"><code>/hdp/apps/${hdp.version}/mapreduce/mapreduce.tar.gz#mr-framework</code></td><td align="center"><code>/hdp/apps/3.1.0.0-78/mapreduce/mapreduce.tar.gz#mr-framework</code></td></tr></tbody></table><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><pre class="line-numbers language-bash"><code class="language-bash">$ sqoop:000<span class="token operator">></span> status job -n mysql2hdfs Submission detailsJob Name: demo8020Server URL: http://localhost:12000/sqoop/Created by: rootCreation date: 2019-04-18 03:29:55 UTCLastly updated by: rootExternal ID: job_1555557995737_0002    http://xxx.xxx.xxx:8088/proxy/application_1555557995737_0002/2019-04-18 03:30:10 UTC: FAILED Exception: Job Failed with status:3Stack trace: Application application_1555557995737_0002 failed 2 <span class="token function">times</span> due to Error launching appattempt_1555557995737_0002_000002. Got exception: org.apache.hadoop.yarn.exceptions.YarnException: Unauthorized request to start container.This token is expired. current <span class="token function">time</span> is 1555581323379 found 1555558796928Note: System <span class="token function">times</span> on machines may be out of sync. Check system <span class="token function">time</span> and <span class="token function">time</span> zones.    <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因：</strong></p><p>Ambari 时区没有同步 </p><p><strong>解决：</strong></p><p>利用 ntpd 同步时区</p><blockquote><p>参考教程：<a href="/2019/04/22/Ambari-ntpd/">ntpd 详细教程</a></p></blockquote><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><pre class="line-numbers language-bash"><code class="language-bash">$ sqoop:000<span class="token operator">></span> status job -n demo8020 Submission detailsJob Name: demo8020Server URL: http://localhost:12000/sqoop/Created by: rootCreation date: 2019-04-18 06:01:15 UTCLastly updated by: rootExternal ID: job_1555566883587_0003    http://xxx.xxx.xxx:8088/proxy/application_1555566883587_0003/2019-04-18 06:01:34 UTC: FAILED Exception: Job Failed with status:3Stack trace: Application application_1555566883587_0003 failed 2 <span class="token function">times</span> due to AM Container <span class="token keyword">for</span> appattempt_1555566883587_0003_000002 exited with  exitCode: 1Failing this attempt.Diagnostics: <span class="token punctuation">[</span>2019-04-18 14:01:16.003<span class="token punctuation">]</span>Exception from container-launch.Container id: container_e09_1555566883587_0003_02_000001Exit code: 1<span class="token punctuation">[</span>2019-04-18 14:01:16.004<span class="token punctuation">]</span>Container exited with a non-zero <span class="token keyword">exit</span> code 1. Error file: prelaunch.err.Last 4096 bytes of prelaunch.err <span class="token keyword">:</span>/hadoop/yarn/local/usercache/root/appcache/application_1555566883587_0003/container_e09_1555566883587_0003_02_000001/launch_container.sh: line 38: <span class="token variable">$PWD</span><span class="token keyword">:</span><span class="token variable">$PWD</span>/mr-framework/hadoop/share/hadoop/mapreduce/*:<span class="token variable">$PWD</span>/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:<span class="token variable">$PWD</span>/mr-framework/hadoop/share/hadoop/common/*:<span class="token variable">$PWD</span>/mr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因：</strong></p><p><code>sqoop2</code> 未设置该环境 ${hdp.version}</p><p><strong>解决：</strong></p><p>修改 Ambari 组件 MapRduce2 配置</p><blockquote><p>将 <code>${hdp.version}</code> 替换成实际 <code>hdp</code> 的版本: <code>3.1.0.0-78</code></p></blockquote><table><thead><tr><th align="center">配置项</th><th align="center">参数名</th><th align="center">初始值</th><th align="center">修改值</th></tr></thead><tbody><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.admin.map.child.java.opts</td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}</code></td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=3.1.0.0-78</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.admin.reduce.child.java.opts</td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}</code></td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=3.1.0.0-78</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.admin.user.env</td><td align="center"><code>LD_LIBRARY_PATH=/usr/hdp/${hdp.version}/hadoop/lib/native:/usr/hdp/${hdp.version}/hadoop/lib/native/Linux--64</code></td><td align="center"><code>LD_LIBRARY_PATH=/usr/hdp/3.1.0.0-78/hadoop/lib/native:/usr/hdp/3.1.0.0-78/hadoop/lib/native/Linux--64</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.application.classpath</td><td align="center"><code>$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/hdp/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure</code></td><td align="center"><code>$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/hdp/3.1.0.0-78/hadoop/lib/hadoop-lzo-0.6.0.3.1.0.0-78.jar:/etc/hadoop/conf/secure</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">yarn.app.mapreduce.am.admin-command-opts</td><td align="center"><code>-Dhdp.version=${hdp.version}</code></td><td align="center"><code>-Dhdp.version=3.1.0.0-78</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">MR AppMaster Java Heap Size</td><td align="center"><code>-Xmx819m -Dhdp.version=${hdp.version}</code></td><td align="center"><code>-Xmx819m -Dhdp.version=3.1.0.0-78</code></td></tr></tbody></table><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><pre class="line-numbers language-bash"><code class="language-bash">$ sqoop:000<span class="token operator">></span> start job -n demoException has occurred during processing <span class="token function">command</span> Exception: org.apache.sqoop.common.SqoopException Message: GENERIC_HDFS_CONNECTOR_0007:Invalid input/output directory - Unexpected exceptionStack trace:     <span class="token punctuation">..</span>.Caused by: Exception: java.io.IOException Message: Failed on local exception: org.apache.hadoop.ipc.RpcException: RPC response exceeds maximum data length<span class="token punctuation">;</span> Host Details <span class="token keyword">:</span> local host is: <span class="token string">"xxx.xxx.xxx/192.168.1.151"</span><span class="token punctuation">;</span> destination host is: <span class="token string">"xxx.xxx.xxx"</span>:9000<span class="token punctuation">;</span> Stack trace:     <span class="token punctuation">..</span>. Caused by: Exception: java.lang.Throwable Message: RPC response exceeds maximum data lengthStack trace:     <span class="token punctuation">..</span>. Caused by: Exception: java.lang.Throwable Message: RPC response exceeds maximum data length<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原因：</strong></p><p>hdfs link 信息填写错误 错误示例：hdfs://ip:9000 </p><p><strong>解决：</strong></p><p>将端口从 9000 改为 8020 正确示例：hdfs://ip:8020 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Sqoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
            <tag> HDP </tag>
            
            <tag> Sqoop2 </tag>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ambari 集群时间同步配置教程</title>
      <link href="/posts/27560.html"/>
      <url>/posts/27560.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ambari-集群时间同步配置教程"><a href="#Ambari-集群时间同步配置教程" class="headerlink" title="Ambari 集群时间同步配置教程"></a>Ambari 集群时间同步配置教程</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>在时间同步主节点创建 <code>ntp.conf</code> 文件</li><li>在时间同步从节点上创建 <code>ntp.conf</code> 文件</li><li>修改所有节点时区</li><li>重启主节点 <code>ntpd</code> 服务</li><li>将所有从节点时间与主节点时间同步</li><li>检测时间是否同步</li><li>重启从节点 <code>ntpd</code> 服务</li></ul><h3 id="在时间同步主节点创建-ntp-conf-文件"><a href="#在时间同步主节点创建-ntp-conf-文件" class="headerlink" title="在时间同步主节点创建 ntp.conf 文件"></a>在时间同步主节点创建 ntp.conf 文件</h3><p>选择一台设备当时间同步主节点，运行以下命令，编写文件 <code>ntp.conf</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入如下内容：</p><pre class="line-numbers language-text"><code class="language-text">driftfile /var/lib/ntp/driftrestrict default nomodify notrap nopeer noqueryrestrict 127.0.0.1 restrict ::1# restrict 网段 mask 子网掩码restrict 192.168.1.0 mask 255.255.255.0    # 修改这行     server 127.127.1.0includefile /etc/ntp/crypto/pwkeys /etc/ntp/keysdisable monitor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在时间同步从节点上创建-ntp-conf-文件"><a href="#在时间同步从节点上创建-ntp-conf-文件" class="headerlink" title="在时间同步从节点上创建 ntp.conf 文件"></a>在时间同步从节点上创建 ntp.conf 文件</h3><p>除主节点外的所有设备，运行以下命令，，编写文件 <code>ntp.conf</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入如下内容：</p><pre class="line-numbers language-text"><code class="language-text">driftfile /var/lib/ntp/driftrestrict default nomodify notrap nopeer noqueryrestrict 127.0.0.1 restrict ::1# server 从节点 IP 地址server 192.168.1.152       # 根据从节点实际 IP 地址修改includefile /etc/ntp/crypto/pwkeys /etc/ntp/keysdisable monitor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改所有节点时区"><a href="#修改所有节点时区" class="headerlink" title="修改所有节点时区"></a>修改所有节点时区</h3><p>在<code>每一个</code>节点上运行以下命令将所有节点的时区修改为 <code>Asia/Shanghai</code></p><pre class="line-numbers language-bash"><code class="language-bash">timedatectl set-timezone Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重启主节点-ntpd-服务"><a href="#重启主节点-ntpd-服务" class="headerlink" title="重启主节点 ntpd 服务"></a>重启主节点 ntpd 服务</h3><p>在主节点运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将所有从节点时间与主节点时间同步"><a href="#将所有从节点时间与主节点时间同步" class="headerlink" title="将所有从节点时间与主节点时间同步"></a>将所有从节点时间与主节点时间同步</h3><p>在每台从节点机器上运行如下命令：</p><blockquote><p>其中：192.168.1.151 表示主节点 IP 地址</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">ntpdate 192.168.1.151<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检测时间是否同步"><a href="#检测时间是否同步" class="headerlink" title="检测时间是否同步"></a>检测时间是否同步</h3><p>检测每台设备时间是否一致，运行如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">date</span>Thu Apr 18 16:50:07 CST 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="重启从节点-ntpd-服务"><a href="#重启从节点-ntpd-服务" class="headerlink" title="重启从节点 ntpd 服务"></a>重启从节点 ntpd 服务</h3><p>在每一个从节点运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Ambari 集群时间同步成功</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Ambari </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
            <tag> ntpd </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDP 3.1.0 集成 Sqoop2</title>
      <link href="/posts/64483.html"/>
      <url>/posts/64483.html</url>
      
        <content type="html"><![CDATA[<h1 id="HDP-3-1-0-集成-Sqoop2"><a href="#HDP-3-1-0-集成-Sqoop2" class="headerlink" title="HDP 3.1.0 集成 Sqoop2"></a>HDP 3.1.0 集成 Sqoop2</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>由三台主机组成的 HDP 3.1.0 集群</li><li>配置好时间同步</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>下载 <code>Sqoop2</code> 的安装包</li><li>解压安装包到 <code>/usr/lib</code> 目录下</li><li>修改 <code>sqoop.sh</code> 环境变量</li><li>修改 <code>sqoop.properties</code> 配置</li><li>导入第三方 <code>jar</code> 包</li><li>配置第三方 <code>jar</code> 包引用路径</li><li>修改 <code>Ambari</code> 上组件配置</li><li>验证配置是否正确</li><li>开启服务器</li></ul><h3 id="下载-Sqoop2-的安装包"><a href="#下载-Sqoop2-的安装包" class="headerlink" title="下载 Sqoop2 的安装包"></a>下载 Sqoop2 的安装包</h3><p>下载地址：<a href="http://mirror.bit.edu.cn/apache/sqoop/1.99.7/">http://mirror.bit.edu.cn/apache/sqoop/1.99.7/</a></p><p>下载命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~<span class="token function">wget</span> http://mirror.bit.edu.cn/apache/sqoop/1.99.7/sqoop-1.99.7-bin-hadoop200.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解压安装包到-usr-lib-目录下"><a href="#解压安装包到-usr-lib-目录下" class="headerlink" title="解压安装包到 /usr/lib 目录下"></a>解压安装包到 <code>/usr/lib</code> 目录下</h3><p>解压 <code>Sqoop2</code> 压缩包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -xvf sqoop-<span class="token operator">&lt;</span>version<span class="token operator">></span>-bin-hadoop<span class="token operator">&lt;</span>hadoop-version<span class="token operator">></span>.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动到 <code>/usr/lib/sqoop</code> 目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> sqoop-<span class="token operator">&lt;</span>version<span class="token operator">></span>-bin-hadoop<span class="token operator">&lt;</span>hadoop version<span class="token operator">></span> /usr/lib/sqoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改-sqoop-sh-环境变量"><a href="#修改-sqoop-sh-环境变量" class="headerlink" title="修改 sqoop.sh 环境变量"></a>修改 sqoop.sh 环境变量</h3><p>编辑 <code>/usr/lib/sqoop/bin/sqoop.sh</code> 文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /usr/lib/sqoop/bin/sqoop.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 <code>function sqoop_server_classpath_set</code> 函数，将其中的环境变量改一下就可以了，如下：</p><pre class="line-numbers language-text"><code class="language-text">function sqoop_server_classpath_set {  HADOOP_COMMON_HOME=${HADOOP_COMMON_HOME:-${HADOOP_HOME}/share/hadoop/common}  HADOOP_HDFS_HOME=${HADOOP_HDFS_HOME:-${HADOOP_HOME}/share/hadoop/hdfs}  HADOOP_MAPRED_HOME=${HADOOP_MAPRED_HOME:-${HADOOP_HOME}/share/hadoop/mapreduce}  HADOOP_YARN_HOME=${HADOOP_YARN_HOME:-${HADOOP_HOME}/share/hadoop/yarn}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将这些环境变量都注释掉，改为下面的内容即可：</p><pre class="line-numbers language-text"><code class="language-text">function sqoop_server_classpath_set {  HDP=/usr/hdp/3.0.1.0-187  HADOOP_COMMON_HOME=$HDP/hadoop  HADOOP_HDFS_HOME=$HDP/hadoop-hdfs  HADOOP_MAPRED_HOME=$HDP/hadoop-mapreduce  HADOOP_YARN_HOME=$HDP/hadoop-yarn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-sqoop-properties-配置"><a href="#修改-sqoop-properties-配置" class="headerlink" title="修改 sqoop.properties 配置"></a>修改 sqoop.properties 配置</h3><p>修改 <code>sqoop.properties</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /usr/lib/sqoop/conf/sqoop.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 <code>org.apache.sqoop.submission.engine.mapreduce.configuration.directory</code> 参数，如下：</p><pre class="line-numbers language-text"><code class="language-text">org.apache.sqoop.submission.engine.mapreduce.configuration.directory=/etc/hadoop/conf/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据集群实际信息将其改为下面的内容即可：</p><pre class="line-numbers language-text"><code class="language-text">org.apache.sqoop.submission.engine.mapreduce.configuration.directory=/usr/hdp/3.1.0.0-78/hadoop/conf/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="导入第三方-jar-包"><a href="#导入第三方-jar-包" class="headerlink" title="导入第三方 jar 包"></a>导入第三方 jar 包</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> /usr/lib/sqoop/extra<span class="token function">cp</span> /var/lib/ambari-server/resources/mysql-jdbc-driver.jar /usr/lib/sqoop/extra/<span class="token function">cp</span>  -r /usr/lib/sqoop/extra/* /usr/lib/sqoop/server/lib/<span class="token function">cp</span>  -r /usr/lib/sqoop/extra/* /usr/lib/sqoop/shell/lib/<span class="token function">cp</span>  -r /usr/lib/sqoop/extra/* /usr/lib/sqoop/tools/lib/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置第三方-jar-包引用路径"><a href="#配置第三方-jar-包引用路径" class="headerlink" title="配置第三方 jar 包引用路径"></a>配置第三方 jar 包引用路径</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加环境变量，如下：</p><pre class="line-numbers language-text"><code class="language-text">export SQOOP_HOME=/usr/lib/sqoopexport SQOOP_SERVER_EXTRA_LIB=$SQOOP_HOME/extraexport PATH=$PATH:$SQOOP_HOME/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行如下命令，使环境变量生效：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改-Ambari-上组件配置"><a href="#修改-Ambari-上组件配置" class="headerlink" title="修改 Ambari 上组件配置"></a>修改 Ambari 上组件配置</h3><p><strong>修改组件 HDFS 配置</strong></p><table><thead><tr><th align="center">配置项</th><th align="center">参数名</th><th align="center">初始值</th><th align="center">修改值</th></tr></thead><tbody><tr><td align="center">Advanced hdfs-site</td><td align="center">dfs.permissions.enabled</td><td align="center">True</td><td align="center">False</td></tr><tr><td align="center">Custom core-site</td><td align="center">hadoop.proxyuser.hive.hosts</td><td align="center"></td><td align="center"><code>*</code></td></tr><tr><td align="center">Custom core-site</td><td align="center">hadoop.proxyuser.root.hosts</td><td align="center"></td><td align="center"><code>*</code></td></tr><tr><td align="center">Custom core-site</td><td align="center">hadoop.proxyuser.sqoop2.groups</td><td align="center"></td><td align="center"><code>*</code></td></tr><tr><td align="center">Custom core-site</td><td align="center">hadoop.proxyuser.sqoop2.hosts</td><td align="center"></td><td align="center"><code>*</code></td></tr><tr><td align="center">Custom core-site</td><td align="center">hadoop.proxyuser.yarn.groups</td><td align="center"></td><td align="center"><code>*</code></td></tr><tr><td align="center">Custom core-site</td><td align="center">hadoop.proxyuser.yarn.hosts</td><td align="center"></td><td align="center"><code>*</code></td></tr></tbody></table><p><strong>修改组件 MapRduce2 配置</strong></p><blockquote><p>将 <code>${hdp.version}</code> 替换成实际 <code>hdp</code> 的版本: <code>3.1.0.0-78</code></p></blockquote><table><thead><tr><th align="center">配置项</th><th align="center">参数名</th><th align="center">初始值</th><th align="center">修改值</th></tr></thead><tbody><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.admin.map.child.java.opts</td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}</code></td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=3.1.0.0-78</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.admin.reduce.child.java.opts</td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=${hdp.version}</code></td><td align="center"><code>-server -XX:NewRatio=8 -Djava.net.preferIPv4Stack=true -Dhdp.version=3.1.0.0-78</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.admin.user.env</td><td align="center"><code>LD_LIBRARY_PATH=/usr/hdp/${hdp.version}/hadoop/lib/native:/usr/hdp/${hdp.version}/hadoop/lib/native/Linux-{{architecture}}-64</code></td><td align="center"><code>LD_LIBRARY_PATH=/usr/hdp/3.1.0.0-78/hadoop/lib/native:/usr/hdp/3.1.0.0-78/hadoop/lib/native/Linux-{{architecture}}-64</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.application.classpath</td><td align="center"><code>$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/hdp/${hdp.version}/hadoop/lib/hadoop-lzo-0.6.0.${hdp.version}.jar:/etc/hadoop/conf/secure</code></td><td align="center"><code>$PWD/mr-framework/hadoop/share/hadoop/mapreduce/*:$PWD/mr-framework/hadoop/share/hadoop/mapreduce/lib/*:$PWD/mr-framework/hadoop/share/hadoop/common/*:$PWD/mr-framework/hadoop/share/hadoop/common/lib/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/*:$PWD/mr-framework/hadoop/share/hadoop/yarn/lib/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/*:$PWD/mr-framework/hadoop/share/hadoop/hdfs/lib/*:$PWD/mr-framework/hadoop/share/hadoop/tools/lib/*:/usr/hdp/3.1.0.0-78/hadoop/lib/hadoop-lzo-0.6.0.3.1.0.0-78.jar:/etc/hadoop/conf/secure</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">mapreduce.application.framework.path</td><td align="center"><code>/hdp/apps/${hdp.version}/mapreduce/mapreduce.tar.gz#mr-framework</code></td><td align="center"><code>/hdp/apps/3.1.0.0-78/mapreduce/mapreduce.tar.gz#mr-framework</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">yarn.app.mapreduce.am.admin-command-opts</td><td align="center"><code>-Dhdp.version=${hdp.version}</code></td><td align="center"><code>-Dhdp.version=3.1.0.0-78</code></td></tr><tr><td align="center">Advanced mapred-site</td><td align="center">MR AppMaster Java Heap Size</td><td align="center"><code>-Xmx819m -Dhdp.version=${hdp.version}</code></td><td align="center"><code>-Xmx819m -Dhdp.version=3.1.0.0-78</code></td></tr></tbody></table><h3 id="验证配置是否正确"><a href="#验证配置是否正确" class="headerlink" title="验证配置是否正确"></a>验证配置是否正确</h3><pre class="line-numbers language-bash"><code class="language-bash">$ sqoop2-tool verifySetting conf dir: /usr/lib/sqoop/bin/<span class="token punctuation">..</span>/conf                                                 Sqoop home directory: /usr/lib/sqoop                                                         Sqoop tool executor:                                                                                 Version: 1.99.7                                                                              Revision: 435d5e61b922a32d7bce567fe5fb1a9c0d9b1bbb                                           Compiled on Tue Jul 19 16:08:27 PDT 2016 by abefine                                  Running tool: class org.apache.sqoop.tools.tool.VerifyTool                                   0    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  org.apache.sqoop.core.SqoopServer  - Initializing Sqoop server.            8    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  org.apache.sqoop.core.PropertiesConfigurationProvider  - Starting config <span class="token keyword">fi</span>le poller thread                                                                             Verification was successful.                                                                 Tool class org.apache.sqoop.tools.tool.VerifyTool has finished correctly.  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开启服务器"><a href="#开启服务器" class="headerlink" title="开启服务器"></a>开启服务器</h3><pre class="line-numbers language-bash"><code class="language-bash">$ sqoop2-server startSetting conf dir: /usr/lib/sqoop/bin/<span class="token punctuation">..</span>/conf                                                 Sqoop home directory: /usr/lib/sqoop                                                         Sqoop tool executor:                                                                                 Version: 1.99.7                                                                              Revision: 435d5e61b922a32d7bce567fe5fb1a9c0d9b1bbb                                           Compiled on Tue Jul 19 16:08:27 PDT 2016 by abefine                                  Running tool: class org.apache.sqoop.tools.tool.VerifyTool                                   0    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  org.apache.sqoop.core.SqoopServer  - Initializing Sqoop server.            8    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  org.apache.sqoop.core.PropertiesConfigurationProvider  - Starting config <span class="token keyword">fi</span>le poller thread                                                                             Verification was successful.                                                                 Tool class org.apache.sqoop.tools.tool.VerifyTool has finished correctly.                    <span class="token punctuation">[</span>root@sandbox-hdp ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># sqoop2-server start                                                    </span>Setting conf dir: /usr/lib/sqoop/bin/<span class="token punctuation">..</span>/conf                                                 Sqoop home directory: /usr/lib/sqoop                                                         Starting the Sqoop2 server<span class="token punctuation">..</span>.                                                                0    <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  org.apache.sqoop.core.SqoopServer  - Initializing Sqoop server.            11   <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO  org.apache.sqoop.core.PropertiesConfigurationProvider  - Starting config <span class="token keyword">fi</span>le poller thread                                                                             Sqoop2 server started. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看是否启动成功</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">$ jps <span class="token operator">|</span> <span class="token function">grep</span> Sqoop30970 SqoopJettyServer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如出现 <code>SqoopJettyServer</code> 进程则表示已启动成功。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Sqoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ambari </tag>
            
            <tag> 安装文档 </tag>
            
            <tag> HDP </tag>
            
            <tag> Sqoop2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora 安装 MongoDB 教程</title>
      <link href="/posts/37161.html"/>
      <url>/posts/37161.html</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB-安装"><a href="#MongoDB-安装" class="headerlink" title="MongoDB 安装"></a>MongoDB 安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Fedora 29</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>安装 <code>mongodb</code> 和 <code>mongodb-server</code></li><li>启动服务</li></ol><h3 id="安装-MongoDB-和-MongoDB-Server"><a href="#安装-MongoDB-和-MongoDB-Server" class="headerlink" title="安装 MongoDB 和 MongoDB-Server"></a>安装 MongoDB 和 MongoDB-Server</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> mongodb mongodb-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动 <code>mongod</code> 服务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start mongod.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开机自动启动</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token function">enable</span> mongod.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> Linux </tag>
            
            <tag> MongoDB </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文文案排版指北</title>
      <link href="/posts/39632.html"/>
      <url>/posts/39632.html</url>
      
        <content type="html"><![CDATA[<h1 id="中文文案排版指北"><a href="#中文文案排版指北" class="headerlink" title="中文文案排版指北"></a>中文文案排版指北</h1><p>GitHub repository: <a href="https://github.com/mzlogin/chinese-copywriting-guidelines">mzlogin/chinese-copywriting-guidelines</a></p><p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p><hr><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p><p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js">vinta/paranoid-auto-spacing</a></p><h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p></blockquote><p>错误：</p><blockquote><p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p></blockquote><blockquote><p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p></blockquote><p>完整的正确用法：</p><blockquote><p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p></blockquote><p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p><h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p><blockquote><p>今天出去买菜花了 5000 元。</p></blockquote><p>错误：</p><blockquote><p>今天出去买菜花了 5000元。</p></blockquote><blockquote><p>今天出去买菜花了5000元。</p></blockquote><h3 id="数字与单位之间无需增加空格"><a href="#数字与单位之间无需增加空格" class="headerlink" title="数字与单位之间无需增加空格"></a>数字与单位之间无需增加空格</h3><p>正确：</p><blockquote><p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p></blockquote><p>错误：</p><blockquote><p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p></blockquote><p>另外，度／百分比与数字之间不需要增加空格：</p><p>正确：</p><blockquote><p>今天是 233° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p></blockquote><p>错误：</p><blockquote><p>今天是 233 ° 的高温。</p></blockquote><blockquote><p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p></blockquote><h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p><blockquote><p>刚刚买了一部 iPhone，好开心！</p></blockquote><p>错误：</p><blockquote><p>刚刚买了一部 iPhone ，好开心！</p></blockquote><h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85).aspx"><code>-ms-text-autospace</code></a> 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p><blockquote><p>德国队竟然战胜了巴西队！</p></blockquote><blockquote><p>她竟然对你说「喵」？！</p></blockquote><p>错误：</p><blockquote><p>德国队竟然战胜了巴西队！！</p></blockquote><blockquote><p>德国队竟然战胜了巴西队！！！！！！！！</p></blockquote><blockquote><p>她竟然对你说「喵」？？！！</p></blockquote><blockquote><p>她竟然对你说「喵」？！？！？？！！</p></blockquote><h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角</a>』。</p><h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p><blockquote><p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p></blockquote><blockquote><p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p></blockquote><p>错误：</p><blockquote><p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p></blockquote><blockquote><p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p></blockquote><blockquote><p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p></blockquote><blockquote><p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p></blockquote><h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p><blockquote><p>这件蛋糕只卖 1000 元。</p></blockquote><p>错误：</p><blockquote><p>这件蛋糕只卖 １０００ 元。</p></blockquote><p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p><h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p></blockquote><blockquote><p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><p>错误：</p><blockquote><p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p></blockquote><blockquote><p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p></blockquote><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p><p>正确：</p><blockquote><p>使用 GitHub 登录</p></blockquote><blockquote><p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p></blockquote><p>错误：</p><blockquote><p>使用 github 登录</p></blockquote><blockquote><p>使用 GITHUB 登录</p></blockquote><blockquote><p>使用 Github 登录</p></blockquote><blockquote><p>使用 gitHub 登录</p></blockquote><blockquote><p>使用 gｲんĤЦ8 登录</p></blockquote><blockquote><p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p></blockquote><blockquote><p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p></blockquote><blockquote><p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p></blockquote><blockquote><p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p></blockquote><p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p><h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p><blockquote><p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p></blockquote><p>错误：</p><blockquote><p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，即：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p><h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p><blockquote><p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p></blockquote><p>对比用法：</p><blockquote><p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p></blockquote><blockquote><p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p></blockquote><h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p><blockquote><p>「老师，『有条不紊』的『紊』是什么意思？」</p></blockquote><p>对比用法：</p><blockquote><p>“老师，‘有条不紊’的‘紊’是什么意思？”</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table><thead><tr><th>仓库</th><th>语言</th></tr></thead><tbody><tr><td><a href="https://github.com/vinta/paranoid-auto-spacing">vinta/paranoid-auto-spacing</a></td><td>JavaScript</td></tr><tr><td><a href="https://github.com/huei90/pangu.node">huei90/pangu.node</a></td><td>Node.js</td></tr><tr><td><a href="https://github.com/huacnlee/auto-correct">huacnlee/auto-correct</a></td><td>Ruby</td></tr><tr><td><a href="https://github.com/sparanoid/space-lover">sparanoid/space-lover</a></td><td>PHP (WordPress)</td></tr><tr><td><a href="https://github.com/NauxLiu/auto-correct">nauxliu/auto-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/ricoa/copywriting-correct">ricoa/copywriting-correct</a></td><td>PHP</td></tr><tr><td><a href="https://github.com/hotoo/pangu.vim">hotoo/pangu.vim</a></td><td>Vim</td></tr><tr><td><a href="https://github.com/sparanoid/grunt-auto-spacing">sparanoid/grunt-auto-spacing</a></td><td>Node.js (Grunt)</td></tr><tr><td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk">hjiang/scripts/add-space-between-latin-and-cjk</a></td><td>Python</td></tr></tbody></table><h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table><thead><tr><th>网站</th><th>文案</th><th>UGC</th></tr></thead><tbody><tr><td><a href="http://www.apple.com/cn/">Apple 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/hk/">Apple 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.apple.com/tw/">Apple 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-cn/">Microsoft 中国</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-hk/">Microsoft 香港</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="http://www.microsoft.com/zh-tw/">Microsoft 台湾</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://leancloud.cn/">LeanCloud</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.zhihu.com/">知乎</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="https://www.v2ex.com/">V2EX</a></td><td>Yes</td><td>Yes</td></tr><tr><td><a href="https://segmentfault.com/">SegmentFault</a></td><td>Yes</td><td>部分用户达成</td></tr><tr><td><a href="http://apple4us.com/">Apple4us</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://www.wandoujia.com/">豌豆荚</a></td><td>Yes</td><td>N/A</td></tr><tr><td><a href="https://ruby-china.org/">Ruby China</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="https://phphub.org/">PHPHub</a></td><td>Yes</td><td>标题达成</td></tr><tr><td><a href="http://sspai.com/">少数派</a></td><td>Yes</td><td>N/A</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm">Guidelines for Using Capital Letters</a></li><li><a href="http://en.wikipedia.org/wiki/Letter_case">Letter case - Wikipedia</a></li><li><a href="http://www.oxforddictionaries.com/words/punctuation">Punctuation - Oxford Dictionaries</a></li><li><a href="https://owl.english.purdue.edu/owl/section/1/6/">Punctuation - The Purdue OWL</a></li><li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly">How to Use English Punctuation Corrently - wikiHow</a></li><li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F">格式 - openSUSE</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2">全角和半角 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F">引号 - 维基百科</a></li><li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F">疑问惊叹号 - 维基百科</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fedora 29 安装 GitBook 教程</title>
      <link href="/posts/53731.html"/>
      <url>/posts/53731.html</url>
      
        <content type="html"><![CDATA[<h1 id="Fedora-29-安装-GitBook-教程"><a href="#Fedora-29-安装-GitBook-教程" class="headerlink" title="Fedora 29 安装 GitBook 教程"></a>Fedora 29 安装 GitBook 教程</h1><h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><p>安装 nvm</p><pre class="line-numbers language-bash"><code class="language-bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>退出终端</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-node"><a href="#安装-node" class="headerlink" title="安装 node"></a>安装 node</h2><pre class="line-numbers language-bash"><code class="language-bash">nvm <span class="token function">install</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-GitBook"><a href="#安装-GitBook" class="headerlink" title="安装 GitBook"></a>安装 GitBook</h2><blockquote><p>更换 npm 源</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g gitbook-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-GitBook-依赖"><a href="#安装-GitBook-依赖" class="headerlink" title="安装 GitBook 依赖"></a>安装 GitBook 依赖</h2><p>安装 svgexport</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g svgexport --unsafe-perm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 calibre</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> calibre<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitBook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> GitBook </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum localinstall 解决本地 rpm 包的依赖问题</title>
      <link href="/posts/13384.html"/>
      <url>/posts/13384.html</url>
      
        <content type="html"><![CDATA[<h1 id="yum-localinstall-解决本地-rpm-包的依赖问题"><a href="#yum-localinstall-解决本地-rpm-包的依赖问题" class="headerlink" title="yum localinstall 解决本地 rpm 包的依赖问题"></a>yum localinstall 解决本地 rpm 包的依赖问题</h1><p>使用命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> rpm -ivh xxx.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>这样安装可能会出现很多依赖关系需要解决。为了能使软件安装过程中自动解决依赖关系，我们可以使用命令：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum -y localinstall xxx.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在安装的同时自动解决有关依赖关系。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> yum </tag>
            
            <tag> rpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Docker 搭建 IPFS 私有网络</title>
      <link href="/posts/40630.html"/>
      <url>/posts/40630.html</url>
      
        <content type="html"><![CDATA[<h1 id="利用-Docker-搭建-IPFS-私有网络"><a href="#利用-Docker-搭建-IPFS-私有网络" class="headerlink" title="利用 Docker 搭建 IPFS 私有网络"></a>利用 Docker 搭建 IPFS 私有网络</h1><p>下载项目</p><blockquote><p>项目地址：<a href="https://github.com/Sitoi/Private-Network-IPFS.git">https://github.com/Sitoi/Private-Network-IPFS.git</a></p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>两台 Linux 设备，分别配置他们的ip地址为 192.168.1.244 和 192.168.1.246</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>修改挂载目录</li><li>通过 docker 创建 IPFS 容器</li><li>确保配置 IPFS API 以允许跨源（CORS）请求</li><li>生成并分发一个共享 key</li><li>移除默认的 boostrap 节点</li><li>添加节点创建网络</li><li>重启服务</li><li>查看邻居</li></ul><h3 id="修改挂载目录"><a href="#修改挂载目录" class="headerlink" title="修改挂载目录"></a>修改挂载目录</h3><blockquote><p>该步骤可跳过，默认挂载目录为 项目目录下的 <code>data</code> 和 <code>staging</code> 文件夹</p></blockquote><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">ipfs_host</span><span class="token punctuation">:</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ipfs_host    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/ipfs/go<span class="token punctuation">-</span>ipfs<span class="token punctuation">:</span>latest    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./staging<span class="token punctuation">:</span>/export                 <span class="token comment" spellcheck="true"># (可不修改)修改 挂载目录 ./staging</span>      <span class="token punctuation">-</span> ./data<span class="token punctuation">:</span>/data/ipfs                 <span class="token comment" spellcheck="true"># (可不修改)修改 挂载目录 ./data</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 4001<span class="token punctuation">:</span><span class="token number">4001</span>      <span class="token punctuation">-</span> 0.0.0.0<span class="token punctuation">:</span>8080<span class="token punctuation">:</span><span class="token number">8080</span>      <span class="token punctuation">-</span> 0.0.0.0<span class="token punctuation">:</span>5001<span class="token punctuation">:</span><span class="token number">5001</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过-docker-创建-IPFS-容器"><a href="#通过-docker-创建-IPFS-容器" class="headerlink" title="通过 docker 创建 IPFS 容器"></a>通过 docker 创建 IPFS 容器</h3><blockquote><p>192.168.1.244 和 192.168.1.246 节点 创建 IPFS 容器</p></blockquote><p>运行 make 命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">make</span> up<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登陆网页：<a href="http://192.168.1.244:5001/webui">http://192.168.1.244:5001/webui</a><br>登陆网页：<a href="http://192.168.1.246:5001/webui">http://192.168.1.246:5001/webui</a></p><p>创建容器到正常访问页面所要等待时间大约 <code>3-5</code> 分钟</p><h3 id="确保配置-IPFS-API-以允许跨源（CORS）请求"><a href="#确保配置-IPFS-API-以允许跨源（CORS）请求" class="headerlink" title="确保配置 IPFS API 以允许跨源（CORS）请求"></a>确保配置 IPFS API 以允许跨源（CORS）请求</h3><blockquote><p>192.168.1.244 和 192.168.1.246 节点 配置跨源（CORS）请求</p></blockquote><p>运行以下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin <span class="token string">'["*"]'</span> docker <span class="token function">exec</span> ipfs_host ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods <span class="token string">'["PUT", "GET", "POST"]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="生成并分发一个共享-key"><a href="#生成并分发一个共享-key" class="headerlink" title="生成并分发一个共享 key"></a>生成并分发一个共享 key</h3><blockquote><p>192.168.1.244 和 192.168.1.246 节点 配置跨源（CORS）请求</p></blockquote><blockquote><p>注：每个节点的 key 文件<code>内容保持一致</code></p></blockquote><ul><li>生成key</li></ul><pre class="line-numbers language-bash"><code class="language-bash">go get -u github.com/Kubuxu/go-ipfs-swarm-key-gen/ipfs-swarm-key-gen./ipfs-swarm-key-gen <span class="token operator">></span> swarm.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>分发 key 到每个节点</li></ul><p>目标路径： 挂载目录的 <code>data</code> 文件夹内</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> swarm.key data/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="移除默认的-boostrap-节点"><a href="#移除默认的-boostrap-节点" class="headerlink" title="移除默认的 boostrap 节点"></a>移除默认的 boostrap 节点</h3><blockquote><p>192.168.1.244 和 192.168.1.246 节点 配置跨源（CORS）请求</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs bootstrap <span class="token function">rm</span> --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="添加节点创建网络"><a href="#添加节点创建网络" class="headerlink" title="添加节点创建网络"></a>添加节点创建网络</h3><ul><li>获取 192.168.1.244 节点 信息</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs <span class="token function">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"QmNtnCQiqMezQiwPfRwf7KE8BoM8mBmUYYm3XsXNfh8DL7"</span><span class="token punctuation">,</span>    <span class="token property">"PublicKey"</span><span class="token operator">:</span> <span class="token string">"CAASpgIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDGwu8A5Xw4okQmkpufHLIjIO5ZhQGnCGzqD/OgcGE5MNfPe6pSurRQTI9AgQWtODJOGWqj7GBe1PgZXHIVkIhVjPIQftpcJJ/D6STJIzH9gGApc7SA8iIh2i9TaTontnvLuDswRj2hce2vWXQhh3DZ8ttv9rrPYfMcuM0tWs7klMQgt3C67prxgTd0esXm5DevtgJeHazimJcjNMBsAc9niKBgV0KFwxZPGouBBFibzF9jTWOC0qk52c33a4LcvKohLWnJbJGJ8mQj1oI9Srmo2SV37UbAVECxRvCDa0HhJkUUzkzpyCFUncZ03Mz0D6VTTCEoFKMBcahHM7ZuCKezAgMBAAE="</span><span class="token punctuation">,</span>    <span class="token property">"Addresses"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"/ip4/127.0.0.1/tcp/4001/ipfs/QmNtnCQiqMezQiwPfRwf7KE8BoM8mBmUYYm3XsXNfh8DL7"</span><span class="token punctuation">,</span>        <span class="token string">"/ip4/172.19.0.2/tcp/4001/ipfs/QmNtnCQiqMezQiwPfRwf7KE8BoM8mBmUYYm3XsXNfh8DL7"</span><span class="token punctuation">,</span>        <span class="token string">"/ip6/::1/tcp/4001/ipfs/QmNtnCQiqMezQiwPfRwf7KE8BoM8mBmUYYm3XsXNfh8DL7"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"AgentVersion"</span><span class="token operator">:</span> <span class="token string">"go-ipfs/0.4.19/52776a7"</span><span class="token punctuation">,</span>    <span class="token property">"ProtocolVersion"</span><span class="token operator">:</span> <span class="token string">"ipfs/0.1.0"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>192.168.1.246 节点添加 192.168.1.244 </li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs bootstrap add /ip4/192.168.1.244/tcp/4001/ipfs/QmNtnCQiqMezQiwPfRwf7KE8BoM8mBmUYYm3XsXNfh8DL7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><blockquote><p>192.168.1.244 和 192.168.1.246 节点 服务重启</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker restart ipfs_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看邻居"><a href="#查看邻居" class="headerlink" title="查看邻居"></a>查看邻居</h3><blockquote><p>192.168.1.244 查看邻居</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs swarm peers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">/ip4/192.168.1.246/tcp/4001/ipfs/QmVUF31gtrV9H3V1ndDCEGfKLahBNi8E9PT4AHj6m2zpjj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>192.168.1.246 查看邻居</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs swarm peers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">/ip4/192.168.1.244/tcp/4001/ipfs/QmNtnCQiqMezQiwPfRwf7KE8BoM8mBmUYYm3XsXNfh8DL7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>在 192.168.1.244 节点 添加文件</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs add /data/ipfs/version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text"> 2 B / 2 B  100.00%added QmaHbbushv2gYBUyofdm853cy1HTcNuinqagCfMjMdGmNw version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 192.168.1.246 节点 用哈希值读取该文件</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host ipfs <span class="token function">cat</span> QmaHbbushv2gYBUyofdm853cy1HTcNuinqagCfMjMdGmNw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搭建的私有网络可以正常使用。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><blockquote><p>查看运行日志</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker logs -f ipfs_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>停止容器</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker stop ipfs_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除容器</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> ipfs_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>重启容器</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker restart ipfs_host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>运行 IPFS 命令 </p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> ipfs_host <span class="token operator">&lt;</span>ipfs cmd<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> IPFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 开发环境搭建教程</title>
      <link href="/posts/18425.html"/>
      <url>/posts/18425.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-开发环境搭建教程"><a href="#Ubuntu-开发环境搭建教程" class="headerlink" title="Ubuntu 开发环境搭建教程"></a>Ubuntu 开发环境搭建教程</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt upgrade<span class="token function">sudo</span> apt update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="生成本机密钥"><a href="#生成本机密钥" class="headerlink" title="生成本机密钥"></a>生成本机密钥</h3><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"shitao0418@gamil.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认位置： <code>~/.ssh/</code></p><h3 id="安装-vim"><a href="#安装-vim" class="headerlink" title="安装 vim"></a>安装 vim</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> vim<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="免-sudo-密码"><a href="#免-sudo-密码" class="headerlink" title="免 sudo 密码"></a>免 sudo 密码</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> -e <span class="token string">'Defaults:shitao !requiretty\nshitao ALL = (root) NOPASSWD:ALL'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sudoers.d/shitao<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="htop-可视化系统监测"><a href="#htop-可视化系统监测" class="headerlink" title="htop 可视化系统监测"></a>htop 可视化系统监测</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">htop</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ssh-远程链接软件"><a href="#ssh-远程链接软件" class="headerlink" title="ssh 远程链接软件"></a>ssh 远程链接软件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server openssh-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="jdk-java-开发环境"><a href="#jdk-java-开发环境" class="headerlink" title="jdk java 开发环境"></a>jdk java 开发环境</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> openjdk-8-jdk <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="python-pip-开发工具"><a href="#python-pip-开发工具" class="headerlink" title="python pip 开发工具"></a>python pip 开发工具</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> python3 python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>pip 升级</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> --upgrade pip --user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> curl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装网络相关包"><a href="#安装网络相关包" class="headerlink" title="安装网络相关包"></a>安装网络相关包</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> net-tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ibus-pinyin-中文输入法"><a href="#ibus-pinyin-中文输入法" class="headerlink" title="ibus-pinyin 中文输入法"></a>ibus-pinyin 中文输入法</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> ibus-pinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>重启系统</p></li><li><p>进入语言设置</p></li><li><p>选择中文输入法 <code>chines</code> 然后找 <code>pinyin</code></p></li></ul><h3 id="chromium-浏览器"><a href="#chromium-浏览器" class="headerlink" title="chromium 浏览器"></a>chromium 浏览器</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> chromium-browser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>全部安装上述全部软件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">htop</span> openssh-server openssh-client openjdk-8-jdk python3 python3-pip curl net-tools docker.io ibus-pinyin chromium-browser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h3><pre class="line-numbers language-bash"><code class="language-bash">nvm <span class="token function">install</span> node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更换源"><a href="#更换源" class="headerlink" title="更换源"></a>更换源</h2><h3 id="更换-pipy-源"><a href="#更换-pipy-源" class="headerlink" title="更换 pipy 源"></a>更换 pipy 源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.pipvim ~/.pip/pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件样例：</p><pre class="line-numbers language-text"><code class="language-text">[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更换-maven-源"><a href="#更换-maven-源" class="headerlink" title="更换 maven 源"></a>更换 maven 源</h3><blockquote><p>进入 <code>maven</code> 文件夹，在 <code>conf</code> 目录中找到 <code>settings.xml</code> 文件</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /usr/share/maven/conf/settings.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>配置 <code>mirrors</code> 的子节点，添加如下 <code>mirror</code></p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更换-npm-源"><a href="#更换-npm-源" class="headerlink" title="更换 npm 源"></a>更换 npm 源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更换-docker-源"><a href="#更换-docker-源" class="headerlink" title="更换 docker 源"></a>更换 docker 源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/docker/daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"insecure-registries"</span><span class="token operator">:</span><span class="token punctuation">[</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"registry-mirrors"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token string">"https://registry.docker-cn.com"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更换-gem-源"><a href="#更换-gem-源" class="headerlink" title="更换 gem 源"></a>更换 gem 源</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 开发环境 </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站 &amp; APP 安利</title>
      <link href="/posts/51270.html"/>
      <url>/posts/51270.html</url>
      
        <content type="html"><![CDATA[<h2 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h2><h3 id="影视类"><a href="#影视类" class="headerlink" title="影视类"></a>影视类</h3><h4 id="影视大院"><a href="#影视大院" class="headerlink" title="影视大院"></a>影视大院</h4><p>地址：<a href="https://www.vfans.fun">https://www.vfans.fun</a></p><p>描述：没有上架应用商店，需要安装信任企业证书，VIP资源视频等；多分辨率；支持离线下载</p><h4 id="麻花影视"><a href="#麻花影视" class="headerlink" title="麻花影视"></a>麻花影视</h4><p>地址：<a href="https://www.imahua.tv">https://www.imahua.tv</a></p><p>描述：App Store 搜：麻花播放器，院线热播电影，VIP资源视频等；多分辨率；支持离线下载</p><h4 id="韩剧-TV"><a href="#韩剧-TV" class="headerlink" title="韩剧 TV"></a>韩剧 TV</h4><p>地址：<a href="http://t.cn/ExyOqi1">http://t.cn/ExyOqi1</a></p><p>描述：App Store 搜：韩剧TV，IOS 上专门看韩剧的 APP；多分辨率；支持离线下载</p><hr><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><h3 id="影视类-1"><a href="#影视类-1" class="headerlink" title="影视类"></a>影视类</h3><h4 id="耐卡影视论坛"><a href="#耐卡影视论坛" class="headerlink" title="耐卡影视论坛"></a>耐卡影视论坛</h4><p>地址：<a href="http://mcar.cc/forum.php">http://mcar.cc/forum.php</a></p><p>描述：美剧、日剧、韩剧、动漫、院线电影等资源论坛（免费）；支持百度网盘</p><h4 id="FIX-字幕侠"><a href="#FIX-字幕侠" class="headerlink" title="FIX 字幕侠"></a>FIX 字幕侠</h4><p>地址：<a href="http://www.zimuxia.cn/">http://www.zimuxia.cn</a></p><p>描述：美剧、日剧、韩剧、德语、法语、欧美电影、综艺&amp;记录；支持百度网盘</p><h4 id="追新番"><a href="#追新番" class="headerlink" title="追新番"></a>追新番</h4><p>地址：<a href="http://www.zhuixinfan.com/main.php">http://www.zhuixinfan.com/main.php</a></p><p>描述：日剧、日影；支持百度网盘</p><h4 id="Fantopia"><a href="#Fantopia" class="headerlink" title="Fantopia"></a>Fantopia</h4><p>地址：<a href="https://fantopia.club">https://fantopia.club</a></p><p>日剧、美剧、英剧、电影、动画、纪录片；支持百度网盘</p><h4 id="高清电台"><a href="#高清电台" class="headerlink" title="高清电台"></a>高清电台</h4><p>地址：<a href="https://gaoqing.fm">https://gaoqing.fm</a></p><p>描述：院线电影、电视剧；支持磁力链接</p><h4 id="花花影视"><a href="#花花影视" class="headerlink" title="花花影视"></a>花花影视</h4><p>地址：<a href="http://mv.81blog.com">http://mv.81blog.com</a></p><p>描述：电影、电视剧、综艺、动漫；支持在线播放，不支持下载</p><h4 id="BT-电影天堂"><a href="#BT-电影天堂" class="headerlink" title="BT 电影天堂"></a>BT 电影天堂</h4><p>地址：<a href="http://www.btbtdy.tv/index.php">http://www.btbtdy.tv/index.php</a></p><p>描述：电影、电视剧、动漫；支持在线播放，磁力链接</p><h4 id="91-美剧网"><a href="#91-美剧网" class="headerlink" title="91 美剧网"></a>91 美剧网</h4><p>地址：<a href="https://91mjw.com">https://91mjw.com</a></p><p>描述：美剧的专网；支持在线播放，不支持下载</p><h4 id="在线福利网"><a href="#在线福利网" class="headerlink" title="在线福利网"></a>在线福利网</h4><p>地址：<a href="www.wz80.com">www.wz80.com</a></p><p>描述：电影、电视剧、综艺、音乐、动漫、舞曲；支持在线播放，不支持下载</p><h4 id="全国电视直播"><a href="#全国电视直播" class="headerlink" title="全国电视直播"></a>全国电视直播</h4><p>地址：<a href="http://bddn.cn/zb.htm">http://bddn.cn/zb.htm</a></p><p>描述：电视直播网站；支持在线播放</p><h3 id="音乐类"><a href="#音乐类" class="headerlink" title="音乐类"></a>音乐类</h3><h4 id="自由音乐"><a href="#自由音乐" class="headerlink" title="自由音乐"></a>自由音乐</h4><p>地址：<a href="https://www.tikitiki.cn">https://www.tikitiki.cn</a></p><p>描述：音乐下载网站，三个平台切换，支持在线播放和下载，无广告</p><h4 id="音乐下载助手"><a href="#音乐下载助手" class="headerlink" title="音乐下载助手"></a>音乐下载助手</h4><p>地址：<a href="https://music.hwkxk.cn">https://music.hwkxk.cn</a></p><p>描述：音乐下载网站，四个平台切换，支持在线播放和下载</p><h3 id="应用类"><a href="#应用类" class="headerlink" title="应用类"></a>应用类</h3><h4 id="PandaHelper"><a href="#PandaHelper" class="headerlink" title="PandaHelper"></a>PandaHelper</h4><p>地址：<a href="http://m.pandahelp.vip/regular">http://m.pandahelp.vip/regular</a></p><p>描述：海量 IOS 破解软件，旧版本 APP 下载</p><h4 id="TweakBoxApp"><a href="#TweakBoxApp" class="headerlink" title="TweakBoxApp"></a>TweakBoxApp</h4><p>地址：<a href="https://www.tweakboxapp.com">https://www.tweakboxapp.com</a></p><p>描述：海量 IOS 破解软件，旧版本 APP 下载</p><h4 id="点火"><a href="#点火" class="headerlink" title="点火"></a>点火</h4><p>地址：<a href="http://ignition.fun">http://ignition.fun</a></p><p>描述：海量 IOS 破解软件，旧版本 APP 下载</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySpark DataFrame 添加自增 ID</title>
      <link href="/posts/62634.html"/>
      <url>/posts/62634.html</url>
      
        <content type="html"><![CDATA[<h1 id="PySpark-DataFrame-添加自增-ID"><a href="#PySpark-DataFrame-添加自增-ID" class="headerlink" title="PySpark DataFrame 添加自增 ID"></a>PySpark DataFrame 添加自增 ID</h1><p>在用 <code>Spark</code> 处理数据的时候，经常需要给全量数据增加一列<code>自增 ID 序号</code>，在存入数据库的时候，<code>自增 ID</code> 也常常是一个很关键的要素。<br>在 DataFrame 的 API 中没有实现这一功能，所以只能通过其他方式实现，或者转成 RDD 再用 RDD 的 <code>zipWithIndex</code> 算子实现。<br>下面呢就介绍三种实现方式。</p><blockquote><p>创建 DataFrame 对象</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> SparkSessionspark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>df <span class="token operator">=</span> spark<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>    <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Sitoi"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Shitao"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"De"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">45</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-text"><code class="language-text">+---+------+|age|  name|+---+------+| 18| Alice|| 22| Sitoi|| 22|Shitao||  7|   Tom|| 17|    De|| 45| Apple|+---+------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式一：monotonically-increasing-id"><a href="#方式一：monotonically-increasing-id" class="headerlink" title="方式一：monotonically_increasing_id()"></a>方式一：monotonically_increasing_id()</h2><p>使用自带函数 <code>monotonically_increasing_id()</code> 创建,由于 spark 会有<code>分区</code>，所以生成的 ID 保证<code>单调增加且唯一，但不是连续的</code>。</p><p>优点：对于没有分区的文件，处理速度快。<br>缺点：由于 spark 的分区，会导致，ID 不是连续增加。</p><pre class="line-numbers language-python"><code class="language-python">df <span class="token operator">=</span> df<span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> monotonically_increasing_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-text"><code class="language-text">+---+------+-----------+|age|  name|         id|+---+------+-----------+| 18| Alice| 8589934592|| 22| Sitoi|17179869184|| 22|Shitao|25769803776||  7|   Tom|42949672960|| 17|    De|51539607552|| 45| Apple|60129542144|+---+------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果读取本地的单个 CSV 文件 或 JSON 文件，ID 会是连续增加且唯一的。</p></blockquote><h2 id="方法二：窗口函数"><a href="#方法二：窗口函数" class="headerlink" title="方法二：窗口函数"></a>方法二：窗口函数</h2><p>利用<code>窗口函数</code>：设置窗口函数的分区以及排序，因为是全局排序而不是分组排序，所有分区依据为空，排序规则没有特殊要求也可以随意填写</p><p>优点：保证 ID <code>连续增加且唯一</code>。<br>缺点：运行速度满，并且数据量过大会<code>爆内存</code>,需要<code>排序</code>，会改变原始数据顺序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions <span class="token keyword">import</span> row_numberspec <span class="token operator">=</span> Window<span class="token punctuation">.</span>partitionBy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>orderBy<span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span>df <span class="token operator">=</span> df<span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row_number<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>over<span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-text"><code class="language-text">+---+------+---+|age|  name| id|+---+------+---+|  7|   Tom|  1|| 17|    De|  2|| 18| Alice|  3|| 22| Sitoi|  4|| 22|Shitao|  5|| 45| Apple|  6|+---+------+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法三：RDD-的-zipWithIndex-算子"><a href="#方法三：RDD-的-zipWithIndex-算子" class="headerlink" title="方法三：RDD 的 zipWithIndex 算子"></a>方法三：RDD 的 zipWithIndex 算子</h2><p>转成 RDD 再用 RDD 的 zipWithIndex 算子实现</p><p>优点：保证 ID 连续 增加且唯一。<br>缺点：运行速度慢。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> SparkSession<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions <span class="token keyword">import</span> monotonically_increasing_id<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types <span class="token keyword">import</span> StructField<span class="token punctuation">,</span> LongTypespark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>schema <span class="token operator">=</span> df<span class="token punctuation">.</span>schema<span class="token punctuation">.</span>add<span class="token punctuation">(</span>StructField<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> LongType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>rdd <span class="token operator">=</span> df<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>zipWithIndex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">flat</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> l<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> k        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">yield</span> <span class="token keyword">from</span> flat<span class="token punctuation">(</span>k<span class="token punctuation">)</span>rdd <span class="token operator">=</span> rdd<span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> list<span class="token punctuation">(</span>flat<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df <span class="token operator">=</span> spark<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>rdd<span class="token punctuation">,</span> schema<span class="token punctuation">)</span>df<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-text"><code class="language-text">+---+------+---+|age|  name| id|+---+------+---+| 18| Alice|  0|| 22| Sitoi|  1|| 22|Shitao|  2||  7|   Tom|  3|| 17|    De|  4|| 45| Apple|  5|+---+------+---+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> PySpark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDFS 配额教程</title>
      <link href="/posts/12544.html"/>
      <url>/posts/12544.html</url>
      
        <content type="html"><![CDATA[<h1 id="名称配额（Name-Quota）"><a href="#名称配额（Name-Quota）" class="headerlink" title="名称配额（Name Quota）"></a>名称配额（Name Quota）</h1><p>名称配额是在对应的目录下所有文件和目录名称的数量上的限制。<br>当超过这个配额的时候，文件或目录就会创建失败，<strong>重命名后</strong>名称配额<strong>仍然有效</strong>。</p><h3 id="名称配额步骤"><a href="#名称配额步骤" class="headerlink" title="名称配额步骤"></a>名称配额步骤</h3><ol><li>创建一个测试目录</li><li>设置创建的目录的名称配额</li><li>查看目录的配额信息</li><li>put 文件进行名称配额测试</li><li>清除配额限制</li><li>再次 put 一个文件</li></ol><h4 id="创建一个测试目录"><a href="#创建一个测试目录" class="headerlink" title="创建一个测试目录"></a>创建一个测试目录</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -mkdir /shitao/test_quota1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置创建的目录的名称配额"><a href="#设置创建的目录的名称配额" class="headerlink" title="设置创建的目录的名称配额"></a>设置创建的目录的名称配额</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfsadmin -setQuota 2 /shitao/test_quota1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看目录的配额信息"><a href="#查看目录的配额信息" class="headerlink" title="查看目录的配额信息"></a>查看目录的配额信息</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -count -q /shitao/test_quota1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>状态信息</p></blockquote><table><thead><tr><th align="center">状态</th><th align="center">文件数限额</th><th align="center">可用文件数</th><th align="center">空间限额大小（字节）</th><th align="center">可用空间大小（字节）</th><th align="center">目录数</th><th align="center">文件数</th><th align="center">总大小</th><th align="center">文件/目录名</th></tr></thead><tbody><tr><td align="center">设置前</td><td align="center">none</td><td align="center">inf</td><td align="center">none</td><td align="center">inf</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">/shitao/test_quota</td></tr><tr><td align="center">设置后</td><td align="center">2</td><td align="center">1</td><td align="center">none</td><td align="center">inf</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">/shitao/test_quota</td></tr></tbody></table><h4 id="put-文件进行名称配额测试"><a href="#put-文件进行名称配额测试" class="headerlink" title="put 文件进行名称配额测试"></a>put 文件进行名称配额测试</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put demo.csv /shitao/test_quota1/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -count -q /shitao/test_quota1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">状态</th><th align="center">文件数限额</th><th align="center">可用文件数</th><th align="center">空间限额大小（字节）</th><th align="center">可用空间大小（字节）</th><th align="center">目录数</th><th align="center">文件数</th><th align="center">总大小</th><th align="center">文件/目录名</th></tr></thead><tbody><tr><td align="center">上传一个文件后</td><td align="center">2</td><td align="center">0</td><td align="center">none</td><td align="center">inf</td><td align="center">1</td><td align="center">1</td><td align="center">1469</td><td align="center">/shitao/test_quota</td></tr></tbody></table><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put test.csv /shitao/test_quota1/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">put: The NameSpace quota (directories and files) of directory /shitao/test_quota is exceeded: quota=2 file count=3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注：</p><blockquote><p>HDFS在设计的时候，将目录本身也包含了，即占用一个配额数，所以设置为2时，其实只能放一个文件或目录。  </p></blockquote></blockquote><h4 id="清除配额限制"><a href="#清除配额限制" class="headerlink" title="清除配额限制"></a>清除配额限制</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfsadmin -clrQuota /shitao/test_quota1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="再次-put-一个文件"><a href="#再次-put-一个文件" class="headerlink" title="再次 put 一个文件"></a>再次 put 一个文件</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put test.csv /shitao/test_quota1/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以看到put成功了，再次查看配额信息：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -count -q /shitao/test_quota1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">状态</th><th align="center">文件数限额</th><th align="center">可用文件数</th><th align="center">空间限额大小（字节）</th><th align="center">可用空间大小（字节）</th><th align="center">目录数</th><th align="center">文件数</th><th align="center">总大小</th><th align="center">文件/目录名</th></tr></thead><tbody><tr><td align="center">清除配额限制后</td><td align="center">none</td><td align="center">inf</td><td align="center">none</td><td align="center">inf</td><td align="center">1</td><td align="center">2</td><td align="center">2575</td><td align="center">/shitao/test_quota</td></tr></tbody></table><blockquote><p>注：</p><blockquote><p>如果前面两个值为none和inf时，表示没有设置名称配额。 </p></blockquote></blockquote><hr><h1 id="空间配额（Space-Quota）"><a href="#空间配额（Space-Quota）" class="headerlink" title="空间配额（Space Quota）"></a>空间配额（Space Quota）</h1><p>空间配额是目录的空间大小限制。<br>如果超过这个配额，块写入操作会失败。副本也算配额中的一部分。<br>空间配额为0的时候，可以创建文件，但是不能向文件中写入内容。 </p><h3 id="空间配额步骤"><a href="#空间配额步骤" class="headerlink" title="空间配额步骤"></a>空间配额步骤</h3><ol><li>创建一个测试目录</li><li>生成测试 100MB 大小的文件</li><li>设置空间配额大小为 200MB</li><li>put 文件测试</li><li>修改空间配额大小为 385MB</li><li>put 一个文件</li><li>清除配额限制</li><li>再次 put 一个文件</li></ol><h4 id="创建测试目录"><a href="#创建测试目录" class="headerlink" title="创建测试目录"></a>创建测试目录</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -mkdir /shitao/test_quota2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="生成测试-100MB-大小的文件"><a href="#生成测试-100MB-大小的文件" class="headerlink" title="生成测试 100MB 大小的文件"></a>生成测试 100MB 大小的文件</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>./file bs<span class="token operator">=</span>1M count<span class="token operator">=</span>100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">100+0 records in100+0 records out104857600 bytes (105 MB) copied, 0.0813538 s, 1.3 GB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>查看文件大小</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">du</span> -sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">100M    .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="设置空间配额大小为-200MB"><a href="#设置空间配额大小为-200MB" class="headerlink" title="设置空间配额大小为 200MB"></a>设置空间配额大小为 200MB</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfsadmin -setSpaceQuota 209715200 /shitao/test_quota2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="上传文件测试"><a href="#上传文件测试" class="headerlink" title="上传文件测试"></a>上传文件测试</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put <span class="token function">file</span> /shitao/test_quota2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>返回信息：</p></blockquote><pre class="line-numbers language-text"><code class="language-text">put: The DiskSpace quota of /shitao/test_quota2 is exceeded: quota = 209715200 B = 200 MB but diskspace consumed = 402653184 B = 384 MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注：</p><blockquote><p>其实这个跟HDFS的块大小有关系。</p></blockquote></blockquote><blockquote><blockquote><p>我们环境的HDFS的blocksize(dfs.block.size, dfs.blocksize)大小设置为128MB，副本因子为3。</p></blockquote></blockquote><blockquote><blockquote><p>NameNode 写文件时会分配block倍数的大小，然后检查对应目录的空间配额。</p></blockquote></blockquote><blockquote><blockquote><p>当“目录已经写入的容量+ 当前blocksize*3”与 “目录空间配额” 进行比较，如果前者大于后者，就会报错。</p></blockquote></blockquote><blockquote><blockquote><p>对于我们上面的测试，即0+384MB &gt; 200MB，大于空间配额的设置，所以会失败。 </p></blockquote></blockquote><h4 id="修改空间配额大小为-385MB"><a href="#修改空间配额大小为-385MB" class="headerlink" title="修改空间配额大小为 385MB"></a>修改空间配额大小为 385MB</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfsadmin -setSpaceQuota 403701760 /shitao/test_quota2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="put-一个文件"><a href="#put-一个文件" class="headerlink" title="put 一个文件"></a>put 一个文件</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put <span class="token function">file</span> /shitao/test_quota2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>当然我们也可以查看空间配额的信息：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -count -q /shitao/test_quota2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">状态</th><th align="center">文件数限额</th><th align="center">可用文件数</th><th align="center">空间限额大小（字节）</th><th align="center">可用空间大小（字节）</th><th align="center">目录数</th><th align="center">文件数</th><th align="center">总大小</th><th align="center">文件/目录名</th></tr></thead><tbody><tr><td align="center">清除配额限制后</td><td align="center">none</td><td align="center">inf</td><td align="center">403701760</td><td align="center">89128960</td><td align="center">1</td><td align="center">1</td><td align="center">104857600</td><td align="center">/shitao/test_quota</td></tr></tbody></table><blockquote><p>再次上传，又会出现错误：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put <span class="token function">file</span> /shitao/test_quota2/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>返回信息：</p></blockquote><pre class="line-numbers language-text"><code class="language-text">put: The DiskSpace quota of /shitao/test_quota2 is exceeded: quota = 403701760 B = 385 MB but diskspace consumed = 717225984 B = 684 MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="清除空间配额"><a href="#清除空间配额" class="headerlink" title="清除空间配额"></a>清除空间配额</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfsadmin -clrSpaceQuota /shitao/test_quota2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="再次-put-一个文件-1"><a href="#再次-put-一个文件-1" class="headerlink" title="再次 put 一个文件"></a>再次 put 一个文件</h4><pre class="line-numbers language-bash"><code class="language-bash">hdfs dfs -put <span class="token function">file</span> /shitao/test_quota2/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可以看到，清除空间配额后，再次成功上传上面的文件了。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> 配额 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 单机安装教程</title>
      <link href="/posts/24540.html"/>
      <url>/posts/24540.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop-单机安装步骤"><a href="#Hadoop-单机安装步骤" class="headerlink" title="Hadoop 单机安装步骤"></a>Hadoop 单机安装步骤</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Fedora 29</li><li>openjdk version “1.8.0_191”</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul><li>创建 <code>Hadoop</code> 帐号</li><li>下载 <code>Hadoop</code> 安装包</li><li>解压 <code>Hadoop</code> 安装包</li><li>配置环境变量</li><li>配置 <code>Hadoop</code> 文件</li><li>启动集群</li><li>查看状态</li></ul><h3 id="创建-Hadoop-帐号"><a href="#创建-Hadoop-帐号" class="headerlink" title="创建 Hadoop 帐号"></a>创建 Hadoop 帐号</h3><h5 id="为-Hadoop-创建一个专门的账号"><a href="#为-Hadoop-创建一个专门的账号" class="headerlink" title="为 Hadoop 创建一个专门的账号"></a>为 Hadoop 创建一个专门的账号</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> adduser hadoop<span class="token function">sudo</span> <span class="token function">passwd</span> hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="授予-Hadoop-root-权限"><a href="#授予-Hadoop-root-权限" class="headerlink" title="授予 Hadoop root 权限"></a>授予 Hadoop root 权限</h5><blockquote><p>为了测试，图方便，这里给Hadoop root权限，生产环境不建议这样做。</p></blockquote><p>使用root权限编辑/etc/sudoers:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>末尾添加一行：</p><pre class="line-numbers language-text"><code class="language-text">hadoop  ALL=(ALL) ALL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到Hadoop账号：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span> hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="配置-SSH-无密码登录"><a href="#配置-SSH-无密码登录" class="headerlink" title="配置 SSH 无密码登录"></a>配置 SSH 无密码登录</h5><p><strong>首先生成公私密钥对</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>指定 <code>key pair</code> 的存放位置<br>回车默认存放于/home/hadoop/.ssh/id_rsa输入passphrase，这里直接回车，为空，确保无密码可登陆。</p></blockquote><p><strong>拷贝生成的公钥到授权 key 文件（authorized_keys)</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub <span class="token operator">>></span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>改变 key 权限为拥有者可读可写（0600）</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> 0600 ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>chomod命令参考：</p><pre><code>chmod 600 file – owner can read and writechmod 700 file – owner can read, write and executechmod 666 file – all can read and writechmod 777 file – all can read, write and execute</code></pre><p><strong>测试是否成功</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> localhost<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载-Hadoop-安装包"><a href="#下载-Hadoop-安装包" class="headerlink" title="下载 Hadoop 安装包"></a>下载 Hadoop 安装包</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~<span class="token function">wget</span> http://192.168.1.60/apache/hadoop/common/hadoop-3.0.1/hadoop-3.0.1.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解压-Hadoop-安装包"><a href="#解压-Hadoop-安装包" class="headerlink" title="解压 Hadoop 安装包"></a>解压 Hadoop 安装包</h3><blockquote><p>最好做个关联 <code>ln -s hadoop-3.0.1 hadoop</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf hadoop-3.0.1.tar.gz<span class="token function">mv</span> hadoop-3.0.1 hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>编辑 <code>~/.bashrc</code> 文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下环境变量</p><pre class="line-numbers language-text"><code class="language-text">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64export HADOOP_HOME=/home/hadoop/hadoopexport HADOOP_INSTALL=$HADOOP_HOMEexport HADOOP_MAPRED_HOME=$HADOOP_HOMEexport HADOOP_COMMON_HOME=$HADOOP_HOMEexport HADOOP_HDFS_HOME=$HADOOP_HOMEexport YARN_HOME=$HADOOP_HOMEexport HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/nativeexport PATH=$PATH:$HADOOP_HOME/sbin:$HADOOP_HOME/binexport JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使配置文件生效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置-Hadoop-文件"><a href="#配置-Hadoop-文件" class="headerlink" title="配置 Hadoop 文件"></a>配置 Hadoop 文件</h3><p>修改 <code>hadoop/core-site.xml</code> 配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/core-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改以下内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.default.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://localhost:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>hadoop/hdfs-site.xml</code> 配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/hdfs-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改以下内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///home/hadoop/hadoopdata/hdfs/namenode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///home/hadoop/hadoopdata/hdfs/datanode<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>hadoop/mapred-site.xml</code> 配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改以下内容：</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 <code>hadoop/yarn-site.xml</code> 配置文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改以下内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><h5 id="格式化-Hadoop-文件系统"><a href="#格式化-Hadoop-文件系统" class="headerlink" title="格式化 Hadoop 文件系统"></a>格式化 Hadoop 文件系统</h5><pre class="line-numbers language-bash"><code class="language-bash">hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动-HDFS"><a href="#启动-HDFS" class="headerlink" title="启动 HDFS"></a>启动 HDFS</h5><pre><code>$HADOOP_HOME/sbin/start-dfs.sh</code></pre><blockquote><p>注：若是 <code>JAVA_HOME</code> 没设置错误</p></blockquote><pre><code>vim $HADOOP_HOME/etc/hadoop/hadoop-env.sh</code></pre><p>在末尾加上：</p><pre class="line-numbers language-sh"><code class="language-sh">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="启动-YARN"><a href="#启动-YARN" class="headerlink" title="启动 YARN"></a>启动 YARN</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$HADOOP_HOME</span>/sbin/start-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><p>查看 <code>HDFS</code> 状态，浏览器访问： <code>http://localhost:9870</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Livy 安装教程</title>
      <link href="/posts/16143.html"/>
      <url>/posts/16143.html</url>
      
        <content type="html"><![CDATA[<h1 id="Livy-安装"><a href="#Livy-安装" class="headerlink" title="Livy 安装"></a>Livy 安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Fedora 29</li><li>Spark</li><li>PySpark</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>下载 <code>Livy</code> 安装包</li><li>解压 <code>Livy</code> 安装包到 <code>/opt/livy/</code> 目录</li><li>修改配置</li><li>启动 <code>Livy</code></li></ol><h3 id="下载-Livy-安装包"><a href="#下载-Livy-安装包" class="headerlink" title="下载 Livy 安装包"></a>下载 Livy 安装包</h3><p>下载地址：<code>http://livy.incubator.apache.org/get-started/</code></p><h3 id="解压-Livy-安装包到-opt-livy-目录"><a href="#解压-Livy-安装包到-opt-livy-目录" class="headerlink" title="解压 Livy 安装包到 /opt/livy/ 目录"></a>解压 Livy 安装包到 /opt/livy/ 目录</h3><h5 id="创建-opt-livy-目录"><a href="#创建-opt-livy-目录" class="headerlink" title="创建 /opt/livy 目录"></a>创建 /opt/livy 目录</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /opt/livy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压到-opt-livy-目录"><a href="#解压到-opt-livy-目录" class="headerlink" title="解压到 /opt/livy 目录"></a>解压到 /opt/livy 目录</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> unzip livy-0.5.0-incubating-bin.zip  -d /opt/<span class="token function">sudo</span> <span class="token function">mv</span> /opt/livy-0.5.0-incubating-bin /opt/livy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><h5 id="将配置模板-livy-conf-template-复制并命名成-livy-conf"><a href="#将配置模板-livy-conf-template-复制并命名成-livy-conf" class="headerlink" title="将配置模板 livy.conf.template 复制并命名成 livy.conf"></a>将配置模板 livy.conf.template 复制并命名成 livy.conf</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> /opt/livy/conf/livy.conf.template /opt/livy/conf/livy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="更改配置文件"><a href="#更改配置文件" class="headerlink" title="更改配置文件"></a>更改配置文件</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /opt/livy/conf/livy.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>更改内容：取消注释，加上 <code>/</code></p></blockquote><pre class="line-numbers language-text"><code class="language-text">livy.file.local-dir-whitelist = /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动livy"><a href="#启动livy" class="headerlink" title="启动livy"></a>启动livy</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span>/opt/livy/bin/livy-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> Livy </tag>
            
            <tag> Spark </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark-Bench 测试教程</title>
      <link href="/posts/19752.html"/>
      <url>/posts/19752.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-Bench-教程"><a href="#Spark-Bench-教程" class="headerlink" title="Spark-Bench 教程"></a>Spark-Bench 教程</h1><h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>操作系统：<code>centos7</code></p><p>环境要求：安装 <code>JDK</code>, <code>Hadoop</code>, <code>Spark</code>，<code>mvn</code> 运行环境</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>安装测试工具</p><ol><li>安装 <code>wikixmlj</code></li><li>安装 <code>SparkBench</code> 基准测试组件</li><li>单机环境安装方式</li></ol></li><li><p>根据实际环境配置测试环境</p><ol><li>修改基本环境</li><li>配置 <code>Spark</code> 运行参数部分</li></ol></li><li><p>运行 <code>Spark-Bench</code> 测试</p><ol><li>机器学习测试案例</li><li>图计算测试案例</li><li>SQL 查询测试案例</li><li>流处理测试案例</li><li>其他测试案例</li></ol></li><li><p>查看测试结果</p></li></ol><h3 id="安装测试工具"><a href="#安装测试工具" class="headerlink" title="安装测试工具"></a>安装测试工具</h3><blockquote><p>所有步骤在 <code>hdfs</code> 账号下进行：</p></blockquote><h4 id="安装-wikixmlj"><a href="#安装-wikixmlj" class="headerlink" title="安装 wikixmlj"></a>安装 wikixmlj</h4><p>克隆项目：<a href="https://github.com/synhershko/wikixmlj">项目地址</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/synhershko/wikixmlj.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入项目目录进行 <code>mvn</code> 编译：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> wikixmljmvn package -Dmaven.test.skip<span class="token operator">=</span>truemvn <span class="token function">install</span> -Dmaven.test.skip<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安装-SparkBench-基准测试组件"><a href="#安装-SparkBench-基准测试组件" class="headerlink" title="安装 SparkBench 基准测试组件"></a>安装 SparkBench 基准测试组件</h4><blockquote><p>注： <code>ubuntu</code> 系统需要安装以下包:</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgfortran3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>克隆项目：<a href="https://github.com/SparkTC/spark-bench/tree/legacy">项目地址</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone -b legacy https://github.com/CODAIT/spark-bench.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入项目目录进行构建：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> spark-bench/./bin/build-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="单机环境安装方式"><a href="#单机环境安装方式" class="headerlink" title="单机环境安装方式"></a>单机环境安装方式</h4><p>在其他机器上执行上述两步，将两个文件拷贝到需要测试的机器上的 <code>hdfs</code> 账号下</p><blockquote><p>注：  <code>ubuntu</code> 系统需要安装额外包</p></blockquote><h3 id="根据实际环境配置测试环境"><a href="#根据实际环境配置测试环境" class="headerlink" title="根据实际环境配置测试环境"></a>根据实际环境配置测试环境</h3><blockquote><p>进入到 <code>spark-bench</code> 目录下修改 <code>conf</code> 目录下的 <code>env.sh</code></p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> spark-bench/vim conf/env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改基本环境"><a href="#修改基本环境" class="headerlink" title="修改基本环境"></a>修改基本环境</h4><blockquote><p>根据实际情况修改对应配置</p></blockquote><pre class="line-numbers language-text"><code class="language-text">master="<master_ip_address>"                   根据实际情况修改masterMC_LIST=""HADOOP_HOME=<HADOOP_HOME>                      根据实际情况修改HADOOP_HOMESPARK_HOME=<SPARK_HOME>                        根据实际情况修改SPARK_HOMEHDFS_URL="hdfs://${master}:9000"               根据实际情况修改端口号DATA_HDFS="hdfs://${master}:9000/SparkBench"   根据实际情况修改端口号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置-Spark-运行参数部分"><a href="#配置-Spark-运行参数部分" class="headerlink" title="配置 Spark 运行参数部分"></a>配置 Spark 运行参数部分</h4><blockquote><p>修改<code>conf</code>目录下的<code>env.sh</code></p></blockquote><pre class="line-numbers language-text"><code class="language-text">SPARK_EXECUTOR_MEMORY=4G                       根据实际情况修改export SPARK_DRIVER_MEMORY=4g                  根据实际情况修改export SPARK_EXECUTOR_INSTANCES=1              根据实际情况修改export SPARK_EXECUTOR_CORES=1                  根据实际情况修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行-Spark-Bench-测试"><a href="#运行-Spark-Bench-测试" class="headerlink" title="运行 Spark-Bench 测试"></a>运行 Spark-Bench 测试</h3><table><thead><tr><th align="center">测试案例</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">机器学习测试案例</td><td align="center">逻辑回归，支持向量机，矩阵分解</td></tr><tr><td align="center">图计算测试案例</td><td align="center">PageRank，SVD++，三角计数（Triangle Count）</td></tr><tr><td align="center">SQL查询测试案例</td><td align="center">Hive，RDDRelation</td></tr><tr><td align="center">流处理测试案例</td><td align="center">Twitter Tag ， Page View</td></tr><tr><td align="center">其他测试案例</td><td align="center">Kmeans，线性回归，决策树，最短路径，标签传播，连通图，强连通图</td></tr></tbody></table><h4 id="机器学习测试案例"><a href="#机器学习测试案例" class="headerlink" title="机器学习测试案例"></a>机器学习测试案例</h4><blockquote><p>进入到 <code>spark-bench</code> 目录下，在该目录下执行操作：</p></blockquote><table><thead><tr><th align="center">测试案例</th><th align="center">Workload</th></tr></thead><tbody><tr><td align="center">逻辑回归</td><td align="center">LogisticRegression</td></tr><tr><td align="center">支持向量机</td><td align="center">SVM</td></tr><tr><td align="center">矩阵分解</td><td align="center">MatrixFactorization</td></tr></tbody></table><p>步骤：</p><ol><li>修改配置参数</li><li>运行生成测试数据脚本</li><li>运行相应案例测试脚本</li></ol><h5 id="修改配置参数"><a href="#修改配置参数" class="headerlink" title="修改配置参数"></a>修改配置参数</h5><blockquote><p> <code>&lt;Workload&gt;</code> 根据测试案例表填写实际内容，下同:</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token operator">&lt;</span>Workload<span class="token operator">></span>/conf/env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行生成测试数据脚本"><a href="#运行生成测试数据脚本" class="headerlink" title="运行生成测试数据脚本"></a>运行生成测试数据脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/gen_data.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行相应案例测试脚本"><a href="#运行相应案例测试脚本" class="headerlink" title="运行相应案例测试脚本"></a>运行相应案例测试脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="图计算测试案例"><a href="#图计算测试案例" class="headerlink" title="图计算测试案例"></a>图计算测试案例</h4><blockquote><p>进入到 <code>spark-bench</code> 目录下，在该目录下执行操作：</p></blockquote><table><thead><tr><th align="center">测试案例</th><th align="center">Workload</th></tr></thead><tbody><tr><td align="center">网页排名</td><td align="center">PageRank</td></tr><tr><td align="center">SVD++</td><td align="center">SVDPlusPlus</td></tr><tr><td align="center">三角计数</td><td align="center">TriangleCount</td></tr></tbody></table><p>步骤：</p><ol><li>修改配置参数</li><li>运行生成测试数据脚本</li><li>运行相应案例测试脚本</li></ol><h5 id="修改配置参数-1"><a href="#修改配置参数-1" class="headerlink" title="修改配置参数"></a>修改配置参数</h5><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token operator">&lt;</span>Workload<span class="token operator">></span>/conf/env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行生成测试数据脚本-1"><a href="#运行生成测试数据脚本-1" class="headerlink" title="运行生成测试数据脚本"></a>运行生成测试数据脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/gen_data.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行相应案例测试脚本-1"><a href="#运行相应案例测试脚本-1" class="headerlink" title="运行相应案例测试脚本"></a>运行相应案例测试脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="SQL-查询测试案例"><a href="#SQL-查询测试案例" class="headerlink" title="SQL 查询测试案例"></a>SQL 查询测试案例</h4><blockquote><p>进入到 <code>spark-bench</code> 目录下，在该目录下执行操作：</p></blockquote><table><thead><tr><th align="center">测试案例</th><th align="center">Workload</th></tr></thead><tbody><tr><td align="center">SQL查询</td><td align="center">SQL</td></tr></tbody></table><p>步骤：</p><ol><li>修改配置参数</li><li>运行生成测试数据脚本</li><li>运行相应案例测试脚本</li></ol><h5 id="修改配置参数-2"><a href="#修改配置参数-2" class="headerlink" title="修改配置参数"></a>修改配置参数</h5><pre class="line-numbers language-bash"><code class="language-bash">vim /<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/conf/env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行生成测试数据脚本-2"><a href="#运行生成测试数据脚本-2" class="headerlink" title="运行生成测试数据脚本"></a>运行生成测试数据脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/gen_data.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行相应案例测试脚本-2"><a href="#运行相应案例测试脚本-2" class="headerlink" title="运行相应案例测试脚本"></a>运行相应案例测试脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在运行 SQL 查询案例时，默认是运行其中的 RDDRelation 案例，如果要想运行其中的 Hive 案例可以执行下面代码：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/run.sh hive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="流处理测试案例"><a href="#流处理测试案例" class="headerlink" title="流处理测试案例"></a>流处理测试案例</h4><blockquote><p>进入到 <code>spark-bench</code> 目录下，在该目录下执行操作：</p></blockquote><table><thead><tr><th align="center">测试案例</th><th align="center">Workload</th></tr></thead><tbody><tr><td align="center">流处理</td><td align="center">Streaming</td></tr></tbody></table><p>步骤：</p><ol><li>修改配置参数</li><li>首先在一个终端中执行生成随机数据</li><li>然后再另一个终端中执行</li></ol><h5 id="修改配置参数-3"><a href="#修改配置参数-3" class="headerlink" title="修改配置参数"></a>修改配置参数</h5><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token operator">&lt;</span>Workload<span class="token operator">></span>/conf/env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在运行流数据处理案例时，例如 TwitterTag，Streaming 逻辑回归</p></blockquote><h5 id="首先在一个终端中执行生成随机数据"><a href="#首先在一个终端中执行生成随机数据" class="headerlink" title="首先在一个终端中执行生成随机数据"></a>首先在一个终端中执行生成随机数据</h5><blockquote><p>在执行脚本时必须要指定你要运行案例名字的参数，如下：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/gen_data.sh TwitterPopularTags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="然后再另一个终端中执行"><a href="#然后再另一个终端中执行" class="headerlink" title="然后再另一个终端中执行"></a>然后再另一个终端中执行</h5><blockquote><p>在执行脚本时必须要指定你要运行案例名字的参数，如下：</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/run.sh TwitterPopularTags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>当然你也可以在 <code>&lt;Workload&gt;/conf/env.sh</code> 配置文件中指定你要运行的子案例的名称，通过修改 <code>subApp=TwitterPopularTags</code></p></blockquote><h4 id="其他测试案例"><a href="#其他测试案例" class="headerlink" title="其他测试案例"></a>其他测试案例</h4><blockquote><p>进入到 <code>spark-bench</code> 目录下，在该目录下执行操作：</p></blockquote><table><thead><tr><th align="center">测试案例</th><th align="center">Workload</th></tr></thead><tbody><tr><td align="center">Kmeans</td><td align="center">Kmeans</td></tr><tr><td align="center">线性回归</td><td align="center">LinearRegression</td></tr><tr><td align="center">决策树</td><td align="center">DecisionTree</td></tr><tr><td align="center">最短路径</td><td align="center">ShortestPaths</td></tr><tr><td align="center">标签传播</td><td align="center">LabelPropagation</td></tr><tr><td align="center">连通图</td><td align="center">ConnectedComponent</td></tr><tr><td align="center">强连通图</td><td align="center">StronglyConnectedComponent</td></tr><tr><td align="center">主成分分析</td><td align="center">PCA</td></tr></tbody></table><p>步骤：</p><ol><li>修改配置参数</li><li>运行生成测试数据脚本</li><li>运行相应案例测试脚本</li></ol><h5 id="修改配置参数-4"><a href="#修改配置参数-4" class="headerlink" title="修改配置参数"></a>修改配置参数</h5><pre class="line-numbers language-bash"><code class="language-bash">vim <span class="token operator">&lt;</span>Workload<span class="token operator">></span>/conf/env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行生成测试数据脚本-3"><a href="#运行生成测试数据脚本-3" class="headerlink" title="运行生成测试数据脚本"></a>运行生成测试数据脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/gen_data.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="运行相应案例测试脚本-3"><a href="#运行相应案例测试脚本-3" class="headerlink" title="运行相应案例测试脚本"></a>运行相应案例测试脚本</h5><pre class="line-numbers language-bash"><code class="language-bash">./<span class="token operator">&lt;</span>Workload<span class="token operator">></span>/bin/run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看测试结果"><a href="#查看测试结果" class="headerlink" title="查看测试结果"></a>查看测试结果</h3><p>在 <code>spark-bench</code> 目录下的 <code>num</code> 目录下可以查看到运行结果。</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><p><a href="https://github.com/CODAIT/spark-bench/tree/legacy">开源项目官网</a> : <a href="https://github.com/CODAIT/spark-bench/tree/legacy">https://github.com/CODAIT/spark-bench/tree/legacy</a></p><p><a href="https://blog.csdn.net/xfg0218/article/details/79250019">安装文档</a> : <a href="https://blog.csdn.net/xfg0218/article/details/79250019">https://blog.csdn.net/xfg0218/article/details/79250019</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Apache </tag>
            
            <tag> 测试文档 </tag>
            
            <tag> 计算引擎 </tag>
            
            <tag> Spark-Bench </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark 安装教程</title>
      <link href="/posts/45358.html"/>
      <url>/posts/45358.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spark-安装"><a href="#Spark-安装" class="headerlink" title="Spark 安装"></a>Spark 安装</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul><li>Fedora 29</li><li>openjdk version “1.8.0_191”</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>下载 <code>Spark</code> 安装包</li><li>解压 <code>Spark</code> 安装包 <code>/opt/spark</code> 目录</li><li>修改 <code>Spark</code> 配置</li><li>修改 <code>PySpark</code> 配置</li></ol><h3 id="下载-Spark-安装包"><a href="#下载-Spark-安装包" class="headerlink" title="下载 Spark 安装包"></a>下载 Spark 安装包</h3><p>下载地址：<code>http://spark.apache.org/downloads.html</code></p><h3 id="解压-Spark-安装包-opt-spark-目录"><a href="#解压-Spark-安装包-opt-spark-目录" class="headerlink" title="解压 Spark 安装包 /opt/spark 目录"></a>解压 Spark 安装包 /opt/spark 目录</h3><h5 id="创建-opt-spark-目录"><a href="#创建-opt-spark-目录" class="headerlink" title="创建 /opt/spark 目录"></a>创建 /opt/spark 目录</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /opt/spark<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解压到-opt-spark-目录"><a href="#解压到-opt-spark-目录" class="headerlink" title="解压到 /opt/spark 目录"></a>解压到 /opt/spark 目录</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /opt<span class="token function">sudo</span> <span class="token function">tar</span> -zxvf ~/Downloads/spark-2.3.0-bin-hadoop2.7.tgz<span class="token function">sudo</span> <span class="token function">mv</span> /opt/spark-2.3.0-bin-hadoop2.7 /opt/spark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改-Spark-配置"><a href="#修改-Spark-配置" class="headerlink" title="修改 Spark 配置"></a>修改 Spark 配置</h3><h4 id="修改-Spark-环境变量"><a href="#修改-Spark-环境变量" class="headerlink" title="修改 Spark 环境变量"></a>修改 Spark 环境变量</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改内容</p></blockquote><pre class="line-numbers language-text"><code class="language-text">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64export SPARK_HOME=/opt/sparkexport PATH=$SPARK_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装-PySpark"><a href="#安装-PySpark" class="headerlink" title="安装 PySpark"></a>安装 PySpark</h3><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> pyspark<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改-PySpark-配置"><a href="#修改-PySpark-配置" class="headerlink" title="修改 PySpark 配置"></a>修改 PySpark 配置</h3><h5 id="修改-PySpark-环境变量"><a href="#修改-PySpark-环境变量" class="headerlink" title="修改 PySpark 环境变量"></a>修改 PySpark 环境变量</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> vim ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改内容</p></blockquote><pre class="line-numbers language-text"><code class="language-text">export PYSPARK_PYTHON=python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="使环境变量生效-1"><a href="#使环境变量生效-1" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> Spark </tag>
            
            <tag> Apache </tag>
            
            <tag> 计算引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 三剑客（三）：Docker-Compose 创建容器</title>
      <link href="/posts/23955.html"/>
      <url>/posts/23955.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-compose（创建容器）"><a href="#Docker-compose（创建容器）" class="headerlink" title="Docker-compose（创建容器）"></a>Docker-compose（创建容器）</h1><p><strong>样例</strong></p><pre><code>version: "2"services:  spark-dashboard:    build:      context: .    container_name: spark-dashboard    image: docker.io/sitoi/spark-dashboard    environment:      - SPARK_TYPE=master    ports:      - 5000:5000  redis:    image: docker.io/redis:4    ports:      - '6379:6379'    volumes:      - ./db/redis:/data    command: &gt;      --requirepass password  neo4j:    image: docker.io/neo4j:3.3    ports:     - "7474:7474"     - "7687:7687"    volumes:    - ./db/neo4j:/data/</code></pre><h2 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h2><p>大多数 <code>Compose</code> 命令都是运行于一个或多个服务的，如果服务没有指定，该命令将会应用到所有服务，<br>如果要获得所有可用信息，使用命令：docker-compose [COMMAND] –help，下面是命令（COMMAND）的说明：</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>创建或者再建服务</p><p>服务被创建后会标记为 <code>project_service</code> (比如 <code>composetest_db</code>)，<br>如果改变了一个服务的 Dockerfile 或者构建目录的内容，可以使用 <code>docker-compose build</code> 来重建它</p><h3 id="help"><a href="#help" class="headerlink" title="help"></a>help</h3><p>显示命令的帮助和使用信息</p><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>通过发送 <code>SIGKILL</code> 的信号强制停止运行的容器，这个信号可以选择性的通过，比如：</p><pre class="line-numbers language-bash"><code class="language-bash">docker-compose <span class="token function">kill</span> -s SIGKINT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h3><p>显示服务的日志输出</p><h3 id="port"><a href="#port" class="headerlink" title="port"></a>port</h3><p>为端口绑定输出公共信息</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>显示容器</p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>拉取服务镜像</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>删除停止的容器</p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>在服务上运行一个一次性命令，比如：</p><p><code>docker-compose run web python manage.py shell</code></p><h3 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h3><p>设置为一个服务启动的容器数量，数量是以这样的参数形式指定的：<code>service=num</code>，比如：</p><p><code>docker-compose scale web=2 worker=3</code></p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>启动已经存在的容器作为一个服务</p><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><p>停止运行的容器而不删除它们，它们可以使用命令<code>docker-compose start</code>重新启动起来</p><h3 id="up"><a href="#up" class="headerlink" title="up"></a>up</h3><p>为一个服务构建、创建、启动、附加到容器</p><p>连接的服务会被启动，除非它们已经在运行了</p><p>默认情况下，<code>docker-compose up</code> 会集中每个容器的输出，当存在时，所有的容器会停止，运行 <code>docker-compose up -d</code> 会在后台启动容器并使它们运行</p><p>默认情况下，如果服务存在容器的话，<code>docker-compose up</code> 会停止并再创建它们（使用了 <code>volumes-from</code> 会保留已挂载的卷），<br>如果不想使容器停止并再创建的话，使用<code>docker-compose up --no-recreate</code>，如果有需要的话，这会启动任何停止的容器</p><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><h4 id="–verbose"><a href="#–verbose" class="headerlink" title="–verbose"></a>–verbose</h4><p>显示更多输出</p><h4 id="–version"><a href="#–version" class="headerlink" title="–version"></a>–version</h4><p>显示版本号并退出</p><h4 id="f-–file-FILE"><a href="#f-–file-FILE" class="headerlink" title="-f,–file FILE"></a>-f,–file FILE</h4><p>指定一个可选的 <code>Compose yaml</code> 文件（默认：<code>docker-compose.yml</code>）</p><h4 id="p-–project-name-NAME"><a href="#p-–project-name-NAME" class="headerlink" title="-p,–project-name NAME"></a>-p,–project-name NAME</h4><p>指定可选的项目名称（默认：当前目录名称）</p><h2 id="docker-compose-yaml-文件说明"><a href="#docker-compose-yaml-文件说明" class="headerlink" title="docker-compose.yaml 文件说明"></a>docker-compose.yaml 文件说明</h2><p>每一个定义在 <code>docker-compose.yml</code> 中的服务必须明确指定一个 <code>image</code> 或者 <code>build</code> 选项，<br>这与 <code>docker run</code> 命令行中输入的是对应相同的，对于<code>docker run</code>，<br>在 <code>Dockerfile</code> 文件中指定的选项（比如 <code>CMD</code>、<code>EXPOSE</code>、<code>VOLUME</code>、<code>ENV</code>）是默认的，因此不必在 <code>docker-compose.yml</code> 中再指定一次</p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>标明 image 的 ID，这个 image ID 可以是本地也可以是远程的，如果本地不存在，Compose 会尝试去 <code>pull</code> 下来</p><pre><code>image: ubuntuimage: orchardup/postgresqlimage: a4bc65fd</code></pre><h3 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h3><p>该参数指定 <code>Dockerfile</code> 文件的路径，该目录也是发送到守护进程的构建环境（这句有点），Compose 将会以一个已存在的名称进行构建并标记，并随后使用这个 image</p><pre><code>build: /path/to/build/dir</code></pre><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>覆盖容器启动后默认执行的命令</p><pre><code>command: bundle exec thin -p 3000</code></pre><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p>连接到其他服务中的容器，可以指定服务名称和这个链接的别名，或者只指定服务名称</p><pre><code>links: - db - db:database - redis</code></pre><p>此时，在容器内部，会在 /etc/hosts 文件中用别名创建一个条目，就像这样：</p><pre><code>172.17.2.186  db172.17.2.186  database172.17.2.186  redis</code></pre><p>环境变量也会被创建，关于环境变量的参数，会在后面讲到</p><h3 id="external-links"><a href="#external-links" class="headerlink" title="external_links"></a>external_links</h3><p>连接到在这个 docker-compose.yml 文件或者 Compose 外部启动的容器，特别是对于提供共享和公共服务的容器。<br>在指定容器名称和别名时，<code>external_links</code> 遵循着和 <code>links</code> 相同的语义用法</p><pre><code>external_links: - redis_1 - project_db_1:mysql - project_db_1:postgresql</code></pre><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><p>暴露端口信息。</p><p>使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><pre><code>ports: - "3000" - "8000:8000" - "49100:22" - "127.0.0.1:8001:8001"</code></pre><p>注：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，<br>因为 YAML 将会解析 <code>xx:yy</code> 这种数字格式为 60 进制。所以建议采用字符串格式。</p><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h3><p>暴露端口而不必向主机发布它们，而只是会向链接的服务 <code>linked service</code> 提供，只有内部端口可以被指定</p><pre><code>expose: - "3000" - "8000"</code></pre><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><p>挂载路径最为卷，可以选择性的指定一个主机上的路径（<code>主机：容器</code>），或是一种可使用的模式（<code>主机：容器：ro</code>）</p><pre><code>volumes: - /var/lib/mysql - cache/:/tmp/cache - ~/configs:/etc/configs/:ro</code></pre><h3 id="volumes-from"><a href="#volumes-from" class="headerlink" title="volumes_from"></a>volumes_from</h3><p>从另一个服务或容器挂载它的所有卷。</p><pre><code>volumes_from: - service_name - container_name</code></pre><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>加入环境变量，可以使用数组或者字典，只有一个 key 的环境变量可以在运行 Compose 的机器上找到对应的值，这有助于加密的或者特殊主机的值</p><pre><code>environment:  RACK_ENV: development  SESSION_SECRET:environments:  - RACK_ENV=development  - SESSION_SECRET</code></pre><h3 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 指定了模板文件，则 <code>env_file</code> 中路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则以后者为准。</p><pre><code>env_file:  - .envRACK_ENV: development</code></pre><h3 id="net"><a href="#net" class="headerlink" title="net"></a>net</h3><p>网络模式，可以在<code>docker客户端</code>的<code>--net</code>参数中指定这些值</p><pre><code>net: "bridge"net: "none"net: "container:[name or id]"net: "host"</code></pre><h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h3><p>自定义DNS服务，可以是一个单独的值或者一张列表</p><pre><code>dns: 8.8.8.8dns:  - 8.8.8.8  - 9.9.9.9</code></pre><h3 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add,cap_drop"></a>cap_add,cap_drop</h3><p>加入或者去掉容器能力，查看<code>man 7 capabilities</code> 可以有一张完整的列表</p><pre><code>cap_add:  - ALLcap_drop:  - NET_ADMIN  - SYS_ADMIN</code></pre><h3 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a>dns_search</h3><p>自定义DNS搜索范围，可以是单独的值或者一张列表</p><pre><code>dns_search: example.comdns_search:  - dc1.example.com  - dc2.example.com</code></pre><h3 id="working-dir-entrypoint-user-hostname-domainname-mem-limit-privileged-restart-stdin-open-tty-cpu-shares"><a href="#working-dir-entrypoint-user-hostname-domainname-mem-limit-privileged-restart-stdin-open-tty-cpu-shares" class="headerlink" title="working_dir,entrypoint,user,hostname,domainname,mem_limit,privileged,restart,stdin_open,tty,cpu_shares"></a>working_dir,entrypoint,user,hostname,domainname,mem_limit,privileged,restart,stdin_open,tty,cpu_shares</h3><p>上述的每一个都只是一个单独的值，和docker run中对应的参数是一样的</p><pre><code>cpu_shares: 73working_dir: /codeentrypoint: /code/entrypoint.shuser: postgresqlhostname: foodomainname: foo.commem_limit: 1000000000privileged: truerestart: alwaysstdin_open: truetty: true</code></pre><h2 id="Compose-环境变量说明"><a href="#Compose-环境变量说明" class="headerlink" title="Compose 环境变量说明"></a>Compose 环境变量说明</h2><p>环境变量已经不再是用来连接服务的推荐方法了，相反，应该使用链接名称（默认情况下是链接服务的名称）作为主机名称来连接，这可以查看 docker-compose.yaml 的更多细节<br>Compose 使用 Docker links 来暴露服务的容器给其他的。每一个链接的容器都使用了一组环境变量，这每一组环境变量都是以容器名称的大写字母开头的<br>要查看服务可用的环境变量，运行 docker-compose run SERVICE env</p><h3 id="name-PORT"><a href="#name-PORT" class="headerlink" title="name_PORT"></a>name_PORT</h3><p>完整URL，如：</p><pre><code>DB_PORT=tcp//172.17.0.5:5432</code></pre><h3 id="name-PORT-num-protocol"><a href="#name-PORT-num-protocol" class="headerlink" title="name_PORT_num_protocol"></a>name_PORT_num_protocol</h3><p>完整URL，如：</p><pre><code>DB_PORT_5432_TCP=tcp://172.17.0.5:5432</code></pre><h3 id="name-PORT-num-protocol-ADDR"><a href="#name-PORT-num-protocol-ADDR" class="headerlink" title="name_PORT_num_protocol_ADDR"></a>name_PORT_num_protocol_ADDR</h3><p>容器的IP地址，如：</p><pre><code>DB_PORT_5432_TCP_ADDR=172.17.0.5</code></pre><h3 id="name-PORT-num-protocol-PORT"><a href="#name-PORT-num-protocol-PORT" class="headerlink" title="name_PORT_num_protocol_PORT"></a>name_PORT_num_protocol_PORT</h3><p>暴露的端口号，如：</p><pre><code>DB_PORT_5432_TCP_PORT=5432</code></pre><h3 id="name-PORT-num-protocol-PROTO"><a href="#name-PORT-num-protocol-PROTO" class="headerlink" title="name_PORT_num_protocol_PROTO"></a>name_PORT_num_protocol_PROTO</h3><p>协议(tcp或者udp)，如：</p><pre><code>DB_PORT_5432_TCP_PROTO=tcp</code></pre><h3 id="name-NAME"><a href="#name-NAME" class="headerlink" title="name_NAME"></a>name_NAME</h3><p>完全合格的容器名称，如：</p><pre><code>DB_1_NAME=/myapp_web_1/myapp_db_1</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Docker-Compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 三剑客（二）：Dockerfile 创建镜像教程</title>
      <link href="/posts/43818.html"/>
      <url>/posts/43818.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile（从无到有创建镜像）"><a href="#Dockerfile（从无到有创建镜像）" class="headerlink" title="Dockerfile（从无到有创建镜像）"></a>Dockerfile（从无到有创建镜像）</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>DockerFile 分为四部分组成：</p><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="基础镜像信息"><a href="#基础镜像信息" class="headerlink" title="基础镜像信息"></a>基础镜像信息</h3><p>第一行必须指定基于的基础镜像</p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM alpine:3.8-python-3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="维护者信息"><a href="#维护者信息" class="headerlink" title="维护者信息"></a>维护者信息</h3><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">MAINTAINER Shi Tao <shitao0418@gamil.com><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="镜像操作指令"><a href="#镜像操作指令" class="headerlink" title="镜像操作指令"></a>镜像操作指令</h3><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">WORKDIR /opt/appENV HOME /opt/appADD . /opt/appRUN pip3.6 install -r requirements.txt --upgrade -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simpleEXPOSE 8000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="容器启动时执行指令"><a href="#容器启动时执行指令" class="headerlink" title="容器启动时执行指令"></a>容器启动时执行指令</h3><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">ENTRYPOINT ["gunicorn"]CMD ["-b 0.0.0.0:8000", "application:app"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="From-指令"><a href="#From-指令" class="headerlink" title="From 指令"></a>From 指令</h3><p>格式为 <code>From</code> 或者 <code>From:</code></p><p>DockerFile 第一条必须为 <code>From</code> 指令。如果同一个 DockerFile 创建多个镜像时，可使用多个 <code>From</code> 指令（每个镜像一次）</p><p><strong>样例</strong></p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM alpine:3.8-python-3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>格式为 <code>MAINTAINER</code>，指定维护者的信息</p><p><strong>样例</strong></p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">MAINTAINER Shi Tao <shitao0418@gmail.com><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>格式为 <code>WORKDIR /path/to/workdir</code> 。</p><p>为后续的 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 指令配置工作目录。</p><p>可以使用多个 <code>WORKDIR</code> 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。</p><p><strong>样例</strong></p><pre><code>WORKDIR /aWORKDIR bWORKDIR c</code></pre><p><code>RUN pwd</code></p><p>则最终路径为 <code>/a/b/c</code>。</p><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>格式为 <code>ENV</code> 。 指定一个环境变量，会被后续 <code>RUN</code> 指令使用，并在容器运行时保持。</p><p><strong>样例</strong></p><pre><code>ENV HOME /appENV LOGNAME=rootENV USER=root</code></pre><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>格式为 <code>RUN</code> 在 shell 终端上运行，即 /bin/sh -C</p><p>每条 <code>RUN</code> 指令在当前基础镜像执行，并且提交新镜像。当命令比较长时，可以使用 / 换行。</p><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>格式为 <code>ADD</code>。</p><p>该命令将复制指定的 到容器中的 。 其中可以是 Dockerfile 所在目录的一个相对路径；也可以是一个 URL；还可以是一个 tar文件（自动解压为目录）</p><p><strong>样例</strong></p><pre><code>ADD . /app/</code></pre><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>格式为 <code>COPY</code> 。</p><p>复制本地主机的 （为 Dockerfile 所在目录的相对路径）到容器中的 。</p><p>当使用本地目录为源目录时，推荐使用 <code>COPY</code>。</p><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>格式为 <code>VOLUME ["/data"]</code> 。</p><p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p><h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>格式为 <code>USER daemon</code>。</p><p>指定运行容器时的用户名或 UID，后续的 <code>RUN</code> 也会使用指定用户。</p><p>当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户。</p><p><strong>样例</strong></p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">RUN groupadd -r postgres && useradd -r -g postgres postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要临时获取管理员权限可以使用 gosu，而不推荐 sudo。</p><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><p>格式为 <code>ONBUILD [INSTRUCTION]</code></p><p>配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。</p><p>例如，Dockerfile 使用如下的内容创建了镜像 image-A。</p><pre><code>[…]ONBUILD ADD . /app/srcONBUILD RUN /usr/local/bin/python-build –dir /app/src[…]</code></pre><p>如果基于 A 创建新的镜像时，新的 Dockerfile 中使用 <code>FROM image-A</code> 指定基础镜像时，会自动执行 <code>ONBUILD</code> 指令内容，等价于在后面添加了两条指令。</p><pre><code>FROM image-A#Automatically run the followingADD . /app/srcRUN /usr/local/bin/python-build --dir /app/src</code></pre><p>使用 <code>ONBUILD</code> 指令的镜像，推荐在标签中注明，例如 ruby:1.9-onbuild。</p><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>格式为 <code>EXPOSE […]</code></p><p>告诉 Docker 服务端容器暴露的端口号，供互联系统使用。在启动 Docker 时，可以通过 -P,主机会自动分配一个端口号转发到指定的端口。使用 -P，则可以具体指定哪个本地端口映射过来</p><p><strong>样例</strong></p><p><code>EXPOSE 80</code></p><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>两种格式：</p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">ENTRYPOINT ["executable", "param1", "param2"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">ENTRYPOINT command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置容器启动后执行的命令，并且不可被 <code>docker run</code> 提供的参数覆盖。</p><p>每个 Dockerfile 中只能有一个 <code>ENTRYPOINT</code>，当指定多个时，只有最后一个起效。</p><h3 id="CMD-指令"><a href="#CMD-指令" class="headerlink" title="CMD 指令"></a>CMD 指令</h3><p>支持三种格式：</p><p>使用 exec 执行，<strong>推荐</strong></p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">CMD ["executable" ,"Param1", "param2"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 /bin/sh 上执行</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">CMD command param1 param2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提供给 <code>ENTRYPOINT</code> 做默认参数</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">CMD ["Param1", "param2"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个容器只能执行一条 <code>CMD</code> 命令，多个 <code>CMD</code> 命令时，只最后一条被执行。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 三剑客（一）：Docker 常用命令</title>
      <link href="/posts/51856.html"/>
      <url>/posts/51856.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-目录"><a href="#Docker-目录" class="headerlink" title="Docker 目录"></a>Docker 目录</h1><h2 id="资源汇总"><a href="#资源汇总" class="headerlink" title="资源汇总"></a>资源汇总</h2><table><thead><tr><th align="center">类型</th><th align="center">名称</th><th align="center">地址</th></tr></thead><tbody><tr><td align="center">官方网站</td><td align="center">docker 官网</td><td align="center"><a href="http://www.docker.com">http://www.docker.com</a></td></tr><tr><td align="center">官方教程</td><td align="center">Docker windows 入门</td><td align="center"><a href="https://docs.docker.com/windows">https://docs.docker.com/windows</a></td></tr><tr><td align="center">官方教程</td><td align="center">Docker Linux 入门</td><td align="center"><a href="https://docs.docker.com/linux">https://docs.docker.com/linux</a></td></tr><tr><td align="center">官方教程</td><td align="center">Docker mac 入门</td><td align="center"><a href="https://docs.docker.com/mac">https://docs.docker.com/mac</a></td></tr><tr><td align="center">官方教程</td><td align="center">Docker 用户指引</td><td align="center"><a href="https://docs.docker.com/engine/userguide">https://docs.docker.com/engine/userguide</a></td></tr><tr><td align="center">官方博客</td><td align="center">Docker 官方博客</td><td align="center"><a href="http://blog.docker.com">http://blog.docker.com</a></td></tr><tr><td align="center">官方镜像</td><td align="center">Docker Hub</td><td align="center"><a href="https://hub.docker.com">https://hub.docker.com</a></td></tr><tr><td align="center">官方开源</td><td align="center">Docker 开源</td><td align="center"><a href="https://www.docker.com/open-source">https://www.docker.com/open-source</a></td></tr><tr><td align="center">中文资源</td><td align="center">Docker 中文网站</td><td align="center"><a href="https://www.docker-cn.com">https://www.docker-cn.com</a></td></tr><tr><td align="center">中文资源</td><td align="center">Docker 安装手册</td><td align="center"><a href="https://docs.docker-cn.com/engine/installation">https://docs.docker-cn.com/engine/installation</a></td></tr><tr><td align="center">国内镜像</td><td align="center">网易加速器</td><td align="center"><a href="http://hub-mirror.c.163.com">http://hub-mirror.c.163.com</a></td></tr><tr><td align="center">国内镜像</td><td align="center">官方中国加速器</td><td align="center"><a href="https://registry.docker-cn.com">https://registry.docker-cn.com</a></td></tr><tr><td align="center">国内镜像</td><td align="center">ustc的镜像</td><td align="center"><a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td align="center">国内镜像</td><td align="center">daocloud</td><td align="center"><a href="https://www.daocloud.io/mirror">https://www.daocloud.io/mirror</a></td></tr></tbody></table><h2 id="Docker-常用命令"><a href="#Docker-常用命令" class="headerlink" title="Docker 常用命令"></a>Docker 常用命令</h2><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>显示 Docker 系统信息，包括镜像和容器数</p><pre class="line-numbers language-bash"><code class="language-bash">docker info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>显示 Docker 版本信息</p><pre class="line-numbers language-bash"><code class="language-bash">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><p>从Docker Hub查找镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker search <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> TERM<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>--automated</code></td><td align="left">只列出 automated build类型的镜像</td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left">显示完整的镜像描述</td></tr><tr><td align="left"><code>-s</code></td><td align="left">列出收藏数不小于指定值的镜像</td></tr></tbody></table><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker search mssql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="login"><a href="#login" class="headerlink" title="login"></a>login</h4><p>登陆到一个 Docker 镜像仓库</p><pre class="line-numbers language-bash"><code class="language-bash">docker login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker login -u 用户名 -p 密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h4><p>登出一个 Docker 镜像仓库</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">logout</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h4><p>从镜像仓库中拉取或者更新指定镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-a</code></td><td align="left">拉取所有 tagged 镜像</td></tr><tr><td align="left"><code>--disable-content-trust</code></td><td align="left">忽略镜像的校验,默认开启</td></tr></tbody></table><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker pull hub.c.163.com/library/mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull NAME<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker push myapache:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="本地镜像管理"><a href="#本地镜像管理" class="headerlink" title="本地镜像管理"></a>本地镜像管理</h3><h4 id="images"><a href="#images" class="headerlink" title="images"></a>images</h4><p>列出本地镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker images <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-a</code></td><td align="left">列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）</td></tr><tr><td align="left"><code>--digests</code></td><td align="left">显示镜像的摘要信息</td></tr><tr><td align="left"><code>-f</code></td><td align="left">显示满足条件的镜像</td></tr><tr><td align="left"><code>--format</code></td><td align="left">指定返回值的模板文件</td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left">显示完整的镜像信息</td></tr><tr><td align="left"><code>-q</code></td><td align="left">只显示镜像ID</td></tr></tbody></table><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker images -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">REPOSITORY</th><th align="center">TAG</th><th align="center">IMAGE ID</th><th align="center">CREATED</th><th align="center">SIZE</th></tr></thead><tbody><tr><td align="center">hub.c.163.com/library/mysql</td><td align="center">latest</td><td align="center">9e64176cd8a2</td><td align="center">9 months ago</td><td align="center">407 MB</td></tr></tbody></table><blockquote><p>各个项目说明：</p></blockquote><table><thead><tr><th align="left">项目</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>REPOSITORY</code></td><td align="left">表示镜像的仓库源</td></tr><tr><td align="left"><code>TAG</code></td><td align="left">镜像的标签</td></tr><tr><td align="left"><code>IMAGE ID</code></td><td align="left">镜像ID</td></tr><tr><td align="left"><code>CREATED</code></td><td align="left">镜像创建时间</td></tr><tr><td align="left"><code>SIZE</code></td><td align="left">镜像大小</td></tr></tbody></table><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如 ubuntu 仓库源里，有 15.10、14.04 等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像<br>所以，我们如果要使用版本为 15.10 的 ubuntu 系统镜像来运行容器时，命令如下：<code>docker run -it ubuntu:15.10 /bin/bash</code><br>如果要使用版本为 14.04 的 ubuntu 系统镜像来运行容器时，命令如下：<code>docker run -it ubuntu:14.04 /bin/bash</code></p><h4 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h4><p>删除本地一个或多少镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">强制删除</td></tr><tr><td align="left"><code>--no-prune</code></td><td align="left">不移除该镜像的过程镜像，默认移除</td></tr></tbody></table><p>删除单个镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi 9e6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除 id 为 none 的镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token punctuation">$(</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^&lt;none>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">"{print <span class="token variable">$3</span>}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制删除id为 none 的镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi -f <span class="token punctuation">$(</span>docker images <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^&lt;none>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">"{print <span class="token variable">$3</span>}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除全部镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi <span class="token variable"><span class="token variable">$(</span>docker images -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制删除全部镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi -f <span class="token variable"><span class="token variable">$(</span>docker images -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><p>使用Dockerfile创建镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker build <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> PATH <span class="token operator">|</span> URL <span class="token operator">|</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>--build-arg=[]</code></td><td align="left">设置镜像创建时的变量</td></tr><tr><td align="left"><code>--cpu-shares</code></td><td align="left">设置 CPU 使用权重</td></tr><tr><td align="left"><code>--cpu-period</code></td><td align="left">限制 CPU CFS 周期</td></tr><tr><td align="left"><code>--cpu-quota</code></td><td align="left">限制 CPU CFS 配额</td></tr><tr><td align="left"><code>--cpuset-cpus</code></td><td align="left">指定使用的 CPU id</td></tr><tr><td align="left"><code>--cpuset-mems</code></td><td align="left">指定使用的内存 id</td></tr><tr><td align="left"><code>--disable-content-trust</code></td><td align="left">忽略校验，默认开启</td></tr><tr><td align="left"><code>-f</code></td><td align="left">指定要使用的 Dockerfile 路径</td></tr><tr><td align="left"><code>--force-rm</code></td><td align="left">设置镜像过程中删除中间容器</td></tr><tr><td align="left"><code>--isolation</code></td><td align="left">使用容器隔离技术</td></tr><tr><td align="left"><code>--label=[]</code></td><td align="left">设置镜像使用的元数据</td></tr><tr><td align="left"><code>-m</code></td><td align="left">设置内存最大值</td></tr><tr><td align="left"><code>--memory-swap</code></td><td align="left">设置 Swap 的最大值为内存 +swap，”-1”表示不限 swap</td></tr><tr><td align="left"><code>--no-cache</code></td><td align="left">创建镜像的过程不使用缓存</td></tr><tr><td align="left"><code>--pull</code></td><td align="left">尝试去更新镜像的新版本</td></tr><tr><td align="left"><code>-q</code></td><td align="left">安静模式，成功后只输出镜像 ID</td></tr><tr><td align="left"><code>--rm</code></td><td align="left">设置镜像成功后删除中间容器</td></tr><tr><td align="left"><code>--shm-size</code></td><td align="left">设置 /dev/shm 的大小，默认值是 64M</td></tr><tr><td align="left"><code>--ulimit</code></td><td align="left">Ulimit 配置</td></tr></tbody></table><p><strong>样例</strong></p><p>从已经创建的容器中更新镜像，并且提交这个镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker commit -m<span class="token operator">=</span><span class="token string">"has update"</span> -a<span class="token operator">=</span><span class="token string">"shitao"</span> ede0be5f1842 mysql:v2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-m</code></td><td align="left">提交的描述信息</td></tr><tr><td align="left"><code>-a</code></td><td align="left">指定镜像作者</td></tr><tr><td align="left"><code>ede0be5f1842</code></td><td align="left">容器 ID (通过<code>docker ps -a</code>查看)</td></tr><tr><td align="left"><code>mysql:v2</code></td><td align="left"><code>mysql</code> 镜像的仓库源名 <code>v2</code> 镜像的标签</td></tr></tbody></table><p><strong>样例</strong></p><p>使用 Dockerfile 指令来创建一个新的镜像</p><p>我们使用命令 <code>docker build</code>，从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p><pre class="line-numbers language-bash"><code class="language-bash">docker build -t imagesname:2.0 /home/shitao/file/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-t</code></td><td align="left">指定要创建的目标镜像名</td></tr><tr><td align="left"><code>imagesname:2.0</code></td><td align="left"><code>imagesname</code> 镜像的仓库源名 <code>2.0</code> 镜像的标签</td></tr><tr><td align="left"><code>/home/shitao/file/</code></td><td align="left">dockerfile 路径</td></tr></tbody></table><h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><p>标记本地镜像，将其归入某一仓库</p><pre class="line-numbers language-bash"><code class="language-bash">docker tag 9e64176cd8a2 mysql163:2.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>9e64176cd8a2</code></td><td align="left">镜像 id (镜像名)</td></tr><tr><td align="left"><code>mysql163:2.0.1</code></td><td align="left"><code>mysql163</code> 镜像的仓库源名 <code>2.0.1</code> 镜像的标签</td></tr></tbody></table><p>使用 <code>docker images</code> 命令可以看到，ID为 <code>9e64176cd8a2</code> 的镜像多个标签</p><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>将指定镜像保存成 tar 归档文件</p><pre class="line-numbers language-bash"><code class="language-bash">docker save -o /home/shitao/Downloads/mysql.tar 9e64176cd8a2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>9e64176cd8a2</code></td><td align="left">镜像 id (镜像名)</td></tr><tr><td align="left"><code>/home/shitao/Downloads/mysql.tar</code></td><td align="left">保存的地址</td></tr></tbody></table><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>从归档文件中创建镜像</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">import</span> /home/shitao/Downloads/mysql.tar mysql:0.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>mysql:0.2</code></td><td align="left"><code>mysql</code> 镜像的仓库源名 <code>0.2</code> 镜像的标签</td></tr><tr><td align="left"><code>/home/shitao/Downloads/mysql.tar</code></td><td align="left">归档文件地址</td></tr></tbody></table><h4 id="inspect"><a href="#inspect" class="headerlink" title="inspect"></a>inspect</h4><p>获取容器/镜像的元数据</p><pre class="line-numbers language-bash"><code class="language-bash">docker inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token operator">|</span>ID <span class="token punctuation">[</span>NAME<span class="token operator">|</span>ID<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">指定返回值的模板文件</td></tr><tr><td align="left"><code>-s</code></td><td align="left">显示总的文件大小</td></tr><tr><td align="left"><code>--type</code></td><td align="left">为指定类型返回JSON</td></tr></tbody></table><p><strong>样例</strong></p><p><code>docker inspect 9e6</code></p><h3 id="容器生命周期管理"><a href="#容器生命周期管理" class="headerlink" title="容器生命周期管理"></a>容器生命周期管理</h3><h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><p><code>docker run -it hub.c.163.com/library/mysql /bin/bash</code></p><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-i</code></td><td align="left">以交互模式运行容器，通常与 <code>-t</code> 同时使用</td></tr><tr><td align="left"><code>-t</code></td><td align="left">为容器重新分配一个伪输入终端，通常与 <code>-i</code> 同时使用</td></tr><tr><td align="left"><code>hub.c.163.com/library/mysql</code></td><td align="left">镜像名</td></tr><tr><td align="left"><code>-P</code></td><td align="left">将容器内部使用的网络端口映射到我们使用的主机上</td></tr><tr><td align="left"><code>-d</code></td><td align="left">后台运行容器，并返回容器ID</td></tr></tbody></table><h4 id="start"><a href="#start" class="headerlink" title="start"></a>start</h4><p>启动一个或多少已经被停止的容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker start <span class="token punctuation">{</span>容器ID<span class="token operator">|</span>容器名称<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h4><p>停止一个运行中的容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker stop <span class="token punctuation">{</span>容器ID<span class="token operator">|</span>容器名称<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h4><p>重启容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker restart <span class="token punctuation">{</span>容器ID<span class="token operator">|</span>容器名称<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>杀掉一个运行中的容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">kill</span> <span class="token punctuation">{</span>容器ID<span class="token operator">|</span>容器名称<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>删除一个或多少容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">通过 SIGKILL 信号强制删除一个运行中的容器</td></tr><tr><td align="left"><code>-l</code></td><td align="left">移除容器间的网络连接，而非容器本身</td></tr><tr><td align="left"><code>-v</code></td><td align="left">删除与容器关联的卷</td></tr></tbody></table><p>删除指定容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token punctuation">{</span>容器ID<span class="token operator">|</span>容器名称<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所有容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -a -q<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><p>在运行的容器中执行命令</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER COMMAND <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-d</code></td><td align="left">分离模式: 在后台运行</td></tr><tr><td align="left"><code>-i</code></td><td align="left">即使没有附加也保持 STDIN 打开</td></tr><tr><td align="left"><code>-t</code></td><td align="left">分配一个伪终端</td></tr></tbody></table><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it <span class="token punctuation">{</span>容器ID<span class="token operator">|</span>容器名称<span class="token punctuation">}</span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>查看正在运行的容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-a</code></td><td align="left">显示所有的容器，包括未运行的</td></tr><tr><td align="left"><code>-f</code></td><td align="left">根据条件过滤显示的内容</td></tr><tr><td align="left"><code>--format</code></td><td align="left">指定返回值的模板文件</td></tr><tr><td align="left"><code>-l</code></td><td align="left">显示最近创建的容器</td></tr><tr><td align="left"><code>-n</code></td><td align="left">列出最近创建的n个容器</td></tr><tr><td align="left"><code>--no-trunc</code></td><td align="left">不截断输出</td></tr><tr><td align="left"><code>-q</code></td><td align="left">静默模式，只显示容器编号</td></tr><tr><td align="left"><code>-s</code></td><td align="left">显示总的文件大小</td></tr></tbody></table><p><strong>样例</strong></p><p><code>docker ps</code></p><table><thead><tr><th align="center">CONTAINER ID</th><th align="center">IMAGE</th><th align="center">COMMAND</th><th align="center">CREATED</th><th align="center">STATUS</th><th align="center">PORTS</th><th align="center">NAMES</th></tr></thead><tbody><tr><td align="center">5a0ec27520c6</td><td align="center">hub.c.163.com/library/mysql</td><td align="center">“docker-entrypoint…”</td><td align="center">12 seconds ago</td><td align="center">Up 9 seconds</td><td align="center">3306/tcp</td><td align="center">amazing_ardinghelli</td></tr></tbody></table><blockquote><p>各个项目说明：</p></blockquote><table><thead><tr><th align="left">项目</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>CONTAINER ID</code></td><td align="left">容器ID</td></tr><tr><td align="left"><code>IMAGE</code></td><td align="left">镜像名称</td></tr><tr><td align="left"><code>COMMAND</code></td><td align="left">命令</td></tr><tr><td align="left"><code>CREATED</code></td><td align="left">容器创建时间</td></tr><tr><td align="left"><code>PORTS</code></td><td align="left">端口</td></tr><tr><td align="left"><code>NAMES</code></td><td align="left">容器名称</td></tr></tbody></table><h4 id="inspect-1"><a href="#inspect-1" class="headerlink" title="inspect"></a>inspect</h4><p>获取容器/镜像的元数据</p><pre class="line-numbers language-bash"><code class="language-bash">docker inspect <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> NAME<span class="token operator">|</span>ID <span class="token punctuation">[</span>NAME<span class="token operator">|</span>ID<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">指定返回值的模板文件</td></tr><tr><td align="left"><code>-s</code></td><td align="left">显示总的文件大小</td></tr><tr><td align="left"><code>--type</code></td><td align="left">为指定类型返回JSON</td></tr></tbody></table><p><strong>样例</strong></p><p><code>docker inspect 9e6</code></p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>查看容器中运行的进程信息，支持 ps 命令参数</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">top</span> CONTAINER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h4><p>获取容器的日志</p><pre class="line-numbers language-bash"><code class="language-bash">docker logs <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>OPTIONS说明</p></blockquote><table><thead><tr><th align="left">参数</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>-f</code></td><td align="left">跟踪日志输出</td></tr><tr><td align="left"><code>--since</code></td><td align="left">显示某个开始时间的所有日志</td></tr><tr><td align="left"><code>-t</code></td><td align="left">显示时间戳</td></tr><tr><td align="left"><code>--tail</code></td><td align="left">仅列出最新N条容器日志</td></tr></tbody></table><p><strong>样例</strong></p><pre class="line-numbers language-bash"><code class="language-bash">docker logs -f 9e6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/Sitoi/cdn/img/docker_cmd_logic.png" alt="Docker 命令"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLDAP 常用命令</title>
      <link href="/posts/5308.html"/>
      <url>/posts/5308.html</url>
      
        <content type="html"><![CDATA[<h1 id="OpenLDAP-常用命令"><a href="#OpenLDAP-常用命令" class="headerlink" title="OpenLDAP 常用命令"></a>OpenLDAP 常用命令</h1><h3 id="ldapsearch"><a href="#ldapsearch" class="headerlink" title="ldapsearch"></a>ldapsearch</h3><blockquote><p>ldapsearch - ldap 搜索工具</p></blockquote><p>ldapsearch 实用程序可打开与 LDAP 服务器的连接，使用过滤器 filter 绑定并执行搜索。</p><p>如果 ldapsearch 找到一个或多个条目，则会检索由 attrs 指定的属性并且会将条目和值输出到标准输出。如果没有列出 attrs，则会返回所有属性。</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-d</code></td><td align="center">debuglevel 设置 LDAP 调试级别。适用于 ldapdelete 的有用调试级别包括：1:跟踪 2:包 4:选项 32:过滤器 128:访问控制 要请求多个类别的调试信息，请将掩码相加。例如，要请求跟踪和过滤器信息，请将 debuglevel 指定为 33。</td></tr><tr><td align="center"><code>-x</code></td><td align="center">进行简单认证</td></tr><tr><td align="center"><code>-D</code></td><td align="center">用来绑定服务器的DN</td></tr><tr><td align="center"><code>-w</code></td><td align="center">绑定DN的密码</td></tr><tr><td align="center"><code>-b</code></td><td align="center">指定要查询的根节点</td></tr><tr><td align="center"><code>-H</code></td><td align="center">制定要查询的服务器</td></tr></tbody></table><p><strong>例子</strong></p><h6 id="查询所有用户"><a href="#查询所有用户" class="headerlink" title="查询所有用户"></a>查询所有用户</h6><pre class="line-numbers language-bash"><code class="language-bash">ldapsearch -x -b <span class="token string">"dc=sitoi,dc=cn"</span> -H ldap://192.168.1.143<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="指定条件的查询"><a href="#指定条件的查询" class="headerlink" title="指定条件的查询"></a>指定条件的查询</h6><pre class="line-numbers language-bash"><code class="language-bash">ldapsearch -x -b <span class="token string">"dc=sitoi,dc=cn"</span> <span class="token string">"uid=demo"</span> -H ldap://192.168.1.143<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="或条件查询配合正则匹配"><a href="#或条件查询配合正则匹配" class="headerlink" title="或条件查询配合正则匹配"></a>或条件查询配合正则匹配</h6><pre class="line-numbers language-bash"><code class="language-bash">ldapsearch -x -b <span class="token string">"dc=sitoi,dc=cn"</span> <span class="token string">"(|(uid=*de*)(cn=*Ada Cather*))"</span> -H ldap://192.168.1.143<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="与条件查询配合正则匹配"><a href="#与条件查询配合正则匹配" class="headerlink" title="与条件查询配合正则匹配"></a>与条件查询配合正则匹配</h6><pre class="line-numbers language-bash"><code class="language-bash">ldapsearch -x -b <span class="token string">"dc=sitoi,dc=cn"</span> <span class="token string">"(&amp;(uid=*de*)(cn=*Ada Cather*))"</span> -H ldap://192.168.1.143<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="ldapadd"><a href="#ldapadd" class="headerlink" title="ldapadd"></a>ldapadd</h3><blockquote><p>ldapadd - ldap 条目添加工具</p></blockquote><p>ldapadd 实用程序是作为到 ldapmodify 工具的硬链接实现的。当作为 ldapadd 调用时，会自动打开 –a（添加新条目）选项。</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-x</code></td><td align="center">进行简单认证</td></tr><tr><td align="center"><code>-D</code></td><td align="center">用来绑定服务器的DN</td></tr><tr><td align="center"><code>-h</code></td><td align="center">目录服务的地址</td></tr><tr><td align="center"><code>-w</code></td><td align="center">绑定DN的密码</td></tr><tr><td align="center"><code>-f</code></td><td align="center">使用ldif文件进行条目添加的文件</td></tr></tbody></table><p><strong>例子</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ldapadd -x -D <span class="token string">"cn=root,dc=sitoi,dc=cn"</span> -w sitoi -f demo.ldifldapadd -x -D <span class="token string">"cn=root,dc=sitoi,dc=cn"</span> -w sitoi <span class="token comment" spellcheck="true">#(这样写就是在命令行添加条目)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="ldappasswd"><a href="#ldappasswd" class="headerlink" title="ldappasswd"></a>ldappasswd</h3><blockquote><p>ldapmodify - ldap 密码修改工具</p></blockquote><p>ldapmodify 实用程序可打开与 LDAP 服务器的连接，修改条目密码。</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-x</code></td><td align="center">进行简单认证</td></tr><tr><td align="center"><code>-D</code></td><td align="center">用来绑定服务器的DN</td></tr><tr><td align="center"><code>-w</code></td><td align="center">绑定DN的密码</td></tr><tr><td align="center"><code>-S</code></td><td align="center">提示的输入密码</td></tr><tr><td align="center"><code>-s</code></td><td align="center">pass 把密码设置为pass</td></tr><tr><td align="center"><code>-a</code></td><td align="center">pass 设置old passwd为pass</td></tr><tr><td align="center"><code>-A</code></td><td align="center">提示的设置old passwd</td></tr><tr><td align="center"><code>-H</code></td><td align="center">是指要绑定的服务器</td></tr><tr><td align="center"><code>-I</code></td><td align="center">使用sasl会话方式</td></tr></tbody></table><p><strong>例子</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ldappasswd -x -D <span class="token string">'cm=root,dc=sitoi,dc=cn'</span> -w sitoi <span class="token string">'uid=Sitoi,dc=sitoi,dc=cn'</span> -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-text"><code class="language-text">New password:Re-enter new password:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>就可以更改密码了，如果原来记录中没有密码，将会自动生成一个userPassword。</p><h3 id="ldapmodify"><a href="#ldapmodify" class="headerlink" title="ldapmodify"></a>ldapmodify</h3><blockquote><p>ldapmodify - ldap 条目修改工具</p></blockquote><p>ldapmodify 实用程序可打开与 LDAP 服务器的连接，绑定并修改或添加条目。条目信息是从标准输入或者从使用 –f 选项指定的 file 中读取的。ldapadd 实用程序是作为到 ldapmodify 工具的硬链接实现的。当作为 ldapadd 调用时，会自动打开 –a（添加新条目）选项。</p><p>ldapadd 和 ldapmodify 都拒绝同一条目的重复属性名/值对。</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-a</code></td><td align="center">添加新的条目.缺省的是修改存在的条目.</td></tr><tr><td align="center"><code>-C</code></td><td align="center">自动追踪引用.</td></tr><tr><td align="center"><code>-c</code></td><td align="center">出错后继续执行程序并不中止.缺省情况下出错的立即停止.比如如果你的ldif 文件内的某个条目在数据库内并不存在,缺省情况下程序立即退出,但如果使用了该选项,程序忽略该错误继续执行.</td></tr><tr><td align="center"><code>-n</code></td><td align="center">用于调试到服务器的通讯.但并不实际执行搜索.服务器关闭时,返回错误；服务器打开时,常和-v 选项一起测试到服务器是否是一条通路.</td></tr><tr><td align="center"><code>-v</code></td><td align="center">运行在详细模块.在标准输出中打出一些比较详细的信息.比如:连接到服务器的ip地址和端口号等.</td></tr><tr><td align="center"><code>-M[M]</code></td><td align="center">打开manage DSA IT 控制. -MM 把该控制设置为重要的.</td></tr><tr><td align="center"><code>-f</code></td><td align="center">file 从文件内读取条目的修改信息而不是从标准输入读取.</td></tr><tr><td align="center"><code>-x</code></td><td align="center">使用简单认证.</td></tr><tr><td align="center"><code>-D</code></td><td align="center">binddn 指定搜索的用户名(一般为一dn 值).</td></tr><tr><td align="center"><code>-W</code></td><td align="center">指定了该选项,系统将弹出一提示入用户的密码.它和-w 选项相对使用.</td></tr><tr><td align="center"><code>-w</code></td><td align="center">bindpasswd 直接指定用户的密码. 它和-W 选项相对使用.</td></tr><tr><td align="center"><code>-H</code></td><td align="center">ldapuri 指定连接到服务器uri(ip 地址和端口号,常见格式为 ldap://hostname:port).如果使用了-H 就不能使用-h 和-p 选项.</td></tr><tr><td align="center"><code>-h</code></td><td align="center">ldaphost 指定要连接的主机的名称/ip 地址.它和-p 一起使用.</td></tr><tr><td align="center"><code>-p</code></td><td align="center">ldapport 指定要连接目录服务器的端口号.它和-h 一起使用.如果使用了-h 和-p 选项就不能使用-H 选项.</td></tr><tr><td align="center"><code>-Z[Z]</code></td><td align="center">使用StartTLS 扩展操作.如果使用-ZZ,命令强制使用StartTLS 握手成功.</td></tr><tr><td align="center"><code>-V</code></td><td align="center">启用证书认证功能,目录服务器使用客户端证书进行身份验证,必须与-ZZ 强制启用TLS 方式配合使用,并且匿名绑定到目录服务器.</td></tr><tr><td align="center"><code>-e</code></td><td align="center">设置客户端证书文件,例: -e cert/client.crt</td></tr><tr><td align="center"><code>-E</code></td><td align="center">设置客户端证书私钥文件,例: -E cert/client.key</td></tr></tbody></table><p><strong>例子</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ldapmodify -x -D <span class="token string">"cn=root,dc=sitoi,dc=cn"</span> -W -f modify.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 <code>modify.ldif</code> 中的记录 更新 原有的记录。</p><h3 id="ldapdelete"><a href="#ldapdelete" class="headerlink" title="ldapdelete"></a>ldapdelete</h3><blockquote><p>ldapdelete - ldap 删除条目工具</p></blockquote><p>ldapmodify 实用程序可打开与 LDAP 服务器的连接，绑定并修改或添加条目。条目信息是从标准输入或者从使用 –f 选项指定的 file 中读取的。ldapadd 实用程序是作为到 ldapmodify 工具的硬链接实现的。当作为 ldapadd 调用时，会自动打开 –a（添加新条目）选项。</p><p>ldapadd 和 ldapmodify 都拒绝同一条目的重复属性名/值对。</p><table><thead><tr><th align="center">选项</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">-d debuglevel</td><td align="center">设置 LDAP 调试级别。适用于 ldapdelete 的有用调试级别包括：1:跟踪 2:包 4:选项 32:过滤器 128:访问控制 要请求多个类别的调试信息，请将掩码相加。例如，要请求跟踪和过滤器信息，请将 debuglevel 指定为 33。</td></tr><tr><td align="center">-D bindDN</td><td align="center">使用标识名 bindDN 绑定到目录。</td></tr><tr><td align="center">-f file</td><td align="center">从 file 而不是从标准输入读取条目删除信息。</td></tr><tr><td align="center">-h ldaphost</td><td align="center">指定运行 LDAP 服务器的备用主机。</td></tr><tr><td align="center">-p ldapport</td><td align="center">指定 LDAP 服务器侦听的备用 TCP 端口。</td></tr><tr><td align="center">-W password</td><td align="center">指定在 –P 选项中给出的客户端密钥数据库的口令。对于基于证书的客户端验证，此选项是必需的。在命令行上指定 password 会有安全问题，因为系统上的其他人可以通过 ps 命令看到口令。请改用 –j 从文件中指定口令。此选项与 –j 互斥。</td></tr><tr><td align="center">-w passwd</td><td align="center">使用 passwd 作为用于对目录进行验证的口令。当使用 –w passwd 指定用于验证的口令时，系统的其他用户可以通过 ps 命令在脚本文件中或者在 shell 历史记录中看到口令。如果在不使用此选项的情况下使用 ldapdelete 命令，则该命令将提示输入口令并从标准输入中读取口令。不与 –w 选项一起使用时，其他用户将看不到口令。</td></tr></tbody></table><p><strong>例子</strong></p><pre class="line-numbers language-bash"><code class="language-bash">ldapdelete -x -D <span class="token string">"cn=Manager,dc=sitoi,dc=cn"</span> -w sitoi <span class="token string">"uid=Sitoi,ou=People,dc=sitoi,dc=cn"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Tips:</p><blockquote><p>如果o或ou中有成员是不能删除的,那么o或ou不能删除。</p></blockquote></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> OpenLDAP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenLDAP </tag>
            
            <tag> 权限验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenLDAP 安装教程</title>
      <link href="/posts/48217.html"/>
      <url>/posts/48217.html</url>
      
        <content type="html"><![CDATA[<h1 id="OpenLDAP-安装教程"><a href="#OpenLDAP-安装教程" class="headerlink" title="OpenLDAP 安装教程"></a>OpenLDAP 安装教程</h1><p>在 centos7 上安装 OpenLDAP</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>两台虚拟机</p><p>node01 IP：192.168.1.143 server 端</p><p>node02 IP：192.168.1.146 client 端</p><p>均关闭 iptables 和 selinux 和 firewall</p><h2 id="Service端"><a href="#Service端" class="headerlink" title="Service端"></a>Service端</h2><p>步骤：</p><ol><li>安装包</li><li>拷贝 DB_CONFIG 文件</li><li>设置目录权限</li><li>创建 LDAP 管理员密码</li><li>修改配置文件(三个)</li><li>启动并设置开机启动 slapd 服务</li><li>导入基本 Schema</li><li>导入 base.ldif 文件</li><li>配置 migrationtools</li><li>导入系统用户和组</li><li>重启服务</li></ol><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> openldap-servers openldap-clients migrationtools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="拷贝-DB-CONFIG-文件"><a href="#拷贝-DB-CONFIG-文件" class="headerlink" title="拷贝 DB_CONFIG 文件"></a>拷贝 DB_CONFIG 文件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置目录权限"><a href="#设置目录权限" class="headerlink" title="设置目录权限"></a>设置目录权限</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> -R ldap. /var/lib/ldap/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建-LDAP-管理员密码"><a href="#创建-LDAP-管理员密码" class="headerlink" title="创建 LDAP 管理员密码"></a>创建 LDAP 管理员密码</h3><pre class="line-numbers language-bash"><code class="language-bash">slappasswd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输入两次后，保存密文"><a href="#输入两次后，保存密文" class="headerlink" title="输入两次后，保存密文"></a>输入两次后，保存密文</h4><pre class="line-numbers language-bash"><code class="language-bash">New password:Re-enter new password:<span class="token punctuation">{</span>SSHA<span class="token punctuation">}</span>AFU2R+sLzJgjUIoW1B5SxcTUdFcuncLz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="修改配置文件-三个"><a href="#修改配置文件-三个" class="headerlink" title="修改配置文件(三个)"></a>修改配置文件(三个)</h3><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/openldap/slapd.d/cn\<span class="token operator">=</span>config/olcDatabase\<span class="token operator">=</span>\<span class="token punctuation">{</span>0\<span class="token punctuation">}</span>config.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vim"><code class="language-vim"># AUTO<span class="token operator">-</span>GENERATED FILE <span class="token operator">-</span> DO NOT EDIT<span class="token operator">!</span><span class="token operator">!</span> Use ldapmodify<span class="token operator">.</span># CRC32 d30fb98edn<span class="token punctuation">:</span> olcDatabase<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>configobjectClass<span class="token punctuation">:</span> olcDatabaseConfigolcDatabase<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>configolcAccess<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">to</span> <span class="token operator">*</span> by dn<span class="token operator">.</span>base<span class="token operator">=</span><span class="token comment" spellcheck="true">"gidNumber=0+uidNumber=0,cn=peercred,cn=extern</span> <span class="token keyword">al</span><span class="token punctuation">,</span><span class="token keyword">cn</span><span class="token operator">=</span>auth<span class="token comment" spellcheck="true">" manage by * none</span>structuralObjectClass<span class="token punctuation">:</span> olcDatabaseConfigentryUUID<span class="token punctuation">:</span> 73e7786c<span class="token operator">-</span>50fa<span class="token operator">-</span><span class="token number">1038</span><span class="token operator">-</span>9bfb<span class="token operator">-</span>9bfcf0927062creatorsName<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>configcreateTimestamp<span class="token punctuation">:</span> 20180920082518ZentryCSN<span class="token punctuation">:</span> <span class="token number">20180920082518</span><span class="token operator">.</span>739228Z#<span class="token number">000000</span>#<span class="token number">000</span>#<span class="token number">000000</span>modifiersName<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>configmodifyTimestamp<span class="token punctuation">:</span> 20180920082518ZolcRootPW<span class="token punctuation">:</span> <span class="token punctuation">{</span>SSHA<span class="token punctuation">}</span>37kYCk8iLCmIrGnRvLc7XLAuPqftFUF<span class="token operator">/</span>        # 添加该行（密码）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/openldap/slapd.d/cn\<span class="token operator">=</span>config/olcDatabase\<span class="token operator">=</span>\<span class="token punctuation">{</span>2\<span class="token punctuation">}</span>hdb.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vim"><code class="language-vim"># AUTO<span class="token operator">-</span>GENERATED FILE <span class="token operator">-</span> DO NOT EDIT<span class="token operator">!</span><span class="token operator">!</span> Use ldapmodify<span class="token operator">.</span># CRC32 d41d7411dn<span class="token punctuation">:</span> olcDatabase<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdbobjectClass<span class="token punctuation">:</span> olcDatabaseConfigobjectClass<span class="token punctuation">:</span> olcHdbConfigolcDatabase<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span>hdbolcDbDirectory<span class="token punctuation">:</span> <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>ldapolcSuffix<span class="token punctuation">:</span> dc<span class="token operator">=</span>sitoi<span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token keyword">cn</span>                                       # 更改dcolcRootDN<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>Manager<span class="token punctuation">,</span>dc<span class="token operator">=</span>sitoi<span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token keyword">cn</span>                            # 更改dcolcRootPW<span class="token punctuation">:</span> <span class="token punctuation">{</span>SSHA<span class="token punctuation">}</span>37kYCk8iLCmIrGnRvLc7XLAuPqftFUF<span class="token operator">/</span>               # 添加该行（密码）olcDbIndex<span class="token punctuation">:</span> objectClass eq<span class="token punctuation">,</span>presolcDbIndex<span class="token punctuation">:</span> <span class="token keyword">ou</span><span class="token punctuation">,</span><span class="token keyword">cn</span><span class="token punctuation">,</span>mail<span class="token punctuation">,</span>surname<span class="token punctuation">,</span>givenname eq<span class="token punctuation">,</span>pres<span class="token punctuation">,</span>substructuralObjectClass<span class="token punctuation">:</span> olcHdbConfigentryUUID<span class="token punctuation">:</span> 73e77fe2<span class="token operator">-</span>50fa<span class="token operator">-</span><span class="token number">1038</span><span class="token operator">-</span>9bfd<span class="token operator">-</span>9bfcf0927062creatorsName<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>configcreateTimestamp<span class="token punctuation">:</span> 20180920082518ZentryCSN<span class="token punctuation">:</span> <span class="token number">20180920082518</span><span class="token operator">.</span>739419Z#<span class="token number">000000</span>#<span class="token number">000</span>#<span class="token number">000000</span>modifiersName<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>configmodifyTimestamp<span class="token punctuation">:</span> 20180920082518ZolcAccess<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">to</span> attrs<span class="token operator">=</span>userPassword by self <span class="token keyword">write</span> by dn<span class="token operator">.</span>base<span class="token operator">=</span><span class="token string">"cn=Manager,dc=sitoi,dc=cn"</span> <span class="token keyword">write</span> by anonymous auth by <span class="token operator">*</span> none   # 添加该行olcAccess<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">to</span> <span class="token operator">*</span> by dn<span class="token operator">.</span>base<span class="token operator">=</span><span class="token string">"cn=Manager,dc=sitoi,dc=cn"</span> <span class="token keyword">write</span> by self <span class="token keyword">write</span> by <span class="token operator">*</span> <span class="token keyword">read</span>                                      # 添加该行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/openldap/slapd.d/cn\<span class="token operator">=</span>config/olcDatabase\<span class="token operator">=</span>\<span class="token punctuation">{</span>1\<span class="token punctuation">}</span>monitor.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vim"><code class="language-vim"># AUTO<span class="token operator">-</span>GENERATED FILE <span class="token operator">-</span> DO NOT EDIT<span class="token operator">!</span><span class="token operator">!</span> Use ldapmodify<span class="token operator">.</span># CRC32 261d1986dn<span class="token punctuation">:</span> olcDatabase<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>monitorobjectClass<span class="token punctuation">:</span> olcDatabaseConfigolcDatabase<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span>monitorolcAccess<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">to</span> <span class="token operator">*</span> by dn<span class="token operator">.</span>base<span class="token operator">=</span><span class="token comment" spellcheck="true">"gidNumber=0+uidNumber=0,cn=peercred,cn=extern</span> <span class="token keyword">al</span><span class="token punctuation">,</span><span class="token keyword">cn</span><span class="token operator">=</span>auth<span class="token string">" read by dn.base="</span><span class="token keyword">cn</span><span class="token operator">=</span>Manager<span class="token punctuation">,</span>dc<span class="token operator">=</span>sitoi<span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token keyword">cn</span><span class="token comment" spellcheck="true">" read by * none    # 修改dc信息</span>structuralObjectClass<span class="token punctuation">:</span> olcDatabaseConfigentryUUID<span class="token punctuation">:</span> 73e77bbe<span class="token operator">-</span>50fa<span class="token operator">-</span><span class="token number">1038</span><span class="token operator">-</span>9bfc<span class="token operator">-</span>9bfcf0927062creatorsName<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>configcreateTimestamp<span class="token punctuation">:</span> 20180920082518ZentryCSN<span class="token punctuation">:</span> <span class="token number">20180920082518</span><span class="token operator">.</span>739313Z#<span class="token number">000000</span>#<span class="token number">000</span>#<span class="token number">000000</span>modifiersName<span class="token punctuation">:</span> <span class="token keyword">cn</span><span class="token operator">=</span>configmodifyTimestamp<span class="token punctuation">:</span> 20180920082518Z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动并设置开机启动-slapd-服务"><a href="#启动并设置开机启动-slapd-服务" class="headerlink" title="启动并设置开机启动 slapd 服务"></a>启动并设置开机启动 slapd 服务</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> slapd.servicesystemctl start slapd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="导入基本-Schema"><a href="#导入基本-Schema" class="headerlink" title="导入基本 Schema"></a>导入基本 Schema</h3><pre class="line-numbers language-bash"><code class="language-bash">ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldifldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldifldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="导入-base-ldif-文件"><a href="#导入-base-ldif-文件" class="headerlink" title="导入 base.ldif 文件"></a>导入 base.ldif 文件</h3><pre class="line-numbers language-bash"><code class="language-bash">vim base.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vim"><code class="language-vim">dn<span class="token punctuation">:</span> dc<span class="token operator">=</span>sitoi<span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token keyword">cn</span>objectClass<span class="token punctuation">:</span> dcObjectobjectClass<span class="token punctuation">:</span> organizationdc<span class="token punctuation">:</span> sitoi<span class="token keyword">o</span> <span class="token punctuation">:</span> sitoidn<span class="token punctuation">:</span> <span class="token keyword">ou</span><span class="token operator">=</span>People<span class="token punctuation">,</span>dc<span class="token operator">=</span>sitoi<span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token keyword">cn</span>objectClass<span class="token punctuation">:</span> organizationalUnit<span class="token keyword">ou</span><span class="token punctuation">:</span> Peopledn<span class="token punctuation">:</span> <span class="token keyword">ou</span><span class="token operator">=</span>Group<span class="token punctuation">,</span>dc<span class="token operator">=</span>sitoi<span class="token punctuation">,</span>dc<span class="token operator">=</span><span class="token keyword">cn</span>objectClass<span class="token punctuation">:</span> organizationalUnit<span class="token keyword">ou</span><span class="token punctuation">:</span> Group<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="执行导入"><a href="#执行导入" class="headerlink" title="执行导入"></a>执行导入</h4><pre class="line-numbers language-bash"><code class="language-bash">ldapadd -x -D cn<span class="token operator">=</span>Manager,dc<span class="token operator">=</span>sitoi,dc<span class="token operator">=</span>cn -w sitoi  -f base.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置-migrationtools"><a href="#配置-migrationtools" class="headerlink" title="配置 migrationtools"></a>配置 migrationtools</h3><pre><code>vim /usr/share/migrationtools/migrate_common.ph</code></pre><h4 id="更改以下配置"><a href="#更改以下配置" class="headerlink" title="更改以下配置"></a>更改以下配置</h4><pre class="line-numbers language-vim"><code class="language-vim"># Default DNS domain$DEFAULT_MAIL_DOMAIN <span class="token operator">=</span> <span class="token string">"sitoi.cn"</span><span class="token punctuation">;</span># Default base$DEFAULT_BASE <span class="token operator">=</span> <span class="token string">"dc=sitoi,dc=cn"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入系统用户和组"><a href="#导入系统用户和组" class="headerlink" title="导入系统用户和组"></a>导入系统用户和组</h3><h4 id="利用-pl-脚本将-etc-passwd-和-etc-shadow-生成-LDAP-能读懂的文件格式，保存在-tmp-下"><a href="#利用-pl-脚本将-etc-passwd-和-etc-shadow-生成-LDAP-能读懂的文件格式，保存在-tmp-下" class="headerlink" title="利用 pl 脚本将 /etc/passwd 和 /etc/shadow 生成 LDAP 能读懂的文件格式，保存在 /tmp/ 下"></a>利用 pl 脚本将 /etc/passwd 和 /etc/shadow 生成 LDAP 能读懂的文件格式，保存在 /tmp/ 下</h4><pre class="line-numbers language-bash"><code class="language-bash">/usr/share/migrationtools/migrate_base.pl <span class="token operator">></span> /tmp/base.ldif/usr/share/migrationtools/migrate_passwd.pl /etc/passwd  <span class="token operator">></span> /tmp/passwd.ldif/usr/share/migrationtools/migrate_group.pl /etc/group <span class="token operator">></span> /tmp/group.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="导入-LDAP"><a href="#导入-LDAP" class="headerlink" title="导入 LDAP"></a>导入 LDAP</h4><blockquote><p>需要输入管理员密码</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">ldapadd -x -D <span class="token string">"cn=Manager,dc=sitoi,dc=cn"</span> -w sitoi -f /tmp/base.ldifldapadd -x -D <span class="token string">"cn=Manager,dc=sitoi,dc=cn"</span> -w sitoi -f /tmp/group.ldifldapadd -x -D <span class="token string">"cn=Manager,dc=sitoi,dc=cn"</span> -w sitoi -f /tmp/passwd.ldif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart slapd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Client-端"><a href="#Client-端" class="headerlink" title="Client 端"></a>Client 端</h2><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> OpenLDAP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装文档 </tag>
            
            <tag> OpenLDAP </tag>
            
            <tag> 权限验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 代码规范 （GFM）</title>
      <link href="/posts/15814.html"/>
      <url>/posts/15814.html</url>
      
        <content type="html"><![CDATA[<h1 id="GFM"><a href="#GFM" class="headerlink" title="GFM"></a>GFM</h1><p>该文件用来测试和展示书写 <code>README</code> 的各种 <code>markdown</code> 语法。<br><code>GitHub</code> 的 <code>markdown</code> 语法在标准的 <code>markdown</code> 语法基础上做了扩充，称之为 <code>GitHub Flavored Markdown</code>。<br>简称 <code>GFM</code>，<code>GFM</code> 在 <code>GitHub</code> 上有广泛应用，除了 <code>README</code> 文件外，<code>issues</code> 和 <code>wiki</code> 均支持 <code>markdown</code> 语法。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#横线">横线</a></p></li><li><p><a href="#标题">标题</a></p></li><li><p><a href="#文本">文本</a></p><ul><li>普通文本</li><li>单行文本</li><li>多行文本</li><li>文字高亮</li><li>换行</li><li>斜体</li><li>粗体</li><li>删除线</li></ul></li><li><p><a href="#图片">图片</a></p><ul><li><p>来源于网络的图片</p></li><li><p>GitHub仓库中的图片</p></li></ul></li><li><p><a href="#链接">链接</a></p><ul><li><p>文字超链接</p><ul><li><p>链接外部URL</p></li><li><p>链接本仓库里的URL</p></li></ul></li><li><p>锚点</p></li><li><p><a href="#图片链接">图片链接</a></p></li></ul></li><li><p><a href="#列表">列表</a></p><ul><li><p>无序列表</p></li><li><p>有序列表</p></li><li><p>复选框列表</p></li></ul></li><li><p><a href="#块引用">块引用</a></p></li><li><p><a href="#代码高亮">代码高亮</a></p></li><li><p><a href="#表格">表格</a></p></li><li><p><a href="#表情">表情</a></p></li></ul><h2 id="横线"><a href="#横线" class="headerlink" title="横线"></a>横线</h2><p>***、—、___可以显示横线效果</p><hr><hr><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h3 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h3><p>这是一段普通的文本</p><h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><pre><code>Hello,大家好，我是 Sitoi。</code></pre><p>在一行开头加入 1 个 Tab 或者 4 个空格。</p><h3 id="文本块"><a href="#文本块" class="headerlink" title="文本块"></a>文本块</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法 1"></a>语法 1</h4><p>在连续几行的文本开头加入 1 个 Tab 或者 4 个空格。</p><pre><code>欢迎到访很高兴见到您</code></pre><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法 2"></a>语法 2</h4><p>使用一对各三个的反引号：</p><pre><code>欢迎到访很高兴见到您</code></pre><p>该语法也可以实现代码高亮，见<a href="#代码高亮">代码高亮</a></p><h3 id="文字高亮"><a href="#文字高亮" class="headerlink" title="文字高亮"></a>文字高亮</h3><p>文字高亮功能能使行内部分文字高亮，使用一对反引号。</p><p>语法：</p><pre><code>`linux` `网络编程` `socket` `epoll` </code></pre><p>效果：<code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p><p>也适合做一篇文章的 tag</p><h4 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h4><p>直接回车不能换行，可以在上一行文本后面补两个空格，这样下一行的文本就换行了。</p><p>或者就是在两行文本直接加一个空行。</p><p>也能实现换行效果，不过这个行间距有点大。</p><h4 id="斜体、粗体、删除线"><a href="#斜体、粗体、删除线" class="headerlink" title="斜体、粗体、删除线"></a>斜体、粗体、删除线</h4><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>*斜体1*</code></td><td align="center"><em>斜体1</em></td></tr><tr><td align="center"><code>_斜体2_</code></td><td align="center"><em>斜体2</em></td></tr><tr><td align="center"><code>**粗体1**</code></td><td align="center"><strong>粗体1</strong></td></tr><tr><td align="center"><code>__粗体2__</code></td><td align="center"><strong>粗体2</strong></td></tr><tr><td align="center"><code>这是一个 ~~删除线~~</code></td><td align="center">这是一个 <del>删除线</del></td></tr><tr><td align="center"><code>***斜粗体1***</code></td><td align="center"><strong><em>斜粗体1</em></strong></td></tr><tr><td align="center"><code>___斜粗体2___</code></td><td align="center"><strong><em>斜粗体2</em></strong></td></tr><tr><td align="center"><code>***~~斜粗体删除线1~~***</code></td><td align="center"><strong><em><del>斜粗体删除线1</del></em></strong></td></tr><tr><td align="center"><code>~~***斜粗体删除线2***~~</code></td><td align="center"><del><strong><em>斜粗体删除线2</em></strong></del></td></tr></tbody></table><p>斜体、粗体、删除线可混合使用</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>基本格式：</p><pre><code>![alt](URL title)</code></pre><p><code>alt</code> 和 <code>title</code> 即对应 <code>HTML</code> 中的 <code>alt</code> 和 <code>title</code> 属性（都可省略）：</p><ul><li><code>alt</code> 表示图片显示失败时的替换文本</li><li><code>title</code> 表示鼠标悬停在图片时的显示文本（注意这里要加引号）</li></ul><p><code>URL</code> 即图片的 <code>url</code> 地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>就可了，如果引用其他 <code>github</code> 仓库中的图片要注意格式，即：<code>仓库地址/raw/分支名/图片路径</code>，如：</p><pre><code>https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif</code></pre><table><thead><tr><th align="center">#</th><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>![baidu](http://www.baidu.com/img/bdlogo.gif "百度logo")</code></td><td align="center"><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo"></td></tr><tr><td align="center">2</td><td align="center"><code>![][Github]</code></td><td align="center"><img src="https://raw.githubusercontent.com/Sitoi/Sitoi.github.io/master/img/avatar-ny.jpg" alt=""></td></tr></tbody></table><p>注意 <code>例2</code> 的写法使用了<strong>URL标识符</strong>的形式，在<a href="#链接">链接</a>一节有介绍。</p><blockquote><p>在文末有 <code>Github</code> 的定义：</p></blockquote><pre><code>[Github]:https://raw.githubusercontent.com/Sitoi/Sitoi.github.io/master/img/avatar-ny.jpg</code></pre><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="链接外部URL"><a href="#链接外部URL" class="headerlink" title="链接外部URL"></a>链接外部URL</h3><table><thead><tr><th align="center">#</th><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>[我的博客](http://sitoi.cn "悬停显示")</code></td><td align="center"><a href="http://sitoi.cn" title="悬停显示">我的博客</a></td></tr><tr><td align="center">2</td><td align="center"><code>[我的知乎][zhihu]</code></td><td align="center"><a href="https://www.zhihu.com/people/Sitoi" title="我的知乎，欢迎关注">我的知乎</a></td></tr><tr><td align="center">2</td><td align="center"><code>[zhihu](https://www.zhihu.com/people/Sitoi "我的知乎，欢迎关注")</code></td><td align="center"><a href="https://www.zhihu.com/people/Sitoi" title="我的知乎，欢迎关注">zhihu</a></td></tr></tbody></table><p>语法2 由两部分组成：</p><ul><li>第一部分使用两个中括号，[ ]里的标识符（本例中 <code>zhihu</code>），可以是数字，字母等的组合，标识符上下对应就行了（<strong>姑且称之为URL标识符</strong>）</li><li>第二部分标记实际 <code>URL</code>。</li></ul><blockquote><p>使用 <code>URL</code> 标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。</p><blockquote><p><code>URL</code>标识符是我起的名字，不知道是否准确。囧。。</p></blockquote></blockquote><h3 id="链接本仓库里的URL"><a href="#链接本仓库里的URL" class="headerlink" title="链接本仓库里的URL"></a>链接本仓库里的URL</h3><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">`[我的简介]</td><td align="center">(/example/profile.md)`</td></tr><tr><td align="center">`[Book]</td><td align="center">(./Book)`</td></tr></tbody></table><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>给图片加链接的本质是混合图片显示语法和普通的链接语法。<br>普通的链接中 <code>[ ]</code> 内部是链接要显示的文本，而图片链接 <code>[ ]</code> 里面则是要显示的图片。<br>直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用 <code>URL</code> 标识符的形式。</p><table><thead><tr><th align="center">#</th><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>[![zhihu-logo]](https://www.zhihu.com/people/Sitoi)</code></td><td align="center"><a href="https://www.zhihu.com/people/Sitoi"><img src="/img/zhihu.jpg" alt="zhihu-logo" title="点击图片进入我的知乎"></a></td></tr><tr><td align="center">2</td><td align="center"><code>[![](/img/zhihu.jpg "我的知乎，欢迎关注")][zhihu]</code></td><td align="center"><a href="https://www.zhihu.com/people/Sitoi" title="我的知乎，欢迎关注"><img src="/img/zhihu.jpg" alt="" title="我的知乎，欢迎关注"></a></td></tr><tr><td align="center">3</td><td align="center"><code>[![zhihu-logo]][zhihu]</code></td><td align="center"><a href="https://www.zhihu.com/people/Sitoi" title="我的知乎，欢迎关注"><img src="/img/zhihu.jpg" alt="zhihu-logo" title="点击图片进入我的知乎"></a></td></tr></tbody></table><p>因为图片本身和链接本身都支持 <code>URL</code> 标识符的形式，所以图片链接也可以很简洁（见例3）。</p><p>注意，此时鼠标悬停时显示的文字是图片的 <code>title</code>，而非链接本身的 <code>title</code> 了。</p><blockquote><p>本文 <code>URL</code> 标识符都放置于文末</p></blockquote><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>其实呢，每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似，比如我们 </p><table><thead><tr><th align="center">语法</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center"><code>[回到顶部](#gfm)</code></td><td align="center"><a href="#gfm">回到顶部</a></td></tr></tbody></table><p>不过要注意，标题中的英文字母都被转化为<strong>小写字母</strong>了。</p><blockquote><p>以前 <code>GitHub</code> 对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！</p></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>昵称：Sitoi</li></ul><ul><li>别名：Sitoi</li></ul><ul><li>英文名：Sitoi</li></ul><h3 id="多级无序列表"><a href="#多级无序列表" class="headerlink" title="多级无序列表"></a>多级无序列表</h3><ul><li>编程语言<ul><li>脚本语言<ul><li>Python</li></ul></li></ul></li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><h4 id="一般效果"><a href="#一般效果" class="headerlink" title="一般效果"></a>一般效果</h4><p>就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。<br>面向对象的三个基本特征：</p><ol><li>封装</li><li>继承</li><li>多态</li></ol><h4 id="有序列表自动排序"><a href="#有序列表自动排序" class="headerlink" title="有序列表自动排序"></a>有序列表自动排序</h4><p>也可以在第一行指定<code>1.</code>，而接下来的几行用星号<code>*</code>（或者继续用数字1. ）就可以了，它会自动显示成2、3、4……。<br>面向对象的七大原则：</p><ol><li>开闭原则</li></ol><ul><li>里氏转换原则</li><li>依赖倒转原则</li><li>接口隔离原则</li><li>组合/聚合复用原则</li><li>“迪米特”法则</li><li>单一职责原则</li></ul><h4 id="多级有序列表"><a href="#多级有序列表" class="headerlink" title="多级有序列表"></a>多级有序列表</h4><p>和无序列表一样，有序列表也有多级结构：</p><ol><li>这是一级的有序列表，数字1还是1<ol><li>这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字<ol><li>这是三级的有序列表，数字在显示的时候变成了英文字母<ol><li>四级的有序列表显示效果，就不再变化了，依旧是英文字母</li></ol></li></ol></li></ol></li></ol><h3 id="复选框列表"><a href="#复选框列表" class="headerlink" title="复选框列表"></a>复选框列表</h3><ul><li><input checked="" disabled="" type="checkbox"> 需求分析</li><li><input checked="" disabled="" type="checkbox"> 系统设计</li><li><input checked="" disabled="" type="checkbox"> 详细设计</li><li><input disabled="" type="checkbox"> 编码</li><li><input disabled="" type="checkbox"> 测试</li><li><input disabled="" type="checkbox"> 交付</li></ul><p>您可以使用这个功能来标注某个项目各项任务的完成情况。</p><blockquote><p>Tip:</p><blockquote><p>在 <code>GitHub</code> 的<strong>issue</strong>中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改 <code>issue</code> 原文。</p></blockquote></blockquote><h2 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h2><h3 id="常用于引用文本"><a href="#常用于引用文本" class="headerlink" title="常用于引用文本"></a>常用于引用文本</h3><h4 id="文本摘自《深入理解计算机系统》P27"><a href="#文本摘自《深入理解计算机系统》P27" class="headerlink" title="文本摘自《深入理解计算机系统》P27"></a>文本摘自《深入理解计算机系统》P27</h4><p>　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。<br>实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，<br>其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。<br>只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。</p><blockquote><p><strong>“端”（endian）的起源</strong></p></blockquote><p>以下是Jonathan Swift在1726年关于大小端之争历史的描述：</p><p>“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”</p><h3 id="块引用有多级结构"><a href="#块引用有多级结构" class="headerlink" title="块引用有多级结构"></a>块引用有多级结构</h3><blockquote><p>数据结构</p><blockquote><p>树</p><blockquote><p>二叉树</p><blockquote><p>平衡二叉树</p><blockquote><p>满二叉树</p></blockquote></blockquote></blockquote></blockquote></blockquote><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。</p><pre class="line-numbers language-Java"><code class="language-Java">public static void main(String[]args){} //Java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//C</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Bash"><code class="language-Bash">echo "hello GitHub" #Bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myH1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">"Welcome to my Homepage"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//javascipt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp">string <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> A<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> B<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//cpp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>表格单元</td><td>表格单元</td></tr><tr><td>表格单元</td><td>表格单元</td></tr></tbody></table><table><thead><tr><th>表头1</th><th>表头2</th></tr></thead><tbody><tr><td>表格单元</td><td>表格单元</td></tr><tr><td>表格单元</td><td>表格单元</td></tr></tbody></table><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>表格可以指定对齐方式</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">col 3 is</td><td align="center">some wordy text</td><td align="right">$1600</td></tr><tr><td align="left">col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td align="left">zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><h3 id="混合其他语法"><a href="#混合其他语法" class="headerlink" title="混合其他语法"></a>混合其他语法</h3><p>表格单元中的内容可以和其他大多数GFM语法配合使用，如：</p><h4 id="使用普通文本的删除线，斜体等效果"><a href="#使用普通文本的删除线，斜体等效果" class="headerlink" title="使用普通文本的删除线，斜体等效果"></a>使用普通文本的删除线，斜体等效果</h4><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>Help</td><td><del>Display the</del> help window.</td></tr><tr><td>Close</td><td><em>Closes</em> a window</td></tr></tbody></table><h4 id="表格中嵌入图片（链接）"><a href="#表格中嵌入图片（链接）" class="headerlink" title="表格中嵌入图片（链接）"></a>表格中嵌入图片（链接）</h4><p>其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。</p><table><thead><tr><th>图片</th><th>描述</th></tr></thead><tbody><tr><td><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度 logo"></td><td>百度</td></tr></tbody></table><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p><code>Github</code> 的 <code>Markdown</code> 语法支持添加 <code>emoji</code> 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p>比如 <code>:blush:</code>，可以显示 <span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8">😊</span>。</p><p>具体每一个表情的符号码，可以查询 <code>GitHub</code> 的官方网页<a href="http://www.emoji-cheat-sheet.com">http://www.emoji-cheat-sheet.com</a>。</p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 规范 </tag>
            
            <tag> MarkDown </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
